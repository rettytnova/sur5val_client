// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protos/protocol.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from protos/protocol.proto</summary>
public static partial class ProtocolReflection
{

    #region Descriptor
    /// <summary>File descriptor for protos/protocol.proto</summary>
    public static pbr::FileDescriptor Descriptor
    {
        get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtocolReflection()
    {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            string.Concat(
              "ChVwcm90b3MvcHJvdG9jb2wucHJvdG8iggEKCFJvb21EYXRhEgoKAmlkGAEg",
              "ASgFEg8KB293bmVySWQYAiABKAMSDAoEbmFtZRgDIAEoCRISCgptYXhVc2Vy",
              "TnVtGAQgASgFEh0KBXN0YXRlGAUgASgOMg4uUm9vbVN0YXRlVHlwZRIYCgV1",
              "c2VycxgGIAMoCzIJLlVzZXJEYXRhIksKCFVzZXJEYXRhEgoKAmlkGAEgASgD",
              "EhAKCG5pY2tuYW1lGAIgASgJEiEKCWNoYXJhY3RlchgDIAEoCzIOLkNoYXJh",
              "Y3RlckRhdGEi+gIKDUNoYXJhY3RlckRhdGESJQoNY2hhcmFjdGVyVHlwZRgB",
              "IAEoDjIOLkNoYXJhY3RlclR5cGUSGwoIcm9sZVR5cGUYAiABKA4yCS5Sb2xl",
              "VHlwZRINCgVsZXZlbBgDIAEoBRILCgNleHAYBCABKAUSDAoEZ29sZBgFIAEo",
              "BRINCgVtYXhIcBgGIAEoBRIKCgJocBgHIAEoBRIKCgJtcBgIIAEoBRIOCgZh",
              "dHRhY2sYCSABKAUSDQoFYXJtb3IYCiABKAUSDgoGd2VhcG9uGAsgASgFEg4K",
              "BnBvdGlvbhgMIAEoBRIqCglzdGF0ZUluZm8YDSABKAsyFy5DaGFyYWN0ZXJT",
              "dGF0ZUluZm9EYXRhEg4KBmVxdWlwcxgOIAMoBRIPCgdkZWJ1ZmZzGA8gAygF",
              "EhwKCWhhbmRDYXJkcxgQIAMoCzIJLkNhcmREYXRhEhYKDmhhbmRDYXJkc0Nv",
              "dW50GBEgASgFEhIKCmJiYW5nQ291bnQYEiABKAUiOQoVQ2hhcmFjdGVyUG9z",
              "aXRpb25EYXRhEgoKAmlkGAEgASgDEgkKAXgYAiABKAESCQoBeRgDIAEoASIy",
              "CghDYXJkRGF0YRIXCgR0eXBlGAEgASgOMgkuQ2FyZFR5cGUSDQoFY291bnQY",
              "AiABKAUiQwoNR2FtZVN0YXRlRGF0YRIdCglwaGFzZVR5cGUYASABKA4yCi5Q",
              "aGFzZVR5cGUSEwoLbmV4dFBoYXNlQXQYAiABKAMilAEKFkNoYXJhY3RlclN0",
              "YXRlSW5mb0RhdGESIgoFc3RhdGUYASABKA4yEy5DaGFyYWN0ZXJTdGF0ZVR5",
              "cGUSJgoJbmV4dFN0YXRlGAIgASgOMhMuQ2hhcmFjdGVyU3RhdGVUeXBlEhMK",
              "C25leHRTdGF0ZUF0GAMgASgDEhkKEXN0YXRlVGFyZ2V0VXNlcklkGAQgASgD",
              "IkcKEkMyU1JlZ2lzdGVyUmVxdWVzdBINCgVlbWFpbBgBIAEoCRIQCghuaWNr",
              "bmFtZRgCIAEoCRIQCghwYXNzd29yZBgDIAEoCSJaChNTMkNSZWdpc3RlclJl",
              "c3BvbnNlEg8KB3N1Y2Nlc3MYASABKAgSDwoHbWVzc2FnZRgCIAEoCRIhCghm",
              "YWlsQ29kZRgDIAEoDjIPLkdsb2JhbEZhaWxDb2RlIjIKD0MyU0xvZ2luUmVx",
              "dWVzdBINCgVlbWFpbBgBIAEoCRIQCghwYXNzd29yZBgCIAEoCSKBAQoQUzJD",
              "TG9naW5SZXNwb25zZRIPCgdzdWNjZXNzGAEgASgIEg8KB21lc3NhZ2UYAiAB",
              "KAkSDQoFdG9rZW4YAyABKAkSGQoGbXlJbmZvGAQgASgLMgkuVXNlckRhdGES",
              "IQoIZmFpbENvZGUYBSABKA4yDy5HbG9iYWxGYWlsQ29kZSI4ChRDMlNDcmVh",
              "dGVSb29tUmVxdWVzdBIMCgRuYW1lGAEgASgJEhIKCm1heFVzZXJOdW0YAiAB",
              "KAUiZAoVUzJDQ3JlYXRlUm9vbVJlc3BvbnNlEg8KB3N1Y2Nlc3MYASABKAgS",
              "FwoEcm9vbRgCIAEoCzIJLlJvb21EYXRhEiEKCGZhaWxDb2RlGAMgASgOMg8u",
              "R2xvYmFsRmFpbENvZGUiFwoVQzJTR2V0Um9vbUxpc3RSZXF1ZXN0IjIKFlMy",
              "Q0dldFJvb21MaXN0UmVzcG9uc2USGAoFcm9vbXMYASADKAsyCS5Sb29tRGF0",
              "YSIkChJDMlNKb2luUm9vbVJlcXVlc3QSDgoGcm9vbUlkGAEgASgFImIKE1My",
              "Q0pvaW5Sb29tUmVzcG9uc2USDwoHc3VjY2VzcxgBIAEoCBIXCgRyb29tGAIg",
              "ASgLMgkuUm9vbURhdGESIQoIZmFpbENvZGUYAyABKA4yDy5HbG9iYWxGYWls",
              "Q29kZSIqChhDMlNKb2luUmFuZG9tUm9vbVJlcXVlc3QSDgoGcm9vbUlkGAEg",
              "ASgFImgKGVMyQ0pvaW5SYW5kb21Sb29tUmVzcG9uc2USDwoHc3VjY2VzcxgB",
              "IAEoCBIXCgRyb29tGAIgASgLMgkuUm9vbURhdGESIQoIZmFpbENvZGUYAyAB",
              "KA4yDy5HbG9iYWxGYWlsQ29kZSI2ChdTMkNKb2luUm9vbU5vdGlmaWNhdGlv",
              "bhIbCghqb2luVXNlchgBIAEoCzIJLlVzZXJEYXRhIhUKE0MyU0xlYXZlUm9v",
              "bVJlcXVlc3QiSgoUUzJDTGVhdmVSb29tUmVzcG9uc2USDwoHc3VjY2VzcxgB",
              "IAEoCBIhCghmYWlsQ29kZRgCIAEoDjIPLkdsb2JhbEZhaWxDb2RlIioKGFMy",
              "Q0xlYXZlUm9vbU5vdGlmaWNhdGlvbhIOCgZ1c2VySWQYASABKAMiFwoVQzJT",
              "R2FtZVByZXBhcmVSZXF1ZXN0IkwKFlMyQ0dhbWVQcmVwYXJlUmVzcG9uc2US",
              "DwoHc3VjY2VzcxgBIAEoCBIhCghmYWlsQ29kZRgCIAEoDjIPLkdsb2JhbEZh",
              "aWxDb2RlIjUKGlMyQ0dhbWVQcmVwYXJlTm90aWZpY2F0aW9uEhcKBHJvb20Y",
              "ASABKAsyCS5Sb29tRGF0YSIVChNDMlNHYW1lU3RhcnRSZXF1ZXN0IkoKFFMy",
              "Q0dhbWVTdGFydFJlc3BvbnNlEg8KB3N1Y2Nlc3MYASABKAgSIQoIZmFpbENv",
              "ZGUYAiABKA4yDy5HbG9iYWxGYWlsQ29kZSKLAQoYUzJDR2FtZVN0YXJ0Tm90",
              "aWZpY2F0aW9uEiEKCWdhbWVTdGF0ZRgBIAEoCzIOLkdhbWVTdGF0ZURhdGES",
              "GAoFdXNlcnMYAiADKAsyCS5Vc2VyRGF0YRIyChJjaGFyYWN0ZXJQb3NpdGlv",
              "bnMYAyADKAsyFi5DaGFyYWN0ZXJQb3NpdGlvbkRhdGEiMAoYQzJTUG9zaXRp",
              "b25VcGRhdGVSZXF1ZXN0EgkKAXgYASABKAESCQoBeRgCIAEoASJPChlTMkNQ",
              "b3NpdGlvblVwZGF0ZVJlc3BvbnNlEg8KB3N1Y2Nlc3MYASABKAgSIQoIZmFp",
              "bENvZGUYAiABKA4yDy5HbG9iYWxGYWlsQ29kZSJTCh1TMkNQb3NpdGlvblVw",
              "ZGF0ZU5vdGlmaWNhdGlvbhIyChJjaGFyYWN0ZXJQb3NpdGlvbnMYASADKAsy",
              "Fi5DaGFyYWN0ZXJQb3NpdGlvbkRhdGEiRgoRQzJTVXNlQ2FyZFJlcXVlc3QS",
              "GwoIY2FyZFR5cGUYASABKA4yCS5DYXJkVHlwZRIUCgx0YXJnZXRVc2VySWQY",
              "AiABKAMiSAoSUzJDVXNlQ2FyZFJlc3BvbnNlEg8KB3N1Y2Nlc3MYASABKAgS",
              "IQoIZmFpbENvZGUYAiABKA4yDy5HbG9iYWxGYWlsQ29kZSJbChZTMkNVc2VD",
              "YXJkTm90aWZpY2F0aW9uEhsKCGNhcmRUeXBlGAEgASgOMgkuQ2FyZFR5cGUS",
              "DgoGdXNlcklkGAIgASgDEhQKDHRhcmdldFVzZXJJZBgDIAEoAyJHChhTMkNF",
              "cXVpcENhcmROb3RpZmljYXRpb24SGwoIY2FyZFR5cGUYASABKA4yCS5DYXJk",
              "VHlwZRIOCgZ1c2VySWQYAiABKAMiWQoZUzJDQ2FyZEVmZmVjdE5vdGlmaWNh",
              "dGlvbhIbCghjYXJkVHlwZRgBIAEoDjIJLkNhcmRUeXBlEg4KBnVzZXJJZBgC",
              "IAEoAxIPCgdzdWNjZXNzGAMgASgIIkwKGVMyQ0ZsZWFNYXJrZXROb3RpZmlj",
              "YXRpb24SHAoJY2FyZFR5cGVzGAEgAygOMgkuQ2FyZFR5cGUSEQoJcGlja0lu",
              "ZGV4GAIgAygFIhoKGEMyU0ZsZWFNYXJrZXRQaWNrUmVxdWVzdCIxChxDMlNG",
              "bGVhTWFya2V0Q2FyZFBpY2tSZXF1ZXN0EhEKCXBpY2tJbmRleBgBIAEoBSJD",
              "ChlTMkNGbGVhTWFya2V0UGlja1Jlc3BvbnNlEiYKE2ZsZWFNYXJrZXRDYXJk",
              "VHlwZXMYASADKA4yCS5DYXJkVHlwZSJNCh1TMkNGbGVhTWFya2V0Q2FyZFBp",
              "Y2tSZXNwb25zZRIOCgZ1c2VySWQYASABKAMSHAoJaGFuZENhcmRzGAIgAygL",
              "MgkuQ2FyZERhdGEiNAoZUzJDVXNlclVwZGF0ZU5vdGlmaWNhdGlvbhIXCgR1",
              "c2VyGAEgAygLMgkuVXNlckRhdGEihAEKGlMyQ1BoYXNlVXBkYXRlTm90aWZp",
              "Y2F0aW9uEh0KCXBoYXNlVHlwZRgBIAEoDjIKLlBoYXNlVHlwZRITCgtuZXh0",
              "UGhhc2VBdBgCIAEoAxIyChJjaGFyYWN0ZXJQb3NpdGlvbnMYAyADKAsyFi5D",
              "aGFyYWN0ZXJQb3NpdGlvbkRhdGEiOQoSQzJTUmVhY3Rpb25SZXF1ZXN0EiMK",
              "DHJlYWN0aW9uVHlwZRgBIAEoDjINLlJlYWN0aW9uVHlwZSJJChNTMkNSZWFj",
              "dGlvblJlc3BvbnNlEg8KB3N1Y2Nlc3MYASABKAgSIQoIZmFpbENvZGUYAiAB",
              "KA4yDy5HbG9iYWxGYWlsQ29kZSI4ChVDMlNEZXN0cm95Q2FyZFJlcXVlc3QS",
              "HwoMZGVzdHJveUNhcmRzGAEgAygLMgkuQ2FyZERhdGEiNgoWUzJDRGVzdHJv",
              "eUNhcmRSZXNwb25zZRIcCgloYW5kQ2FyZHMYASADKAsyCS5DYXJkRGF0YSJE",
              "ChZTMkNHYW1lRW5kTm90aWZpY2F0aW9uEg8KB3dpbm5lcnMYASADKAMSGQoH",
              "d2luVHlwZRgCIAEoDjIILldpblR5cGUiXgoUQzJTQ2FyZFNlbGVjdFJlcXVl",
              "c3QSIwoKc2VsZWN0VHlwZRgBIAEoDjIPLlNlbGVjdENhcmRUeXBlEiEKDnNl",
              "bGVjdENhcmRUeXBlGAIgASgOMgkuQ2FyZFR5cGUiSwoVUzJDQ2FyZFNlbGVj",
              "dFJlc3BvbnNlEg8KB3N1Y2Nlc3MYASABKAgSIQoIZmFpbENvZGUYAiABKA4y",
              "Dy5HbG9iYWxGYWlsQ29kZSJPChRDMlNQYXNzRGVidWZmUmVxdWVzdBIUCgx0",
              "YXJnZXRVc2VySWQYASABKAMSIQoOZGVidWZmQ2FyZFR5cGUYAiABKA4yCS5D",
              "YXJkVHlwZSJLChVTMkNQYXNzRGVidWZmUmVzcG9uc2USDwoHc3VjY2VzcxgB",
              "IAEoCBIhCghmYWlsQ29kZRgCIAEoDjIPLkdsb2JhbEZhaWxDb2RlIk8KFlMy",
              "Q1dhcm5pbmdOb3RpZmljYXRpb24SIQoLd2FybmluZ1R5cGUYASABKA4yDC5X",
              "YXJuaW5nVHlwZRISCgpleHBlY3RlZEF0GAIgASgDIlEKGFMyQ0FuaW1hdGlv",
              "bk5vdGlmaWNhdGlvbhIOCgZ1c2VySWQYASABKAMSJQoNYW5pbWF0aW9uVHlw",
              "ZRgCIAEoDjIOLkFuaW1hdGlvblR5cGUiNwocQzJTTW9uc3RlckRlYXRoUmV3",
              "YXJkUmVxdWVzdBIXCgR1c2VyGAEgASgLMgkuVXNlckRhdGEiUwodUzJDTW9u",
              "c3RlckRlYXRoUmV3YXJkUmVzcG9uc2USDwoHc3VjY2VzcxgBIAEoCBIhCghm",
              "YWlsQ29kZRgCIAEoDjIPLkdsb2JhbEZhaWxDb2RlItkVCgpHYW1lUGFja2V0",
              "Ei4KD3JlZ2lzdGVyUmVxdWVzdBgBIAEoCzITLkMyU1JlZ2lzdGVyUmVxdWVz",
              "dEgAEjAKEHJlZ2lzdGVyUmVzcG9uc2UYAiABKAsyFC5TMkNSZWdpc3RlclJl",
              "c3BvbnNlSAASKAoMbG9naW5SZXF1ZXN0GAMgASgLMhAuQzJTTG9naW5SZXF1",
              "ZXN0SAASKgoNbG9naW5SZXNwb25zZRgEIAEoCzIRLlMyQ0xvZ2luUmVzcG9u",
              "c2VIABIyChFjcmVhdGVSb29tUmVxdWVzdBgFIAEoCzIVLkMyU0NyZWF0ZVJv",
              "b21SZXF1ZXN0SAASNAoSY3JlYXRlUm9vbVJlc3BvbnNlGAYgASgLMhYuUzJD",
              "Q3JlYXRlUm9vbVJlc3BvbnNlSAASNAoSZ2V0Um9vbUxpc3RSZXF1ZXN0GAcg",
              "ASgLMhYuQzJTR2V0Um9vbUxpc3RSZXF1ZXN0SAASNgoTZ2V0Um9vbUxpc3RS",
              "ZXNwb25zZRgIIAEoCzIXLlMyQ0dldFJvb21MaXN0UmVzcG9uc2VIABIuCg9q",
              "b2luUm9vbVJlcXVlc3QYCSABKAsyEy5DMlNKb2luUm9vbVJlcXVlc3RIABIw",
              "ChBqb2luUm9vbVJlc3BvbnNlGAogASgLMhQuUzJDSm9pblJvb21SZXNwb25z",
              "ZUgAEjoKFWpvaW5SYW5kb21Sb29tUmVxdWVzdBgLIAEoCzIZLkMyU0pvaW5S",
              "YW5kb21Sb29tUmVxdWVzdEgAEjwKFmpvaW5SYW5kb21Sb29tUmVzcG9uc2UY",
              "DCABKAsyGi5TMkNKb2luUmFuZG9tUm9vbVJlc3BvbnNlSAASOAoUam9pblJv",
              "b21Ob3RpZmljYXRpb24YDSABKAsyGC5TMkNKb2luUm9vbU5vdGlmaWNhdGlv",
              "bkgAEjAKEGxlYXZlUm9vbVJlcXVlc3QYDiABKAsyFC5DMlNMZWF2ZVJvb21S",
              "ZXF1ZXN0SAASMgoRbGVhdmVSb29tUmVzcG9uc2UYDyABKAsyFS5TMkNMZWF2",
              "ZVJvb21SZXNwb25zZUgAEjoKFWxlYXZlUm9vbU5vdGlmaWNhdGlvbhgQIAEo",
              "CzIZLlMyQ0xlYXZlUm9vbU5vdGlmaWNhdGlvbkgAEjQKEmdhbWVQcmVwYXJl",
              "UmVxdWVzdBgRIAEoCzIWLkMyU0dhbWVQcmVwYXJlUmVxdWVzdEgAEjYKE2dh",
              "bWVQcmVwYXJlUmVzcG9uc2UYEiABKAsyFy5TMkNHYW1lUHJlcGFyZVJlc3Bv",
              "bnNlSAASPgoXZ2FtZVByZXBhcmVOb3RpZmljYXRpb24YEyABKAsyGy5TMkNH",
              "YW1lUHJlcGFyZU5vdGlmaWNhdGlvbkgAEjAKEGdhbWVTdGFydFJlcXVlc3QY",
              "FCABKAsyFC5DMlNHYW1lU3RhcnRSZXF1ZXN0SAASMgoRZ2FtZVN0YXJ0UmVz",
              "cG9uc2UYFSABKAsyFS5TMkNHYW1lU3RhcnRSZXNwb25zZUgAEjoKFWdhbWVT",
              "dGFydE5vdGlmaWNhdGlvbhgWIAEoCzIZLlMyQ0dhbWVTdGFydE5vdGlmaWNh",
              "dGlvbkgAEjoKFXBvc2l0aW9uVXBkYXRlUmVxdWVzdBgXIAEoCzIZLkMyU1Bv",
              "c2l0aW9uVXBkYXRlUmVxdWVzdEgAEkQKGnBvc2l0aW9uVXBkYXRlTm90aWZp",
              "Y2F0aW9uGBggASgLMh4uUzJDUG9zaXRpb25VcGRhdGVOb3RpZmljYXRpb25I",
              "ABIsCg51c2VDYXJkUmVxdWVzdBgZIAEoCzISLkMyU1VzZUNhcmRSZXF1ZXN0",
              "SAASLgoPdXNlQ2FyZFJlc3BvbnNlGBogASgLMhMuUzJDVXNlQ2FyZFJlc3Bv",
              "bnNlSAASNgoTdXNlQ2FyZE5vdGlmaWNhdGlvbhgbIAEoCzIXLlMyQ1VzZUNh",
              "cmROb3RpZmljYXRpb25IABI6ChVlcXVpcENhcmROb3RpZmljYXRpb24YHCAB",
              "KAsyGS5TMkNFcXVpcENhcmROb3RpZmljYXRpb25IABI8ChZjYXJkRWZmZWN0",
              "Tm90aWZpY2F0aW9uGB0gASgLMhouUzJDQ2FyZEVmZmVjdE5vdGlmaWNhdGlv",
              "bkgAEjwKFmZsZWFNYXJrZXROb3RpZmljYXRpb24YHiABKAsyGi5TMkNGbGVh",
              "TWFya2V0Tm90aWZpY2F0aW9uSAASOgoVZmxlYU1hcmtldFBpY2tSZXF1ZXN0",
              "GB8gASgLMhkuQzJTRmxlYU1hcmtldFBpY2tSZXF1ZXN0SAASPAoWZmxlYU1h",
              "cmtldFBpY2tSZXNwb25zZRggIAEoCzIaLlMyQ0ZsZWFNYXJrZXRQaWNrUmVz",
              "cG9uc2VIABJBChhmbGVNYXJrZXRDYXJkUGlja1JlcXVlc3QYISABKAsyHS5D",
              "MlNGbGVhTWFya2V0Q2FyZFBpY2tSZXF1ZXN0SAASQwoZZmxlTWFya2V0Q2Fy",
              "ZFBpY2tSZXNwb25zZRgiIAEoCzIeLlMyQ0ZsZWFNYXJrZXRDYXJkUGlja1Jl",
              "c3BvbnNlSAASPAoWdXNlclVwZGF0ZU5vdGlmaWNhdGlvbhgjIAEoCzIaLlMy",
              "Q1VzZXJVcGRhdGVOb3RpZmljYXRpb25IABI+ChdwaGFzZVVwZGF0ZU5vdGlm",
              "aWNhdGlvbhgkIAEoCzIbLlMyQ1BoYXNlVXBkYXRlTm90aWZpY2F0aW9uSAAS",
              "LgoPcmVhY3Rpb25SZXF1ZXN0GCUgASgLMhMuQzJTUmVhY3Rpb25SZXF1ZXN0",
              "SAASMAoQcmVhY3Rpb25SZXNwb25zZRgmIAEoCzIULlMyQ1JlYWN0aW9uUmVz",
              "cG9uc2VIABI0ChJkZXN0cm95Q2FyZFJlcXVlc3QYJyABKAsyFi5DMlNEZXN0",
              "cm95Q2FyZFJlcXVlc3RIABI2ChNkZXN0cm95Q2FyZFJlc3BvbnNlGCggASgL",
              "MhcuUzJDRGVzdHJveUNhcmRSZXNwb25zZUgAEjYKE2dhbWVFbmROb3RpZmlj",
              "YXRpb24YKSABKAsyFy5TMkNHYW1lRW5kTm90aWZpY2F0aW9uSAASMgoRY2Fy",
              "ZFNlbGVjdFJlcXVlc3QYKiABKAsyFS5DMlNDYXJkU2VsZWN0UmVxdWVzdEgA",
              "EjQKEmNhcmRTZWxlY3RSZXNwb25zZRgrIAEoCzIWLlMyQ0NhcmRTZWxlY3RS",
              "ZXNwb25zZUgAEjIKEXBhc3NEZWJ1ZmZSZXF1ZXN0GCwgASgLMhUuQzJTUGFz",
              "c0RlYnVmZlJlcXVlc3RIABI0ChJwYXNzRGVidWZmUmVzcG9uc2UYLSABKAsy",
              "Fi5TMkNQYXNzRGVidWZmUmVzcG9uc2VIABI2ChN3YXJuaW5nTm90aWZpY2F0",
              "aW9uGC4gASgLMhcuUzJDV2FybmluZ05vdGlmaWNhdGlvbkgAEjoKFWFuaW1h",
              "dGlvbk5vdGlmaWNhdGlvbhgvIAEoCzIZLlMyQ0FuaW1hdGlvbk5vdGlmaWNh",
              "dGlvbkgAEkIKGW1vbnN0ZXJEZWF0aFJld2FyZFJlcXVlc3QYMCABKAsyHS5D",
              "MlNNb25zdGVyRGVhdGhSZXdhcmRSZXF1ZXN0SAASRAoabW9uc3RlckRlYXRo",
              "UmV3YXJkUmVzcG9uc2UYMSABKAsyHi5TMkNNb25zdGVyRGVhdGhSZXdhcmRS",
              "ZXNwb25zZUgAQgkKB3BheWxvYWQqjwMKDkdsb2JhbEZhaWxDb2RlEhEKDU5P",
              "TkVfRkFJTENPREUQABIRCg1VTktOT1dOX0VSUk9SEAESEwoPSU5WQUxJRF9S",
              "RVFVRVNUEAISGQoVQVVUSEVOVElDQVRJT05fRkFJTEVEEAMSFgoSQ1JFQVRF",
              "X1JPT01fRkFJTEVEEAQSFAoQSk9JTl9ST09NX0ZBSUxFRBAFEhUKEUxFQVZF",
              "X1JPT01fRkFJTEVEEAYSEwoPUkVHSVNURVJfRkFJTEVEEAcSEgoOUk9PTV9O",
              "T1RfRk9VTkQQCBIXChNDSEFSQUNURVJfTk9UX0ZPVU5EEAkSGQoVQ0hBUkFD",
              "VEVSX1NUQVRFX0VSUk9SEAoSFQoRQ0hBUkFDVEVSX05PX0NBUkQQCxIWChJJ",
              "TlZBTElEX1JPT01fU1RBVEUQDBISCg5OT1RfUk9PTV9PV05FUhANEhYKEkFM",
              "UkVBRFlfVVNFRF9CQkFORxAOEhEKDUlOVkFMSURfUEhBU0UQDxIXChNDSEFS",
              "QUNURVJfQ09OVEFJTkVEEBAqLgoLV2FybmluZ1R5cGUSDgoKTk9fV0FSTklO",
              "RxAAEg8KC0JPTUJfV0FOSU5HEAEqSwoHV2luVHlwZRIcChhUQVJHRVRfQU5E",
              "X0JPRFlHVUFSRF9XSU4QABIOCgpISVRNQU5fV0lOEAESEgoOUFNZQ0hPUEFU",
              "SF9XSU4QAiqTAQoNQ2hhcmFjdGVyVHlwZRISCg5OT05FX0NIQVJBQ1RFUhAA",
              "EgcKA1JFRBABEgkKBVNIQVJLEAMSCgoGTUFMQU5HEAUSCgoGRlJPR0dZEAcS",
              "CAoEUElOSxAIEhAKDFNXSU1fR0xBU1NFUxAJEggKBE1BU0sQChIMCghESU5P",
              "U0FVUhAMEg4KClBJTktfU0xJTUUQDSrqAgoSQ2hhcmFjdGVyU3RhdGVUeXBl",
              "EhgKFE5PTkVfQ0hBUkFDVEVSX1NUQVRFEAASEQoNQkJBTkdfU0hPT1RFUhAB",
              "EhAKDEJCQU5HX1RBUkdFVBACEhUKEURFQVRIX01BVENIX1NUQVRFEAMSGgoW",
              "REVBVEhfTUFUQ0hfVFVSTl9TVEFURRAEEhQKEEZMRUFfTUFSS0VUX1RVUk4Q",
              "BRIUChBGTEVBX01BUktFVF9XQUlUEAYSFQoRR1VFUlJJTExBX1NIT09URVIQ",
              "BxIUChBHVUVSUklMTEFfVEFSR0VUEAgSFQoRQklHX0JCQU5HX1NIT09URVIQ",
              "CRIUChBCSUdfQkJBTkdfVEFSR0VUEAoSDQoJQUJTT1JCSU5HEAsSEQoNQUJT",
              "T1JCX1RBUkdFVBAMEhEKDUhBTExVQ0lOQVRJTkcQDRIYChRIQUxMVUNJTkFU",
              "SU9OX1RBUkdFVBAOEg0KCUNPTlRBSU5FRBAPKuwECghDYXJkVHlwZRIICgRO",
              "T05FEAASCQoFQkJBTkcQARINCglCSUdfQkJBTkcQAhIKCgZTSElFTEQQAxIL",
              "CgdWQUNDSU5FEAQSDAoIQ0FMTF8xMTkQBRIPCgtERUFUSF9NQVRDSBAGEg0K",
              "CUdVRVJSSUxMQRAHEgoKBkFCU09SQhAIEhEKDUhBTExVQ0lOQVRJT04QCRIP",
              "CgtGTEVBX01BUktFVBAKEhMKD01BVFVSRURfU0FWSU5HUxALEg8KC1dJTl9M",
              "T1RURVJZEAwSDgoKU05JUEVSX0dVThANEgwKCEhBTkRfR1VOEA4SEAoMREVT",
              "RVJUX0VBR0xFEA8SDgoKQVVUT19SSUZMRRAQEhEKDUxBU0VSX1BPSU5URVIQ",
              "ERIJCgVSQURBUhASEg8KC0FVVE9fU0hJRUxEEBMSEAoMU1RFQUxUSF9TVUlU",
              "EBQSFAoQQ09OVEFJTk1FTlRfVU5JVBAVEhQKEFNBVEVMTElURV9UQVJHRVQQ",
              "FhIICgRCT01CEBcSGAoUTUFHSUNJQU5fQkFTSUNfU0tJTEwQZRIXChNXQVJS",
              "SU9SX0JBU0lDX1NLSUxMEGYSFgoSQVJDSEVSX0JBU0lDX1NLSUxMEGcSFwoT",
              "UEFMQURJTl9CQVNJQ19TS0lMTBBoEhsKF01BR0lDSUFOX0VYVEVOREVEX1NL",
              "SUxMEGkSGgoWV0FSUklPUl9FWFRFTkRFRF9TS0lMTBBqEhkKFUFSQ0hFUl9F",
              "WFRFTkRFRF9TS0lMTBBrEhoKFlBBTEFESU5fRVhURU5ERURfU0tJTEwQbBIU",
              "Cg9CQVNJQ19IUF9QT1RJT04QyQEqUAoIUm9sZVR5cGUSDQoJTk9ORV9ST0xF",
              "EAASCgoGVEFSR0VUEAESDQoJQk9EWUdVQVJEEAISCgoGSElUTUFOEAMSDgoK",
              "UFNZQ0hPUEFUSBAEKjIKDVJvb21TdGF0ZVR5cGUSCAoEV0FJVBAAEgsKB1BS",
              "RVBBUkUQARIKCgZJTkdBTUUQAio6CglQaGFzZVR5cGUSDgoKTk9ORV9QSEFT",
              "RRAAEgcKA0RBWRABEgsKB0VWRU5JTkcQAhIHCgNFTkQQAyozCgxSZWFjdGlv",
              "blR5cGUSEQoNTk9ORV9SRUFDVElPThAAEhAKDE5PVF9VU0VfQ0FSRBABKj0K",
              "DlNlbGVjdENhcmRUeXBlEggKBEhBTkQQABIJCgVFUVVJUBABEgoKBldFQVBP",
              "ThACEgoKBkRFQlVGRhADKmsKDUFuaW1hdGlvblR5cGUSEAoMTk9fQU5JTUFU",
              "SU9OEAASHgoaU0FURUxMSVRFX1RBUkdFVF9BTklNQVRJT04QARISCg5CT01C",
              "X0FOSU1BVElPThACEhQKEFNISUVMRF9BTklNQVRJT04QA2IGcHJvdG8z"));
        descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
            new pbr::FileDescriptor[] { },
            new pbr::GeneratedClrTypeInfo(new[] { typeof(global::GlobalFailCode), typeof(global::WarningType), typeof(global::WinType), typeof(global::CharacterType), typeof(global::CharacterStateType), typeof(global::CardType), typeof(global::RoleType), typeof(global::RoomStateType), typeof(global::PhaseType), typeof(global::ReactionType), typeof(global::SelectCardType), typeof(global::AnimationType), }, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::RoomData), global::RoomData.Parser, new[]{ "Id", "OwnerId", "Name", "MaxUserNum", "State", "Users" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UserData), global::UserData.Parser, new[]{ "Id", "Nickname", "Character" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CharacterData), global::CharacterData.Parser, new[]{ "CharacterType", "RoleType", "Level", "Exp", "Gold", "MaxHp", "Hp", "Mp", "Attack", "Armor", "Weapon", "Potion", "StateInfo", "Equips", "Debuffs", "HandCards", "HandCardsCount", "BbangCount" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CharacterPositionData), global::CharacterPositionData.Parser, new[]{ "Id", "X", "Y" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CardData), global::CardData.Parser, new[]{ "Type", "Count" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GameStateData), global::GameStateData.Parser, new[]{ "PhaseType", "NextPhaseAt" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CharacterStateInfoData), global::CharacterStateInfoData.Parser, new[]{ "State", "NextState", "NextStateAt", "StateTargetUserId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SRegisterRequest), global::C2SRegisterRequest.Parser, new[]{ "Email", "Nickname", "Password" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CRegisterResponse), global::S2CRegisterResponse.Parser, new[]{ "Success", "Message", "FailCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SLoginRequest), global::C2SLoginRequest.Parser, new[]{ "Email", "Password" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CLoginResponse), global::S2CLoginResponse.Parser, new[]{ "Success", "Message", "Token", "MyInfo", "FailCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SCreateRoomRequest), global::C2SCreateRoomRequest.Parser, new[]{ "Name", "MaxUserNum" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CCreateRoomResponse), global::S2CCreateRoomResponse.Parser, new[]{ "Success", "Room", "FailCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SGetRoomListRequest), global::C2SGetRoomListRequest.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CGetRoomListResponse), global::S2CGetRoomListResponse.Parser, new[]{ "Rooms" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SJoinRoomRequest), global::C2SJoinRoomRequest.Parser, new[]{ "RoomId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CJoinRoomResponse), global::S2CJoinRoomResponse.Parser, new[]{ "Success", "Room", "FailCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SJoinRandomRoomRequest), global::C2SJoinRandomRoomRequest.Parser, new[]{ "RoomId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CJoinRandomRoomResponse), global::S2CJoinRandomRoomResponse.Parser, new[]{ "Success", "Room", "FailCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CJoinRoomNotification), global::S2CJoinRoomNotification.Parser, new[]{ "JoinUser" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SLeaveRoomRequest), global::C2SLeaveRoomRequest.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CLeaveRoomResponse), global::S2CLeaveRoomResponse.Parser, new[]{ "Success", "FailCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CLeaveRoomNotification), global::S2CLeaveRoomNotification.Parser, new[]{ "UserId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SGamePrepareRequest), global::C2SGamePrepareRequest.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CGamePrepareResponse), global::S2CGamePrepareResponse.Parser, new[]{ "Success", "FailCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CGamePrepareNotification), global::S2CGamePrepareNotification.Parser, new[]{ "Room" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SGameStartRequest), global::C2SGameStartRequest.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CGameStartResponse), global::S2CGameStartResponse.Parser, new[]{ "Success", "FailCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CGameStartNotification), global::S2CGameStartNotification.Parser, new[]{ "GameState", "Users", "CharacterPositions" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SPositionUpdateRequest), global::C2SPositionUpdateRequest.Parser, new[]{ "X", "Y" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CPositionUpdateResponse), global::S2CPositionUpdateResponse.Parser, new[]{ "Success", "FailCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CPositionUpdateNotification), global::S2CPositionUpdateNotification.Parser, new[]{ "CharacterPositions" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SUseCardRequest), global::C2SUseCardRequest.Parser, new[]{ "CardType", "TargetUserId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CUseCardResponse), global::S2CUseCardResponse.Parser, new[]{ "Success", "FailCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CUseCardNotification), global::S2CUseCardNotification.Parser, new[]{ "CardType", "UserId", "TargetUserId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CEquipCardNotification), global::S2CEquipCardNotification.Parser, new[]{ "CardType", "UserId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CCardEffectNotification), global::S2CCardEffectNotification.Parser, new[]{ "CardType", "UserId", "Success" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CFleaMarketNotification), global::S2CFleaMarketNotification.Parser, new[]{ "CardTypes", "PickIndex" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SFleaMarketPickRequest), global::C2SFleaMarketPickRequest.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SFleaMarketCardPickRequest), global::C2SFleaMarketCardPickRequest.Parser, new[]{ "PickIndex" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CFleaMarketPickResponse), global::S2CFleaMarketPickResponse.Parser, new[]{ "FleaMarketCardTypes" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CFleaMarketCardPickResponse), global::S2CFleaMarketCardPickResponse.Parser, new[]{ "UserId", "HandCards" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CUserUpdateNotification), global::S2CUserUpdateNotification.Parser, new[]{ "User" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CPhaseUpdateNotification), global::S2CPhaseUpdateNotification.Parser, new[]{ "PhaseType", "NextPhaseAt", "CharacterPositions" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SReactionRequest), global::C2SReactionRequest.Parser, new[]{ "ReactionType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CReactionResponse), global::S2CReactionResponse.Parser, new[]{ "Success", "FailCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SDestroyCardRequest), global::C2SDestroyCardRequest.Parser, new[]{ "DestroyCards" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CDestroyCardResponse), global::S2CDestroyCardResponse.Parser, new[]{ "HandCards" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CGameEndNotification), global::S2CGameEndNotification.Parser, new[]{ "Winners", "WinType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SCardSelectRequest), global::C2SCardSelectRequest.Parser, new[]{ "SelectType", "SelectCardType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CCardSelectResponse), global::S2CCardSelectResponse.Parser, new[]{ "Success", "FailCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SPassDebuffRequest), global::C2SPassDebuffRequest.Parser, new[]{ "TargetUserId", "DebuffCardType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CPassDebuffResponse), global::S2CPassDebuffResponse.Parser, new[]{ "Success", "FailCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CWarningNotification), global::S2CWarningNotification.Parser, new[]{ "WarningType", "ExpectedAt" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CAnimationNotification), global::S2CAnimationNotification.Parser, new[]{ "UserId", "AnimationType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SMonsterDeathRewardRequest), global::C2SMonsterDeathRewardRequest.Parser, new[]{ "User" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CMonsterDeathRewardResponse), global::S2CMonsterDeathRewardResponse.Parser, new[]{ "Success", "FailCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GamePacket), global::GamePacket.Parser, new[]{ "RegisterRequest", "RegisterResponse", "LoginRequest", "LoginResponse", "CreateRoomRequest", "CreateRoomResponse", "GetRoomListRequest", "GetRoomListResponse", "JoinRoomRequest", "JoinRoomResponse", "JoinRandomRoomRequest", "JoinRandomRoomResponse", "JoinRoomNotification", "LeaveRoomRequest", "LeaveRoomResponse", "LeaveRoomNotification", "GamePrepareRequest", "GamePrepareResponse", "GamePrepareNotification", "GameStartRequest", "GameStartResponse", "GameStartNotification", "PositionUpdateRequest", "PositionUpdateNotification", "UseCardRequest", "UseCardResponse", "UseCardNotification", "EquipCardNotification", "CardEffectNotification", "FleaMarketNotification", "FleaMarketPickRequest", "FleaMarketPickResponse", "FleMarketCardPickRequest", "FleMarketCardPickResponse", "UserUpdateNotification", "PhaseUpdateNotification", "ReactionRequest", "ReactionResponse", "DestroyCardRequest", "DestroyCardResponse", "GameEndNotification", "CardSelectRequest", "CardSelectResponse", "PassDebuffRequest", "PassDebuffResponse", "WarningNotification", "AnimationNotification", "MonsterDeathRewardRequest", "MonsterDeathRewardResponse" }, new[]{ "Payload" }, null, null, null)
            }));
    }
    #endregion

}
#region Enums
/// <summary>
/// 
///실패 코드
/// </summary>
public enum GlobalFailCode
{
    [pbr::OriginalName("NONE_FAILCODE")] NoneFailcode = 0,
    [pbr::OriginalName("UNKNOWN_ERROR")] UnknownError = 1,
    [pbr::OriginalName("INVALID_REQUEST")] InvalidRequest = 2,
    [pbr::OriginalName("AUTHENTICATION_FAILED")] AuthenticationFailed = 3,
    [pbr::OriginalName("CREATE_ROOM_FAILED")] CreateRoomFailed = 4,
    [pbr::OriginalName("JOIN_ROOM_FAILED")] JoinRoomFailed = 5,
    [pbr::OriginalName("LEAVE_ROOM_FAILED")] LeaveRoomFailed = 6,
    [pbr::OriginalName("REGISTER_FAILED")] RegisterFailed = 7,
    [pbr::OriginalName("ROOM_NOT_FOUND")] RoomNotFound = 8,
    [pbr::OriginalName("CHARACTER_NOT_FOUND")] CharacterNotFound = 9,
    [pbr::OriginalName("CHARACTER_STATE_ERROR")] CharacterStateError = 10,
    [pbr::OriginalName("CHARACTER_NO_CARD")] CharacterNoCard = 11,
    [pbr::OriginalName("INVALID_ROOM_STATE")] InvalidRoomState = 12,
    [pbr::OriginalName("NOT_ROOM_OWNER")] NotRoomOwner = 13,
    [pbr::OriginalName("ALREADY_USED_BBANG")] AlreadyUsedBbang = 14,
    [pbr::OriginalName("INVALID_PHASE")] InvalidPhase = 15,
    [pbr::OriginalName("CHARACTER_CONTAINED")] CharacterContained = 16,
}

public enum WarningType
{
    [pbr::OriginalName("NO_WARNING")] NoWarning = 0,
    [pbr::OriginalName("BOMB_WANING")] BombWaning = 1,
}

public enum WinType
{
    [pbr::OriginalName("TARGET_AND_BODYGUARD_WIN")] TargetAndBodyguardWin = 0,
    [pbr::OriginalName("HITMAN_WIN")] HitmanWin = 1,
    [pbr::OriginalName("PSYCHOPATH_WIN")] PsychopathWin = 2,
}

public enum CharacterType
{
    [pbr::OriginalName("NONE_CHARACTER")] NoneCharacter = 0,
    /// <summary>
    /// 빨강이
    /// </summary>
    [pbr::OriginalName("RED")] Red = 1,
    /// <summary>
    /// 상어군
    /// </summary>
    [pbr::OriginalName("SHARK")] Shark = 3,
    /// <summary>
    /// 말랑이
    /// </summary>
    [pbr::OriginalName("MALANG")] Malang = 5,
    /// <summary>
    /// 개굴군
    /// </summary>
    [pbr::OriginalName("FROGGY")] Froggy = 7,
    /// <summary>
    /// 핑크군
    /// </summary>
    [pbr::OriginalName("PINK")] Pink = 8,
    /// <summary>
    /// 물안경군
    /// </summary>
    [pbr::OriginalName("SWIM_GLASSES")] SwimGlasses = 9,
    /// <summary>
    /// 가면군
    /// </summary>
    [pbr::OriginalName("MASK")] Mask = 10,
    /// <summary>
    /// 공룡이
    /// </summary>
    [pbr::OriginalName("DINOSAUR")] Dinosaur = 12,
    /// <summary>
    /// 핑크슬라임
    /// </summary>
    [pbr::OriginalName("PINK_SLIME")] PinkSlime = 13,
}

public enum CharacterStateType
{
    [pbr::OriginalName("NONE_CHARACTER_STATE")] NoneCharacterState = 0,
    /// <summary>
    /// 빵야 시전자
    /// </summary>
    [pbr::OriginalName("BBANG_SHOOTER")] BbangShooter = 1,
    /// <summary>
    /// 빵야 대상 (쉴드 사용가능 상태)
    /// </summary>
    [pbr::OriginalName("BBANG_TARGET")] BbangTarget = 2,
    /// <summary>
    /// 현피 중 자신의 턴이 아닐 때
    /// </summary>
    [pbr::OriginalName("DEATH_MATCH_STATE")] DeathMatchState = 3,
    /// <summary>
    /// 현피 중 자신의 턴
    /// </summary>
    [pbr::OriginalName("DEATH_MATCH_TURN_STATE")] DeathMatchTurnState = 4,
    /// <summary>
    /// 플리마켓 자신의 턴
    /// </summary>
    [pbr::OriginalName("FLEA_MARKET_TURN")] FleaMarketTurn = 5,
    /// <summary>
    /// 플리마켓 턴 대기 상태
    /// </summary>
    [pbr::OriginalName("FLEA_MARKET_WAIT")] FleaMarketWait = 6,
    /// <summary>
    /// 게릴라 시전자
    /// </summary>
    [pbr::OriginalName("GUERRILLA_SHOOTER")] GuerrillaShooter = 7,
    /// <summary>
    /// 게릴라 대상
    /// </summary>
    [pbr::OriginalName("GUERRILLA_TARGET")] GuerrillaTarget = 8,
    /// <summary>
    /// 난사 시전자
    /// </summary>
    [pbr::OriginalName("BIG_BBANG_SHOOTER")] BigBbangShooter = 9,
    /// <summary>
    /// 난사 대상
    /// </summary>
    [pbr::OriginalName("BIG_BBANG_TARGET")] BigBbangTarget = 10,
    /// <summary>
    /// 흡수 중
    /// </summary>
    [pbr::OriginalName("ABSORBING")] Absorbing = 11,
    /// <summary>
    /// 흡수 대상
    /// </summary>
    [pbr::OriginalName("ABSORB_TARGET")] AbsorbTarget = 12,
    /// <summary>
    /// 신기루 중
    /// </summary>
    [pbr::OriginalName("HALLUCINATING")] Hallucinating = 13,
    /// <summary>
    /// 신기루 대상
    /// </summary>
    [pbr::OriginalName("HALLUCINATION_TARGET")] HallucinationTarget = 14,
    /// <summary>
    /// 감금 중
    /// </summary>
    [pbr::OriginalName("CONTAINED")] Contained = 15,
}

public enum CardType
{
    [pbr::OriginalName("NONE")] None = 0,
    /// <summary>
    /// 20장
    /// </summary>
    [pbr::OriginalName("BBANG")] Bbang = 1,
    /// <summary>
    /// 1장
    /// </summary>
    [pbr::OriginalName("BIG_BBANG")] BigBbang = 2,
    /// <summary>
    /// 10장
    /// </summary>
    [pbr::OriginalName("SHIELD")] Shield = 3,
    /// <summary>
    /// 6장
    /// </summary>
    [pbr::OriginalName("VACCINE")] Vaccine = 4,
    /// <summary>
    /// 2장
    /// </summary>
    [pbr::OriginalName("CALL_119")] Call119 = 5,
    /// <summary>
    /// 4장
    /// </summary>
    [pbr::OriginalName("DEATH_MATCH")] DeathMatch = 6,
    /// <summary>
    /// 1장
    /// </summary>
    [pbr::OriginalName("GUERRILLA")] Guerrilla = 7,
    /// <summary>
    /// 4장
    /// </summary>
    [pbr::OriginalName("ABSORB")] Absorb = 8,
    /// <summary>
    /// 4장
    /// </summary>
    [pbr::OriginalName("HALLUCINATION")] Hallucination = 9,
    /// <summary>
    /// 3장
    /// </summary>
    [pbr::OriginalName("FLEA_MARKET")] FleaMarket = 10,
    /// <summary>
    /// 2장
    /// </summary>
    [pbr::OriginalName("MATURED_SAVINGS")] MaturedSavings = 11,
    /// <summary>
    /// 1장
    /// </summary>
    [pbr::OriginalName("WIN_LOTTERY")] WinLottery = 12,
    /// <summary>
    /// 1장
    /// </summary>
    [pbr::OriginalName("SNIPER_GUN")] SniperGun = 13,
    /// <summary>
    /// 2장
    /// </summary>
    [pbr::OriginalName("HAND_GUN")] HandGun = 14,
    /// <summary>
    /// 3장
    /// </summary>
    [pbr::OriginalName("DESERT_EAGLE")] DesertEagle = 15,
    /// <summary>
    /// 2장
    /// </summary>
    [pbr::OriginalName("AUTO_RIFLE")] AutoRifle = 16,
    /// <summary>
    /// 1장
    /// </summary>
    [pbr::OriginalName("LASER_POINTER")] LaserPointer = 17,
    /// <summary>
    /// 1장
    /// </summary>
    [pbr::OriginalName("RADAR")] Radar = 18,
    /// <summary>
    /// 2장
    /// </summary>
    [pbr::OriginalName("AUTO_SHIELD")] AutoShield = 19,
    /// <summary>
    /// 2장
    /// </summary>
    [pbr::OriginalName("STEALTH_SUIT")] StealthSuit = 20,
    /// <summary>
    /// 3장
    /// </summary>
    [pbr::OriginalName("CONTAINMENT_UNIT")] ContainmentUnit = 21,
    /// <summary>
    /// 1장
    /// </summary>
    [pbr::OriginalName("SATELLITE_TARGET")] SatelliteTarget = 22,
    /// <summary>
    /// 1장
    /// </summary>
    [pbr::OriginalName("BOMB")] Bomb = 23,
    [pbr::OriginalName("MAGICIAN_BASIC_SKILL")] MagicianBasicSkill = 101,
    [pbr::OriginalName("WARRIOR_BASIC_SKILL")] WarriorBasicSkill = 102,
    [pbr::OriginalName("ARCHER_BASIC_SKILL")] ArcherBasicSkill = 103,
    [pbr::OriginalName("PALADIN_BASIC_SKILL")] PaladinBasicSkill = 104,
    [pbr::OriginalName("MAGICIAN_EXTENDED_SKILL")] MagicianExtendedSkill = 105,
    [pbr::OriginalName("WARRIOR_EXTENDED_SKILL")] WarriorExtendedSkill = 106,
    [pbr::OriginalName("ARCHER_EXTENDED_SKILL")] ArcherExtendedSkill = 107,
    [pbr::OriginalName("PALADIN_EXTENDED_SKILL")] PaladinExtendedSkill = 108,
    [pbr::OriginalName("BASIC_HP_POTION")] BasicHpPotion = 201,
}

public enum RoleType
{
    [pbr::OriginalName("NONE_ROLE")] NoneRole = 0,
    [pbr::OriginalName("TARGET")] Target = 1,
    [pbr::OriginalName("BODYGUARD")] Bodyguard = 2,
    [pbr::OriginalName("HITMAN")] Hitman = 3,
    [pbr::OriginalName("PSYCHOPATH")] Psychopath = 4,
}

public enum RoomStateType
{
    [pbr::OriginalName("WAIT")] Wait = 0,
    [pbr::OriginalName("PREPARE")] Prepare = 1,
    [pbr::OriginalName("INGAME")] Ingame = 2,
}

public enum PhaseType
{
    [pbr::OriginalName("NONE_PHASE")] NonePhase = 0,
    [pbr::OriginalName("DAY")] Day = 1,
    [pbr::OriginalName("EVENING")] Evening = 2,
    [pbr::OriginalName("END")] End = 3,
}

public enum ReactionType
{
    [pbr::OriginalName("NONE_REACTION")] NoneReaction = 0,
    [pbr::OriginalName("NOT_USE_CARD")] NotUseCard = 1,
}

public enum SelectCardType
{
    [pbr::OriginalName("HAND")] Hand = 0,
    [pbr::OriginalName("EQUIP")] Equip = 1,
    [pbr::OriginalName("WEAPON")] Weapon = 2,
    [pbr::OriginalName("DEBUFF")] Debuff = 3,
}

public enum AnimationType
{
    [pbr::OriginalName("NO_ANIMATION")] NoAnimation = 0,
    [pbr::OriginalName("SATELLITE_TARGET_ANIMATION")] SatelliteTargetAnimation = 1,
    [pbr::OriginalName("BOMB_ANIMATION")] BombAnimation = 2,
    [pbr::OriginalName("SHIELD_ANIMATION")] ShieldAnimation = 3,
}

#endregion

#region Messages
/// <summary>
///
///게임 데이터 명세
/// </summary>
public sealed partial class RoomData : pb::IMessage<RoomData>
{
    private static readonly pb::MessageParser<RoomData> _parser = new pb::MessageParser<RoomData>(() => new RoomData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomData()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomData(RoomData other) : this()
    {
        id_ = other.id_;
        ownerId_ = other.ownerId_;
        name_ = other.name_;
        maxUserNum_ = other.maxUserNum_;
        state_ = other.state_;
        users_ = other.users_.Clone();
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomData Clone()
    {
        return new RoomData(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id
    {
        get { return id_; }
        set
        {
            id_ = value;
        }
    }

    /// <summary>Field number for the "ownerId" field.</summary>
    public const int OwnerIdFieldNumber = 2;
    private long ownerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OwnerId
    {
        get { return ownerId_; }
        set
        {
            ownerId_ = value;
        }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name
    {
        get { return name_; }
        set
        {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "maxUserNum" field.</summary>
    public const int MaxUserNumFieldNumber = 4;
    private int maxUserNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxUserNum
    {
        get { return maxUserNum_; }
        set
        {
            maxUserNum_ = value;
        }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 5;
    private global::RoomStateType state_ = global::RoomStateType.Wait;
    /// <summary>
    /// WAIT 0, PREPARE 1, INAGAME 2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RoomStateType State
    {
        get { return state_; }
        set
        {
            state_ = value;
        }
    }

    /// <summary>Field number for the "users" field.</summary>
    public const int UsersFieldNumber = 6;
    private static readonly pb::FieldCodec<global::UserData> _repeated_users_codec
        = pb::FieldCodec.ForMessage(50, global::UserData.Parser);
    private readonly pbc::RepeatedField<global::UserData> users_ = new pbc::RepeatedField<global::UserData>();
    /// <summary>
    /// 인덱스 기반으로 턴 진행
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::UserData> Users
    {
        get { return users_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as RoomData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomData other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (Id != other.Id) return false;
        if (OwnerId != other.OwnerId) return false;
        if (Name != other.Name) return false;
        if (MaxUserNum != other.MaxUserNum) return false;
        if (State != other.State) return false;
        if (!users_.Equals(other.users_)) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (Id != 0) hash ^= Id.GetHashCode();
        if (OwnerId != 0L) hash ^= OwnerId.GetHashCode();
        if (Name.Length != 0) hash ^= Name.GetHashCode();
        if (MaxUserNum != 0) hash ^= MaxUserNum.GetHashCode();
        if (State != global::RoomStateType.Wait) hash ^= State.GetHashCode();
        hash ^= users_.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (Id != 0)
        {
            output.WriteRawTag(8);
            output.WriteInt32(Id);
        }
        if (OwnerId != 0L)
        {
            output.WriteRawTag(16);
            output.WriteInt64(OwnerId);
        }
        if (Name.Length != 0)
        {
            output.WriteRawTag(26);
            output.WriteString(Name);
        }
        if (MaxUserNum != 0)
        {
            output.WriteRawTag(32);
            output.WriteInt32(MaxUserNum);
        }
        if (State != global::RoomStateType.Wait)
        {
            output.WriteRawTag(40);
            output.WriteEnum((int)State);
        }
        users_.WriteTo(output, _repeated_users_codec);
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (Id != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
        }
        if (OwnerId != 0L)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(OwnerId);
        }
        if (Name.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
        }
        if (MaxUserNum != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxUserNum);
        }
        if (State != global::RoomStateType.Wait)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)State);
        }
        size += users_.CalculateSize(_repeated_users_codec);
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomData other)
    {
        if (other == null)
        {
            return;
        }
        if (other.Id != 0)
        {
            Id = other.Id;
        }
        if (other.OwnerId != 0L)
        {
            OwnerId = other.OwnerId;
        }
        if (other.Name.Length != 0)
        {
            Name = other.Name;
        }
        if (other.MaxUserNum != 0)
        {
            MaxUserNum = other.MaxUserNum;
        }
        if (other.State != global::RoomStateType.Wait)
        {
            State = other.State;
        }
        users_.Add(other.users_);
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        Id = input.ReadInt32();
                        break;
                    }
                case 16:
                    {
                        OwnerId = input.ReadInt64();
                        break;
                    }
                case 26:
                    {
                        Name = input.ReadString();
                        break;
                    }
                case 32:
                    {
                        MaxUserNum = input.ReadInt32();
                        break;
                    }
                case 40:
                    {
                        State = (global::RoomStateType)input.ReadEnum();
                        break;
                    }
                case 50:
                    {
                        users_.AddEntriesFrom(input, _repeated_users_codec);
                        break;
                    }
            }
        }
    }

}

/// <summary>
/// 입장했을때는 랜덤으로 체력만큼 카드 받음.
/// 하루 종료 시 체력만큼의 카드만 남길 수 있음.
/// 이후 낮이 될때마다 카드 두장 받고 시작
/// </summary>
public sealed partial class UserData : pb::IMessage<UserData>
{
    private static readonly pb::MessageParser<UserData> _parser = new pb::MessageParser<UserData>(() => new UserData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserData()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserData(UserData other) : this()
    {
        id_ = other.id_;
        nickname_ = other.nickname_;
        character_ = other.character_ != null ? other.character_.Clone() : null;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserData Clone()
    {
        return new UserData(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id
    {
        get { return id_; }
        set
        {
            id_ = value;
        }
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 2;
    private string nickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname
    {
        get { return nickname_; }
        set
        {
            nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "character" field.</summary>
    public const int CharacterFieldNumber = 3;
    private global::CharacterData character_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CharacterData Character
    {
        get { return character_; }
        set
        {
            character_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as UserData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserData other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (Id != other.Id) return false;
        if (Nickname != other.Nickname) return false;
        if (!object.Equals(Character, other.Character)) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (Id != 0L) hash ^= Id.GetHashCode();
        if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
        if (character_ != null) hash ^= Character.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (Id != 0L)
        {
            output.WriteRawTag(8);
            output.WriteInt64(Id);
        }
        if (Nickname.Length != 0)
        {
            output.WriteRawTag(18);
            output.WriteString(Nickname);
        }
        if (character_ != null)
        {
            output.WriteRawTag(26);
            output.WriteMessage(Character);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (Id != 0L)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
        }
        if (Nickname.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
        }
        if (character_ != null)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Character);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserData other)
    {
        if (other == null)
        {
            return;
        }
        if (other.Id != 0L)
        {
            Id = other.Id;
        }
        if (other.Nickname.Length != 0)
        {
            Nickname = other.Nickname;
        }
        if (other.character_ != null)
        {
            if (character_ == null)
            {
                Character = new global::CharacterData();
            }
            Character.MergeFrom(other.Character);
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        Id = input.ReadInt64();
                        break;
                    }
                case 18:
                    {
                        Nickname = input.ReadString();
                        break;
                    }
                case 26:
                    {
                        if (character_ == null)
                        {
                            Character = new global::CharacterData();
                        }
                        input.ReadMessage(Character);
                        break;
                    }
            }
        }
    }

}

public sealed partial class CharacterData : pb::IMessage<CharacterData>
{
    private static readonly pb::MessageParser<CharacterData> _parser = new pb::MessageParser<CharacterData>(() => new CharacterData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CharacterData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterData()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterData(CharacterData other) : this()
    {
        characterType_ = other.characterType_;
        roleType_ = other.roleType_;
        level_ = other.level_;
        exp_ = other.exp_;
        gold_ = other.gold_;
        maxHp_ = other.maxHp_;
        hp_ = other.hp_;
        mp_ = other.mp_;
        attack_ = other.attack_;
        armor_ = other.armor_;
        weapon_ = other.weapon_;
        potion_ = other.potion_;
        stateInfo_ = other.stateInfo_ != null ? other.stateInfo_.Clone() : null;
        equips_ = other.equips_.Clone();
        debuffs_ = other.debuffs_.Clone();
        handCards_ = other.handCards_.Clone();
        handCardsCount_ = other.handCardsCount_;
        bbangCount_ = other.bbangCount_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterData Clone()
    {
        return new CharacterData(this);
    }

    /// <summary>Field number for the "characterType" field.</summary>
    public const int CharacterTypeFieldNumber = 1;
    private global::CharacterType characterType_ = global::CharacterType.NoneCharacter;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CharacterType CharacterType
    {
        get { return characterType_; }
        set
        {
            characterType_ = value;
        }
    }

    /// <summary>Field number for the "roleType" field.</summary>
    public const int RoleTypeFieldNumber = 2;
    private global::RoleType roleType_ = global::RoleType.NoneRole;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RoleType RoleType
    {
        get { return roleType_; }
        set
        {
            roleType_ = value;
        }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level
    {
        get { return level_; }
        set
        {
            level_ = value;
        }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 4;
    private int exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp
    {
        get { return exp_; }
        set
        {
            exp_ = value;
        }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 5;
    private int gold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gold
    {
        get { return gold_; }
        set
        {
            gold_ = value;
        }
    }

    /// <summary>Field number for the "maxHp" field.</summary>
    public const int MaxHpFieldNumber = 6;
    private int maxHp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxHp
    {
        get { return maxHp_; }
        set
        {
            maxHp_ = value;
        }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 7;
    private int hp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp
    {
        get { return hp_; }
        set
        {
            hp_ = value;
        }
    }

    /// <summary>Field number for the "mp" field.</summary>
    public const int MpFieldNumber = 8;
    private int mp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mp
    {
        get { return mp_; }
        set
        {
            mp_ = value;
        }
    }

    /// <summary>Field number for the "attack" field.</summary>
    public const int AttackFieldNumber = 9;
    private int attack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Attack
    {
        get { return attack_; }
        set
        {
            attack_ = value;
        }
    }

    /// <summary>Field number for the "armor" field.</summary>
    public const int ArmorFieldNumber = 10;
    private int armor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Armor
    {
        get { return armor_; }
        set
        {
            armor_ = value;
        }
    }

    /// <summary>Field number for the "weapon" field.</summary>
    public const int WeaponFieldNumber = 11;
    private int weapon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Weapon
    {
        get { return weapon_; }
        set
        {
            weapon_ = value;
        }
    }

    /// <summary>Field number for the "potion" field.</summary>
    public const int PotionFieldNumber = 12;
    private int potion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Potion
    {
        get { return potion_; }
        set
        {
            potion_ = value;
        }
    }

    /// <summary>Field number for the "stateInfo" field.</summary>
    public const int StateInfoFieldNumber = 13;
    private global::CharacterStateInfoData stateInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CharacterStateInfoData StateInfo
    {
        get { return stateInfo_; }
        set
        {
            stateInfo_ = value;
        }
    }

    /// <summary>Field number for the "equips" field.</summary>
    public const int EquipsFieldNumber = 14;
    private static readonly pb::FieldCodec<int> _repeated_equips_codec
        = pb::FieldCodec.ForInt32(114);
    private readonly pbc::RepeatedField<int> equips_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Equips
    {
        get { return equips_; }
    }

    /// <summary>Field number for the "debuffs" field.</summary>
    public const int DebuffsFieldNumber = 15;
    private static readonly pb::FieldCodec<int> _repeated_debuffs_codec
        = pb::FieldCodec.ForInt32(122);
    private readonly pbc::RepeatedField<int> debuffs_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Debuffs
    {
        get { return debuffs_; }
    }

    /// <summary>Field number for the "handCards" field.</summary>
    public const int HandCardsFieldNumber = 16;
    private static readonly pb::FieldCodec<global::CardData> _repeated_handCards_codec
        = pb::FieldCodec.ForMessage(130, global::CardData.Parser);
    private readonly pbc::RepeatedField<global::CardData> handCards_ = new pbc::RepeatedField<global::CardData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CardData> HandCards
    {
        get { return handCards_; }
    }

    /// <summary>Field number for the "handCardsCount" field.</summary>
    public const int HandCardsCountFieldNumber = 17;
    private int handCardsCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HandCardsCount
    {
        get { return handCardsCount_; }
        set
        {
            handCardsCount_ = value;
        }
    }

    /// <summary>Field number for the "bbangCount" field.</summary>
    public const int BbangCountFieldNumber = 18;
    private int bbangCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BbangCount
    {
        get { return bbangCount_; }
        set
        {
            bbangCount_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as CharacterData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CharacterData other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (CharacterType != other.CharacterType) return false;
        if (RoleType != other.RoleType) return false;
        if (Level != other.Level) return false;
        if (Exp != other.Exp) return false;
        if (Gold != other.Gold) return false;
        if (MaxHp != other.MaxHp) return false;
        if (Hp != other.Hp) return false;
        if (Mp != other.Mp) return false;
        if (Attack != other.Attack) return false;
        if (Armor != other.Armor) return false;
        if (Weapon != other.Weapon) return false;
        if (Potion != other.Potion) return false;
        if (!object.Equals(StateInfo, other.StateInfo)) return false;
        if (!equips_.Equals(other.equips_)) return false;
        if (!debuffs_.Equals(other.debuffs_)) return false;
        if (!handCards_.Equals(other.handCards_)) return false;
        if (HandCardsCount != other.HandCardsCount) return false;
        if (BbangCount != other.BbangCount) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (CharacterType != global::CharacterType.NoneCharacter) hash ^= CharacterType.GetHashCode();
        if (RoleType != global::RoleType.NoneRole) hash ^= RoleType.GetHashCode();
        if (Level != 0) hash ^= Level.GetHashCode();
        if (Exp != 0) hash ^= Exp.GetHashCode();
        if (Gold != 0) hash ^= Gold.GetHashCode();
        if (MaxHp != 0) hash ^= MaxHp.GetHashCode();
        if (Hp != 0) hash ^= Hp.GetHashCode();
        if (Mp != 0) hash ^= Mp.GetHashCode();
        if (Attack != 0) hash ^= Attack.GetHashCode();
        if (Armor != 0) hash ^= Armor.GetHashCode();
        if (Weapon != 0) hash ^= Weapon.GetHashCode();
        if (Potion != 0) hash ^= Potion.GetHashCode();
        if (stateInfo_ != null) hash ^= StateInfo.GetHashCode();
        hash ^= equips_.GetHashCode();
        hash ^= debuffs_.GetHashCode();
        hash ^= handCards_.GetHashCode();
        if (HandCardsCount != 0) hash ^= HandCardsCount.GetHashCode();
        if (BbangCount != 0) hash ^= BbangCount.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (CharacterType != global::CharacterType.NoneCharacter)
        {
            output.WriteRawTag(8);
            output.WriteEnum((int)CharacterType);
        }
        if (RoleType != global::RoleType.NoneRole)
        {
            output.WriteRawTag(16);
            output.WriteEnum((int)RoleType);
        }
        if (Level != 0)
        {
            output.WriteRawTag(24);
            output.WriteInt32(Level);
        }
        if (Exp != 0)
        {
            output.WriteRawTag(32);
            output.WriteInt32(Exp);
        }
        if (Gold != 0)
        {
            output.WriteRawTag(40);
            output.WriteInt32(Gold);
        }
        if (MaxHp != 0)
        {
            output.WriteRawTag(48);
            output.WriteInt32(MaxHp);
        }
        if (Hp != 0)
        {
            output.WriteRawTag(56);
            output.WriteInt32(Hp);
        }
        if (Mp != 0)
        {
            output.WriteRawTag(64);
            output.WriteInt32(Mp);
        }
        if (Attack != 0)
        {
            output.WriteRawTag(72);
            output.WriteInt32(Attack);
        }
        if (Armor != 0)
        {
            output.WriteRawTag(80);
            output.WriteInt32(Armor);
        }
        if (Weapon != 0)
        {
            output.WriteRawTag(88);
            output.WriteInt32(Weapon);
        }
        if (Potion != 0)
        {
            output.WriteRawTag(96);
            output.WriteInt32(Potion);
        }
        if (stateInfo_ != null)
        {
            output.WriteRawTag(106);
            output.WriteMessage(StateInfo);
        }
        equips_.WriteTo(output, _repeated_equips_codec);
        debuffs_.WriteTo(output, _repeated_debuffs_codec);
        handCards_.WriteTo(output, _repeated_handCards_codec);
        if (HandCardsCount != 0)
        {
            output.WriteRawTag(136, 1);
            output.WriteInt32(HandCardsCount);
        }
        if (BbangCount != 0)
        {
            output.WriteRawTag(144, 1);
            output.WriteInt32(BbangCount);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (CharacterType != global::CharacterType.NoneCharacter)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)CharacterType);
        }
        if (RoleType != global::RoleType.NoneRole)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)RoleType);
        }
        if (Level != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
        }
        if (Exp != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
        }
        if (Gold != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
        }
        if (MaxHp != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHp);
        }
        if (Hp != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
        }
        if (Mp != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mp);
        }
        if (Attack != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Attack);
        }
        if (Armor != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Armor);
        }
        if (Weapon != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Weapon);
        }
        if (Potion != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Potion);
        }
        if (stateInfo_ != null)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(StateInfo);
        }
        size += equips_.CalculateSize(_repeated_equips_codec);
        size += debuffs_.CalculateSize(_repeated_debuffs_codec);
        size += handCards_.CalculateSize(_repeated_handCards_codec);
        if (HandCardsCount != 0)
        {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(HandCardsCount);
        }
        if (BbangCount != 0)
        {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(BbangCount);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CharacterData other)
    {
        if (other == null)
        {
            return;
        }
        if (other.CharacterType != global::CharacterType.NoneCharacter)
        {
            CharacterType = other.CharacterType;
        }
        if (other.RoleType != global::RoleType.NoneRole)
        {
            RoleType = other.RoleType;
        }
        if (other.Level != 0)
        {
            Level = other.Level;
        }
        if (other.Exp != 0)
        {
            Exp = other.Exp;
        }
        if (other.Gold != 0)
        {
            Gold = other.Gold;
        }
        if (other.MaxHp != 0)
        {
            MaxHp = other.MaxHp;
        }
        if (other.Hp != 0)
        {
            Hp = other.Hp;
        }
        if (other.Mp != 0)
        {
            Mp = other.Mp;
        }
        if (other.Attack != 0)
        {
            Attack = other.Attack;
        }
        if (other.Armor != 0)
        {
            Armor = other.Armor;
        }
        if (other.Weapon != 0)
        {
            Weapon = other.Weapon;
        }
        if (other.Potion != 0)
        {
            Potion = other.Potion;
        }
        if (other.stateInfo_ != null)
        {
            if (stateInfo_ == null)
            {
                StateInfo = new global::CharacterStateInfoData();
            }
            StateInfo.MergeFrom(other.StateInfo);
        }
        equips_.Add(other.equips_);
        debuffs_.Add(other.debuffs_);
        handCards_.Add(other.handCards_);
        if (other.HandCardsCount != 0)
        {
            HandCardsCount = other.HandCardsCount;
        }
        if (other.BbangCount != 0)
        {
            BbangCount = other.BbangCount;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        CharacterType = (global::CharacterType)input.ReadEnum();
                        break;
                    }
                case 16:
                    {
                        RoleType = (global::RoleType)input.ReadEnum();
                        break;
                    }
                case 24:
                    {
                        Level = input.ReadInt32();
                        break;
                    }
                case 32:
                    {
                        Exp = input.ReadInt32();
                        break;
                    }
                case 40:
                    {
                        Gold = input.ReadInt32();
                        break;
                    }
                case 48:
                    {
                        MaxHp = input.ReadInt32();
                        break;
                    }
                case 56:
                    {
                        Hp = input.ReadInt32();
                        break;
                    }
                case 64:
                    {
                        Mp = input.ReadInt32();
                        break;
                    }
                case 72:
                    {
                        Attack = input.ReadInt32();
                        break;
                    }
                case 80:
                    {
                        Armor = input.ReadInt32();
                        break;
                    }
                case 88:
                    {
                        Weapon = input.ReadInt32();
                        break;
                    }
                case 96:
                    {
                        Potion = input.ReadInt32();
                        break;
                    }
                case 106:
                    {
                        if (stateInfo_ == null)
                        {
                            StateInfo = new global::CharacterStateInfoData();
                        }
                        input.ReadMessage(StateInfo);
                        break;
                    }
                case 114:
                case 112:
                    {
                        equips_.AddEntriesFrom(input, _repeated_equips_codec);
                        break;
                    }
                case 122:
                case 120:
                    {
                        debuffs_.AddEntriesFrom(input, _repeated_debuffs_codec);
                        break;
                    }
                case 130:
                    {
                        handCards_.AddEntriesFrom(input, _repeated_handCards_codec);
                        break;
                    }
                case 136:
                    {
                        HandCardsCount = input.ReadInt32();
                        break;
                    }
                case 144:
                    {
                        BbangCount = input.ReadInt32();
                        break;
                    }
            }
        }
    }

}

public sealed partial class CharacterPositionData : pb::IMessage<CharacterPositionData>
{
    private static readonly pb::MessageParser<CharacterPositionData> _parser = new pb::MessageParser<CharacterPositionData>(() => new CharacterPositionData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CharacterPositionData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterPositionData()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterPositionData(CharacterPositionData other) : this()
    {
        id_ = other.id_;
        x_ = other.x_;
        y_ = other.y_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterPositionData Clone()
    {
        return new CharacterPositionData(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id
    {
        get { return id_; }
        set
        {
            id_ = value;
        }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 2;
    private double x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double X
    {
        get { return x_; }
        set
        {
            x_ = value;
        }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 3;
    private double y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Y
    {
        get { return y_; }
        set
        {
            y_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as CharacterPositionData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CharacterPositionData other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (Id != other.Id) return false;
        if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(X, other.X)) return false;
        if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Y, other.Y)) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (Id != 0L) hash ^= Id.GetHashCode();
        if (X != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(X);
        if (Y != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Y);
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (Id != 0L)
        {
            output.WriteRawTag(8);
            output.WriteInt64(Id);
        }
        if (X != 0D)
        {
            output.WriteRawTag(17);
            output.WriteDouble(X);
        }
        if (Y != 0D)
        {
            output.WriteRawTag(25);
            output.WriteDouble(Y);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (Id != 0L)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
        }
        if (X != 0D)
        {
            size += 1 + 8;
        }
        if (Y != 0D)
        {
            size += 1 + 8;
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CharacterPositionData other)
    {
        if (other == null)
        {
            return;
        }
        if (other.Id != 0L)
        {
            Id = other.Id;
        }
        if (other.X != 0D)
        {
            X = other.X;
        }
        if (other.Y != 0D)
        {
            Y = other.Y;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        Id = input.ReadInt64();
                        break;
                    }
                case 17:
                    {
                        X = input.ReadDouble();
                        break;
                    }
                case 25:
                    {
                        Y = input.ReadDouble();
                        break;
                    }
            }
        }
    }

}

public sealed partial class CardData : pb::IMessage<CardData>
{
    private static readonly pb::MessageParser<CardData> _parser = new pb::MessageParser<CardData>(() => new CardData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardData()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardData(CardData other) : this()
    {
        type_ = other.type_;
        count_ = other.count_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardData Clone()
    {
        return new CardData(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::CardType type_ = global::CardType.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CardType Type
    {
        get { return type_; }
        set
        {
            type_ = value;
        }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count
    {
        get { return count_; }
        set
        {
            count_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as CardData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardData other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (Type != other.Type) return false;
        if (Count != other.Count) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (Type != global::CardType.None) hash ^= Type.GetHashCode();
        if (Count != 0) hash ^= Count.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (Type != global::CardType.None)
        {
            output.WriteRawTag(8);
            output.WriteEnum((int)Type);
        }
        if (Count != 0)
        {
            output.WriteRawTag(16);
            output.WriteInt32(Count);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (Type != global::CardType.None)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
        }
        if (Count != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardData other)
    {
        if (other == null)
        {
            return;
        }
        if (other.Type != global::CardType.None)
        {
            Type = other.Type;
        }
        if (other.Count != 0)
        {
            Count = other.Count;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        Type = (global::CardType)input.ReadEnum();
                        break;
                    }
                case 16:
                    {
                        Count = input.ReadInt32();
                        break;
                    }
            }
        }
    }

}

public sealed partial class GameStateData : pb::IMessage<GameStateData>
{
    private static readonly pb::MessageParser<GameStateData> _parser = new pb::MessageParser<GameStateData>(() => new GameStateData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameStateData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStateData()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStateData(GameStateData other) : this()
    {
        phaseType_ = other.phaseType_;
        nextPhaseAt_ = other.nextPhaseAt_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStateData Clone()
    {
        return new GameStateData(this);
    }

    /// <summary>Field number for the "phaseType" field.</summary>
    public const int PhaseTypeFieldNumber = 1;
    private global::PhaseType phaseType_ = global::PhaseType.NonePhase;
    /// <summary>
    /// DAY 1, EVENING 2, END 3 (하루 종료시 카드 버리는 턴)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PhaseType PhaseType
    {
        get { return phaseType_; }
        set
        {
            phaseType_ = value;
        }
    }

    /// <summary>Field number for the "nextPhaseAt" field.</summary>
    public const int NextPhaseAtFieldNumber = 2;
    private long nextPhaseAt_;
    /// <summary>
    /// 다음 페이즈 시작 시점(밀리초 타임스탬프)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NextPhaseAt
    {
        get { return nextPhaseAt_; }
        set
        {
            nextPhaseAt_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as GameStateData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameStateData other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (PhaseType != other.PhaseType) return false;
        if (NextPhaseAt != other.NextPhaseAt) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (PhaseType != global::PhaseType.NonePhase) hash ^= PhaseType.GetHashCode();
        if (NextPhaseAt != 0L) hash ^= NextPhaseAt.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (PhaseType != global::PhaseType.NonePhase)
        {
            output.WriteRawTag(8);
            output.WriteEnum((int)PhaseType);
        }
        if (NextPhaseAt != 0L)
        {
            output.WriteRawTag(16);
            output.WriteInt64(NextPhaseAt);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (PhaseType != global::PhaseType.NonePhase)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)PhaseType);
        }
        if (NextPhaseAt != 0L)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(NextPhaseAt);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameStateData other)
    {
        if (other == null)
        {
            return;
        }
        if (other.PhaseType != global::PhaseType.NonePhase)
        {
            PhaseType = other.PhaseType;
        }
        if (other.NextPhaseAt != 0L)
        {
            NextPhaseAt = other.NextPhaseAt;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        PhaseType = (global::PhaseType)input.ReadEnum();
                        break;
                    }
                case 16:
                    {
                        NextPhaseAt = input.ReadInt64();
                        break;
                    }
            }
        }
    }

}

public sealed partial class CharacterStateInfoData : pb::IMessage<CharacterStateInfoData>
{
    private static readonly pb::MessageParser<CharacterStateInfoData> _parser = new pb::MessageParser<CharacterStateInfoData>(() => new CharacterStateInfoData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CharacterStateInfoData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterStateInfoData()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterStateInfoData(CharacterStateInfoData other) : this()
    {
        state_ = other.state_;
        nextState_ = other.nextState_;
        nextStateAt_ = other.nextStateAt_;
        stateTargetUserId_ = other.stateTargetUserId_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterStateInfoData Clone()
    {
        return new CharacterStateInfoData(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private global::CharacterStateType state_ = global::CharacterStateType.NoneCharacterState;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CharacterStateType State
    {
        get { return state_; }
        set
        {
            state_ = value;
        }
    }

    /// <summary>Field number for the "nextState" field.</summary>
    public const int NextStateFieldNumber = 2;
    private global::CharacterStateType nextState_ = global::CharacterStateType.NoneCharacterState;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CharacterStateType NextState
    {
        get { return nextState_; }
        set
        {
            nextState_ = value;
        }
    }

    /// <summary>Field number for the "nextStateAt" field.</summary>
    public const int NextStateAtFieldNumber = 3;
    private long nextStateAt_;
    /// <summary>
    /// state가 nextState로 풀리는 밀리초 타임스탬프. state가 NONE이면 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NextStateAt
    {
        get { return nextStateAt_; }
        set
        {
            nextStateAt_ = value;
        }
    }

    /// <summary>Field number for the "stateTargetUserId" field.</summary>
    public const int StateTargetUserIdFieldNumber = 4;
    private long stateTargetUserId_;
    /// <summary>
    /// state에 target이 있을 경우
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StateTargetUserId
    {
        get { return stateTargetUserId_; }
        set
        {
            stateTargetUserId_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as CharacterStateInfoData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CharacterStateInfoData other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (State != other.State) return false;
        if (NextState != other.NextState) return false;
        if (NextStateAt != other.NextStateAt) return false;
        if (StateTargetUserId != other.StateTargetUserId) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (State != global::CharacterStateType.NoneCharacterState) hash ^= State.GetHashCode();
        if (NextState != global::CharacterStateType.NoneCharacterState) hash ^= NextState.GetHashCode();
        if (NextStateAt != 0L) hash ^= NextStateAt.GetHashCode();
        if (StateTargetUserId != 0L) hash ^= StateTargetUserId.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (State != global::CharacterStateType.NoneCharacterState)
        {
            output.WriteRawTag(8);
            output.WriteEnum((int)State);
        }
        if (NextState != global::CharacterStateType.NoneCharacterState)
        {
            output.WriteRawTag(16);
            output.WriteEnum((int)NextState);
        }
        if (NextStateAt != 0L)
        {
            output.WriteRawTag(24);
            output.WriteInt64(NextStateAt);
        }
        if (StateTargetUserId != 0L)
        {
            output.WriteRawTag(32);
            output.WriteInt64(StateTargetUserId);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (State != global::CharacterStateType.NoneCharacterState)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)State);
        }
        if (NextState != global::CharacterStateType.NoneCharacterState)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)NextState);
        }
        if (NextStateAt != 0L)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(NextStateAt);
        }
        if (StateTargetUserId != 0L)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(StateTargetUserId);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CharacterStateInfoData other)
    {
        if (other == null)
        {
            return;
        }
        if (other.State != global::CharacterStateType.NoneCharacterState)
        {
            State = other.State;
        }
        if (other.NextState != global::CharacterStateType.NoneCharacterState)
        {
            NextState = other.NextState;
        }
        if (other.NextStateAt != 0L)
        {
            NextStateAt = other.NextStateAt;
        }
        if (other.StateTargetUserId != 0L)
        {
            StateTargetUserId = other.StateTargetUserId;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        State = (global::CharacterStateType)input.ReadEnum();
                        break;
                    }
                case 16:
                    {
                        NextState = (global::CharacterStateType)input.ReadEnum();
                        break;
                    }
                case 24:
                    {
                        NextStateAt = input.ReadInt64();
                        break;
                    }
                case 32:
                    {
                        StateTargetUserId = input.ReadInt64();
                        break;
                    }
            }
        }
    }

}

/// <summary>
/// 
///패킷 명세
/// </summary>
public sealed partial class C2SRegisterRequest : pb::IMessage<C2SRegisterRequest>
{
    private static readonly pb::MessageParser<C2SRegisterRequest> _parser = new pb::MessageParser<C2SRegisterRequest>(() => new C2SRegisterRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SRegisterRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SRegisterRequest()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SRegisterRequest(C2SRegisterRequest other) : this()
    {
        email_ = other.email_;
        nickname_ = other.nickname_;
        password_ = other.password_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SRegisterRequest Clone()
    {
        return new C2SRegisterRequest(this);
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 1;
    private string email_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email
    {
        get { return email_; }
        set
        {
            email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 2;
    private string nickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname
    {
        get { return nickname_; }
        set
        {
            nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 3;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password
    {
        get { return password_; }
        set
        {
            password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as C2SRegisterRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2SRegisterRequest other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (Email != other.Email) return false;
        if (Nickname != other.Nickname) return false;
        if (Password != other.Password) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (Email.Length != 0) hash ^= Email.GetHashCode();
        if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
        if (Password.Length != 0) hash ^= Password.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (Email.Length != 0)
        {
            output.WriteRawTag(10);
            output.WriteString(Email);
        }
        if (Nickname.Length != 0)
        {
            output.WriteRawTag(18);
            output.WriteString(Nickname);
        }
        if (Password.Length != 0)
        {
            output.WriteRawTag(26);
            output.WriteString(Password);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (Email.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
        }
        if (Nickname.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
        }
        if (Password.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2SRegisterRequest other)
    {
        if (other == null)
        {
            return;
        }
        if (other.Email.Length != 0)
        {
            Email = other.Email;
        }
        if (other.Nickname.Length != 0)
        {
            Nickname = other.Nickname;
        }
        if (other.Password.Length != 0)
        {
            Password = other.Password;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        Email = input.ReadString();
                        break;
                    }
                case 18:
                    {
                        Nickname = input.ReadString();
                        break;
                    }
                case 26:
                    {
                        Password = input.ReadString();
                        break;
                    }
            }
        }
    }

}

public sealed partial class S2CRegisterResponse : pb::IMessage<S2CRegisterResponse>
{
    private static readonly pb::MessageParser<S2CRegisterResponse> _parser = new pb::MessageParser<S2CRegisterResponse>(() => new S2CRegisterResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CRegisterResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CRegisterResponse()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CRegisterResponse(S2CRegisterResponse other) : this()
    {
        success_ = other.success_;
        message_ = other.message_;
        failCode_ = other.failCode_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CRegisterResponse Clone()
    {
        return new S2CRegisterResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success
    {
        get { return success_; }
        set
        {
            success_ = value;
        }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message
    {
        get { return message_; }
        set
        {
            message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "failCode" field.</summary>
    public const int FailCodeFieldNumber = 3;
    private global::GlobalFailCode failCode_ = global::GlobalFailCode.NoneFailcode;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GlobalFailCode FailCode
    {
        get { return failCode_; }
        set
        {
            failCode_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as S2CRegisterResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2CRegisterResponse other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (Success != other.Success) return false;
        if (Message != other.Message) return false;
        if (FailCode != other.FailCode) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (Success != false) hash ^= Success.GetHashCode();
        if (Message.Length != 0) hash ^= Message.GetHashCode();
        if (FailCode != global::GlobalFailCode.NoneFailcode) hash ^= FailCode.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (Success != false)
        {
            output.WriteRawTag(8);
            output.WriteBool(Success);
        }
        if (Message.Length != 0)
        {
            output.WriteRawTag(18);
            output.WriteString(Message);
        }
        if (FailCode != global::GlobalFailCode.NoneFailcode)
        {
            output.WriteRawTag(24);
            output.WriteEnum((int)FailCode);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (Success != false)
        {
            size += 1 + 1;
        }
        if (Message.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
        }
        if (FailCode != global::GlobalFailCode.NoneFailcode)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)FailCode);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2CRegisterResponse other)
    {
        if (other == null)
        {
            return;
        }
        if (other.Success != false)
        {
            Success = other.Success;
        }
        if (other.Message.Length != 0)
        {
            Message = other.Message;
        }
        if (other.FailCode != global::GlobalFailCode.NoneFailcode)
        {
            FailCode = other.FailCode;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        Success = input.ReadBool();
                        break;
                    }
                case 18:
                    {
                        Message = input.ReadString();
                        break;
                    }
                case 24:
                    {
                        FailCode = (global::GlobalFailCode)input.ReadEnum();
                        break;
                    }
            }
        }
    }

}

public sealed partial class C2SLoginRequest : pb::IMessage<C2SLoginRequest>
{
    private static readonly pb::MessageParser<C2SLoginRequest> _parser = new pb::MessageParser<C2SLoginRequest>(() => new C2SLoginRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SLoginRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SLoginRequest()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SLoginRequest(C2SLoginRequest other) : this()
    {
        email_ = other.email_;
        password_ = other.password_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SLoginRequest Clone()
    {
        return new C2SLoginRequest(this);
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 1;
    private string email_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email
    {
        get { return email_; }
        set
        {
            email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password
    {
        get { return password_; }
        set
        {
            password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as C2SLoginRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2SLoginRequest other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (Email != other.Email) return false;
        if (Password != other.Password) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (Email.Length != 0) hash ^= Email.GetHashCode();
        if (Password.Length != 0) hash ^= Password.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (Email.Length != 0)
        {
            output.WriteRawTag(10);
            output.WriteString(Email);
        }
        if (Password.Length != 0)
        {
            output.WriteRawTag(18);
            output.WriteString(Password);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (Email.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
        }
        if (Password.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2SLoginRequest other)
    {
        if (other == null)
        {
            return;
        }
        if (other.Email.Length != 0)
        {
            Email = other.Email;
        }
        if (other.Password.Length != 0)
        {
            Password = other.Password;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        Email = input.ReadString();
                        break;
                    }
                case 18:
                    {
                        Password = input.ReadString();
                        break;
                    }
            }
        }
    }

}

public sealed partial class S2CLoginResponse : pb::IMessage<S2CLoginResponse>
{
    private static readonly pb::MessageParser<S2CLoginResponse> _parser = new pb::MessageParser<S2CLoginResponse>(() => new S2CLoginResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CLoginResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CLoginResponse()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CLoginResponse(S2CLoginResponse other) : this()
    {
        success_ = other.success_;
        message_ = other.message_;
        token_ = other.token_;
        myInfo_ = other.myInfo_ != null ? other.myInfo_.Clone() : null;
        failCode_ = other.failCode_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CLoginResponse Clone()
    {
        return new S2CLoginResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success
    {
        get { return success_; }
        set
        {
            success_ = value;
        }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message
    {
        get { return message_; }
        set
        {
            message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 3;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token
    {
        get { return token_; }
        set
        {
            token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "myInfo" field.</summary>
    public const int MyInfoFieldNumber = 4;
    private global::UserData myInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::UserData MyInfo
    {
        get { return myInfo_; }
        set
        {
            myInfo_ = value;
        }
    }

    /// <summary>Field number for the "failCode" field.</summary>
    public const int FailCodeFieldNumber = 5;
    private global::GlobalFailCode failCode_ = global::GlobalFailCode.NoneFailcode;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GlobalFailCode FailCode
    {
        get { return failCode_; }
        set
        {
            failCode_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as S2CLoginResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2CLoginResponse other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (Success != other.Success) return false;
        if (Message != other.Message) return false;
        if (Token != other.Token) return false;
        if (!object.Equals(MyInfo, other.MyInfo)) return false;
        if (FailCode != other.FailCode) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (Success != false) hash ^= Success.GetHashCode();
        if (Message.Length != 0) hash ^= Message.GetHashCode();
        if (Token.Length != 0) hash ^= Token.GetHashCode();
        if (myInfo_ != null) hash ^= MyInfo.GetHashCode();
        if (FailCode != global::GlobalFailCode.NoneFailcode) hash ^= FailCode.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (Success != false)
        {
            output.WriteRawTag(8);
            output.WriteBool(Success);
        }
        if (Message.Length != 0)
        {
            output.WriteRawTag(18);
            output.WriteString(Message);
        }
        if (Token.Length != 0)
        {
            output.WriteRawTag(26);
            output.WriteString(Token);
        }
        if (myInfo_ != null)
        {
            output.WriteRawTag(34);
            output.WriteMessage(MyInfo);
        }
        if (FailCode != global::GlobalFailCode.NoneFailcode)
        {
            output.WriteRawTag(40);
            output.WriteEnum((int)FailCode);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (Success != false)
        {
            size += 1 + 1;
        }
        if (Message.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
        }
        if (Token.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
        }
        if (myInfo_ != null)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(MyInfo);
        }
        if (FailCode != global::GlobalFailCode.NoneFailcode)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)FailCode);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2CLoginResponse other)
    {
        if (other == null)
        {
            return;
        }
        if (other.Success != false)
        {
            Success = other.Success;
        }
        if (other.Message.Length != 0)
        {
            Message = other.Message;
        }
        if (other.Token.Length != 0)
        {
            Token = other.Token;
        }
        if (other.myInfo_ != null)
        {
            if (myInfo_ == null)
            {
                MyInfo = new global::UserData();
            }
            MyInfo.MergeFrom(other.MyInfo);
        }
        if (other.FailCode != global::GlobalFailCode.NoneFailcode)
        {
            FailCode = other.FailCode;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        Success = input.ReadBool();
                        break;
                    }
                case 18:
                    {
                        Message = input.ReadString();
                        break;
                    }
                case 26:
                    {
                        Token = input.ReadString();
                        break;
                    }
                case 34:
                    {
                        if (myInfo_ == null)
                        {
                            MyInfo = new global::UserData();
                        }
                        input.ReadMessage(MyInfo);
                        break;
                    }
                case 40:
                    {
                        FailCode = (global::GlobalFailCode)input.ReadEnum();
                        break;
                    }
            }
        }
    }

}

public sealed partial class C2SCreateRoomRequest : pb::IMessage<C2SCreateRoomRequest>
{
    private static readonly pb::MessageParser<C2SCreateRoomRequest> _parser = new pb::MessageParser<C2SCreateRoomRequest>(() => new C2SCreateRoomRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SCreateRoomRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SCreateRoomRequest()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SCreateRoomRequest(C2SCreateRoomRequest other) : this()
    {
        name_ = other.name_;
        maxUserNum_ = other.maxUserNum_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SCreateRoomRequest Clone()
    {
        return new C2SCreateRoomRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name
    {
        get { return name_; }
        set
        {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "maxUserNum" field.</summary>
    public const int MaxUserNumFieldNumber = 2;
    private int maxUserNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxUserNum
    {
        get { return maxUserNum_; }
        set
        {
            maxUserNum_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as C2SCreateRoomRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2SCreateRoomRequest other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (Name != other.Name) return false;
        if (MaxUserNum != other.MaxUserNum) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (Name.Length != 0) hash ^= Name.GetHashCode();
        if (MaxUserNum != 0) hash ^= MaxUserNum.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (Name.Length != 0)
        {
            output.WriteRawTag(10);
            output.WriteString(Name);
        }
        if (MaxUserNum != 0)
        {
            output.WriteRawTag(16);
            output.WriteInt32(MaxUserNum);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (Name.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
        }
        if (MaxUserNum != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxUserNum);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2SCreateRoomRequest other)
    {
        if (other == null)
        {
            return;
        }
        if (other.Name.Length != 0)
        {
            Name = other.Name;
        }
        if (other.MaxUserNum != 0)
        {
            MaxUserNum = other.MaxUserNum;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        Name = input.ReadString();
                        break;
                    }
                case 16:
                    {
                        MaxUserNum = input.ReadInt32();
                        break;
                    }
            }
        }
    }

}

public sealed partial class S2CCreateRoomResponse : pb::IMessage<S2CCreateRoomResponse>
{
    private static readonly pb::MessageParser<S2CCreateRoomResponse> _parser = new pb::MessageParser<S2CCreateRoomResponse>(() => new S2CCreateRoomResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CCreateRoomResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CCreateRoomResponse()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CCreateRoomResponse(S2CCreateRoomResponse other) : this()
    {
        success_ = other.success_;
        room_ = other.room_ != null ? other.room_.Clone() : null;
        failCode_ = other.failCode_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CCreateRoomResponse Clone()
    {
        return new S2CCreateRoomResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success
    {
        get { return success_; }
        set
        {
            success_ = value;
        }
    }

    /// <summary>Field number for the "room" field.</summary>
    public const int RoomFieldNumber = 2;
    private global::RoomData room_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RoomData Room
    {
        get { return room_; }
        set
        {
            room_ = value;
        }
    }

    /// <summary>Field number for the "failCode" field.</summary>
    public const int FailCodeFieldNumber = 3;
    private global::GlobalFailCode failCode_ = global::GlobalFailCode.NoneFailcode;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GlobalFailCode FailCode
    {
        get { return failCode_; }
        set
        {
            failCode_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as S2CCreateRoomResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2CCreateRoomResponse other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (Success != other.Success) return false;
        if (!object.Equals(Room, other.Room)) return false;
        if (FailCode != other.FailCode) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (Success != false) hash ^= Success.GetHashCode();
        if (room_ != null) hash ^= Room.GetHashCode();
        if (FailCode != global::GlobalFailCode.NoneFailcode) hash ^= FailCode.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (Success != false)
        {
            output.WriteRawTag(8);
            output.WriteBool(Success);
        }
        if (room_ != null)
        {
            output.WriteRawTag(18);
            output.WriteMessage(Room);
        }
        if (FailCode != global::GlobalFailCode.NoneFailcode)
        {
            output.WriteRawTag(24);
            output.WriteEnum((int)FailCode);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (Success != false)
        {
            size += 1 + 1;
        }
        if (room_ != null)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Room);
        }
        if (FailCode != global::GlobalFailCode.NoneFailcode)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)FailCode);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2CCreateRoomResponse other)
    {
        if (other == null)
        {
            return;
        }
        if (other.Success != false)
        {
            Success = other.Success;
        }
        if (other.room_ != null)
        {
            if (room_ == null)
            {
                Room = new global::RoomData();
            }
            Room.MergeFrom(other.Room);
        }
        if (other.FailCode != global::GlobalFailCode.NoneFailcode)
        {
            FailCode = other.FailCode;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        Success = input.ReadBool();
                        break;
                    }
                case 18:
                    {
                        if (room_ == null)
                        {
                            Room = new global::RoomData();
                        }
                        input.ReadMessage(Room);
                        break;
                    }
                case 24:
                    {
                        FailCode = (global::GlobalFailCode)input.ReadEnum();
                        break;
                    }
            }
        }
    }

}

public sealed partial class C2SGetRoomListRequest : pb::IMessage<C2SGetRoomListRequest>
{
    private static readonly pb::MessageParser<C2SGetRoomListRequest> _parser = new pb::MessageParser<C2SGetRoomListRequest>(() => new C2SGetRoomListRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SGetRoomListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SGetRoomListRequest()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SGetRoomListRequest(C2SGetRoomListRequest other) : this()
    {
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SGetRoomListRequest Clone()
    {
        return new C2SGetRoomListRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as C2SGetRoomListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2SGetRoomListRequest other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2SGetRoomListRequest other)
    {
        if (other == null)
        {
            return;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
            }
        }
    }

}

public sealed partial class S2CGetRoomListResponse : pb::IMessage<S2CGetRoomListResponse>
{
    private static readonly pb::MessageParser<S2CGetRoomListResponse> _parser = new pb::MessageParser<S2CGetRoomListResponse>(() => new S2CGetRoomListResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CGetRoomListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CGetRoomListResponse()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CGetRoomListResponse(S2CGetRoomListResponse other) : this()
    {
        rooms_ = other.rooms_.Clone();
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CGetRoomListResponse Clone()
    {
        return new S2CGetRoomListResponse(this);
    }

    /// <summary>Field number for the "rooms" field.</summary>
    public const int RoomsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::RoomData> _repeated_rooms_codec
        = pb::FieldCodec.ForMessage(10, global::RoomData.Parser);
    private readonly pbc::RepeatedField<global::RoomData> rooms_ = new pbc::RepeatedField<global::RoomData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RoomData> Rooms
    {
        get { return rooms_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as S2CGetRoomListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2CGetRoomListResponse other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (!rooms_.Equals(other.rooms_)) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        hash ^= rooms_.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        rooms_.WriteTo(output, _repeated_rooms_codec);
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        size += rooms_.CalculateSize(_repeated_rooms_codec);
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2CGetRoomListResponse other)
    {
        if (other == null)
        {
            return;
        }
        rooms_.Add(other.rooms_);
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        rooms_.AddEntriesFrom(input, _repeated_rooms_codec);
                        break;
                    }
            }
        }
    }

}

public sealed partial class C2SJoinRoomRequest : pb::IMessage<C2SJoinRoomRequest>
{
    private static readonly pb::MessageParser<C2SJoinRoomRequest> _parser = new pb::MessageParser<C2SJoinRoomRequest>(() => new C2SJoinRoomRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SJoinRoomRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SJoinRoomRequest()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SJoinRoomRequest(C2SJoinRoomRequest other) : this()
    {
        roomId_ = other.roomId_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SJoinRoomRequest Clone()
    {
        return new C2SJoinRoomRequest(this);
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private int roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomId
    {
        get { return roomId_; }
        set
        {
            roomId_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as C2SJoinRoomRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2SJoinRoomRequest other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (RoomId != other.RoomId) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (RoomId != 0) hash ^= RoomId.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (RoomId != 0)
        {
            output.WriteRawTag(8);
            output.WriteInt32(RoomId);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (RoomId != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2SJoinRoomRequest other)
    {
        if (other == null)
        {
            return;
        }
        if (other.RoomId != 0)
        {
            RoomId = other.RoomId;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        RoomId = input.ReadInt32();
                        break;
                    }
            }
        }
    }

}

public sealed partial class S2CJoinRoomResponse : pb::IMessage<S2CJoinRoomResponse>
{
    private static readonly pb::MessageParser<S2CJoinRoomResponse> _parser = new pb::MessageParser<S2CJoinRoomResponse>(() => new S2CJoinRoomResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CJoinRoomResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CJoinRoomResponse()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CJoinRoomResponse(S2CJoinRoomResponse other) : this()
    {
        success_ = other.success_;
        room_ = other.room_ != null ? other.room_.Clone() : null;
        failCode_ = other.failCode_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CJoinRoomResponse Clone()
    {
        return new S2CJoinRoomResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success
    {
        get { return success_; }
        set
        {
            success_ = value;
        }
    }

    /// <summary>Field number for the "room" field.</summary>
    public const int RoomFieldNumber = 2;
    private global::RoomData room_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RoomData Room
    {
        get { return room_; }
        set
        {
            room_ = value;
        }
    }

    /// <summary>Field number for the "failCode" field.</summary>
    public const int FailCodeFieldNumber = 3;
    private global::GlobalFailCode failCode_ = global::GlobalFailCode.NoneFailcode;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GlobalFailCode FailCode
    {
        get { return failCode_; }
        set
        {
            failCode_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as S2CJoinRoomResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2CJoinRoomResponse other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (Success != other.Success) return false;
        if (!object.Equals(Room, other.Room)) return false;
        if (FailCode != other.FailCode) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (Success != false) hash ^= Success.GetHashCode();
        if (room_ != null) hash ^= Room.GetHashCode();
        if (FailCode != global::GlobalFailCode.NoneFailcode) hash ^= FailCode.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (Success != false)
        {
            output.WriteRawTag(8);
            output.WriteBool(Success);
        }
        if (room_ != null)
        {
            output.WriteRawTag(18);
            output.WriteMessage(Room);
        }
        if (FailCode != global::GlobalFailCode.NoneFailcode)
        {
            output.WriteRawTag(24);
            output.WriteEnum((int)FailCode);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (Success != false)
        {
            size += 1 + 1;
        }
        if (room_ != null)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Room);
        }
        if (FailCode != global::GlobalFailCode.NoneFailcode)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)FailCode);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2CJoinRoomResponse other)
    {
        if (other == null)
        {
            return;
        }
        if (other.Success != false)
        {
            Success = other.Success;
        }
        if (other.room_ != null)
        {
            if (room_ == null)
            {
                Room = new global::RoomData();
            }
            Room.MergeFrom(other.Room);
        }
        if (other.FailCode != global::GlobalFailCode.NoneFailcode)
        {
            FailCode = other.FailCode;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        Success = input.ReadBool();
                        break;
                    }
                case 18:
                    {
                        if (room_ == null)
                        {
                            Room = new global::RoomData();
                        }
                        input.ReadMessage(Room);
                        break;
                    }
                case 24:
                    {
                        FailCode = (global::GlobalFailCode)input.ReadEnum();
                        break;
                    }
            }
        }
    }

}

public sealed partial class C2SJoinRandomRoomRequest : pb::IMessage<C2SJoinRandomRoomRequest>
{
    private static readonly pb::MessageParser<C2SJoinRandomRoomRequest> _parser = new pb::MessageParser<C2SJoinRandomRoomRequest>(() => new C2SJoinRandomRoomRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SJoinRandomRoomRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SJoinRandomRoomRequest()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SJoinRandomRoomRequest(C2SJoinRandomRoomRequest other) : this()
    {
        roomId_ = other.roomId_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SJoinRandomRoomRequest Clone()
    {
        return new C2SJoinRandomRoomRequest(this);
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private int roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomId
    {
        get { return roomId_; }
        set
        {
            roomId_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as C2SJoinRandomRoomRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2SJoinRandomRoomRequest other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (RoomId != other.RoomId) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (RoomId != 0) hash ^= RoomId.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (RoomId != 0)
        {
            output.WriteRawTag(8);
            output.WriteInt32(RoomId);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (RoomId != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2SJoinRandomRoomRequest other)
    {
        if (other == null)
        {
            return;
        }
        if (other.RoomId != 0)
        {
            RoomId = other.RoomId;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        RoomId = input.ReadInt32();
                        break;
                    }
            }
        }
    }

}

public sealed partial class S2CJoinRandomRoomResponse : pb::IMessage<S2CJoinRandomRoomResponse>
{
    private static readonly pb::MessageParser<S2CJoinRandomRoomResponse> _parser = new pb::MessageParser<S2CJoinRandomRoomResponse>(() => new S2CJoinRandomRoomResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CJoinRandomRoomResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CJoinRandomRoomResponse()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CJoinRandomRoomResponse(S2CJoinRandomRoomResponse other) : this()
    {
        success_ = other.success_;
        room_ = other.room_ != null ? other.room_.Clone() : null;
        failCode_ = other.failCode_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CJoinRandomRoomResponse Clone()
    {
        return new S2CJoinRandomRoomResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success
    {
        get { return success_; }
        set
        {
            success_ = value;
        }
    }

    /// <summary>Field number for the "room" field.</summary>
    public const int RoomFieldNumber = 2;
    private global::RoomData room_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RoomData Room
    {
        get { return room_; }
        set
        {
            room_ = value;
        }
    }

    /// <summary>Field number for the "failCode" field.</summary>
    public const int FailCodeFieldNumber = 3;
    private global::GlobalFailCode failCode_ = global::GlobalFailCode.NoneFailcode;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GlobalFailCode FailCode
    {
        get { return failCode_; }
        set
        {
            failCode_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as S2CJoinRandomRoomResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2CJoinRandomRoomResponse other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (Success != other.Success) return false;
        if (!object.Equals(Room, other.Room)) return false;
        if (FailCode != other.FailCode) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (Success != false) hash ^= Success.GetHashCode();
        if (room_ != null) hash ^= Room.GetHashCode();
        if (FailCode != global::GlobalFailCode.NoneFailcode) hash ^= FailCode.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (Success != false)
        {
            output.WriteRawTag(8);
            output.WriteBool(Success);
        }
        if (room_ != null)
        {
            output.WriteRawTag(18);
            output.WriteMessage(Room);
        }
        if (FailCode != global::GlobalFailCode.NoneFailcode)
        {
            output.WriteRawTag(24);
            output.WriteEnum((int)FailCode);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (Success != false)
        {
            size += 1 + 1;
        }
        if (room_ != null)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Room);
        }
        if (FailCode != global::GlobalFailCode.NoneFailcode)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)FailCode);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2CJoinRandomRoomResponse other)
    {
        if (other == null)
        {
            return;
        }
        if (other.Success != false)
        {
            Success = other.Success;
        }
        if (other.room_ != null)
        {
            if (room_ == null)
            {
                Room = new global::RoomData();
            }
            Room.MergeFrom(other.Room);
        }
        if (other.FailCode != global::GlobalFailCode.NoneFailcode)
        {
            FailCode = other.FailCode;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        Success = input.ReadBool();
                        break;
                    }
                case 18:
                    {
                        if (room_ == null)
                        {
                            Room = new global::RoomData();
                        }
                        input.ReadMessage(Room);
                        break;
                    }
                case 24:
                    {
                        FailCode = (global::GlobalFailCode)input.ReadEnum();
                        break;
                    }
            }
        }
    }

}

public sealed partial class S2CJoinRoomNotification : pb::IMessage<S2CJoinRoomNotification>
{
    private static readonly pb::MessageParser<S2CJoinRoomNotification> _parser = new pb::MessageParser<S2CJoinRoomNotification>(() => new S2CJoinRoomNotification());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CJoinRoomNotification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CJoinRoomNotification()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CJoinRoomNotification(S2CJoinRoomNotification other) : this()
    {
        joinUser_ = other.joinUser_ != null ? other.joinUser_.Clone() : null;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CJoinRoomNotification Clone()
    {
        return new S2CJoinRoomNotification(this);
    }

    /// <summary>Field number for the "joinUser" field.</summary>
    public const int JoinUserFieldNumber = 1;
    private global::UserData joinUser_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::UserData JoinUser
    {
        get { return joinUser_; }
        set
        {
            joinUser_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as S2CJoinRoomNotification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2CJoinRoomNotification other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (!object.Equals(JoinUser, other.JoinUser)) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (joinUser_ != null) hash ^= JoinUser.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (joinUser_ != null)
        {
            output.WriteRawTag(10);
            output.WriteMessage(JoinUser);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (joinUser_ != null)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(JoinUser);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2CJoinRoomNotification other)
    {
        if (other == null)
        {
            return;
        }
        if (other.joinUser_ != null)
        {
            if (joinUser_ == null)
            {
                JoinUser = new global::UserData();
            }
            JoinUser.MergeFrom(other.JoinUser);
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        if (joinUser_ == null)
                        {
                            JoinUser = new global::UserData();
                        }
                        input.ReadMessage(JoinUser);
                        break;
                    }
            }
        }
    }

}

public sealed partial class C2SLeaveRoomRequest : pb::IMessage<C2SLeaveRoomRequest>
{
    private static readonly pb::MessageParser<C2SLeaveRoomRequest> _parser = new pb::MessageParser<C2SLeaveRoomRequest>(() => new C2SLeaveRoomRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SLeaveRoomRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SLeaveRoomRequest()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SLeaveRoomRequest(C2SLeaveRoomRequest other) : this()
    {
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SLeaveRoomRequest Clone()
    {
        return new C2SLeaveRoomRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as C2SLeaveRoomRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2SLeaveRoomRequest other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2SLeaveRoomRequest other)
    {
        if (other == null)
        {
            return;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
            }
        }
    }

}

public sealed partial class S2CLeaveRoomResponse : pb::IMessage<S2CLeaveRoomResponse>
{
    private static readonly pb::MessageParser<S2CLeaveRoomResponse> _parser = new pb::MessageParser<S2CLeaveRoomResponse>(() => new S2CLeaveRoomResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CLeaveRoomResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CLeaveRoomResponse()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CLeaveRoomResponse(S2CLeaveRoomResponse other) : this()
    {
        success_ = other.success_;
        failCode_ = other.failCode_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CLeaveRoomResponse Clone()
    {
        return new S2CLeaveRoomResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success
    {
        get { return success_; }
        set
        {
            success_ = value;
        }
    }

    /// <summary>Field number for the "failCode" field.</summary>
    public const int FailCodeFieldNumber = 2;
    private global::GlobalFailCode failCode_ = global::GlobalFailCode.NoneFailcode;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GlobalFailCode FailCode
    {
        get { return failCode_; }
        set
        {
            failCode_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as S2CLeaveRoomResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2CLeaveRoomResponse other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (Success != other.Success) return false;
        if (FailCode != other.FailCode) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (Success != false) hash ^= Success.GetHashCode();
        if (FailCode != global::GlobalFailCode.NoneFailcode) hash ^= FailCode.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (Success != false)
        {
            output.WriteRawTag(8);
            output.WriteBool(Success);
        }
        if (FailCode != global::GlobalFailCode.NoneFailcode)
        {
            output.WriteRawTag(16);
            output.WriteEnum((int)FailCode);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (Success != false)
        {
            size += 1 + 1;
        }
        if (FailCode != global::GlobalFailCode.NoneFailcode)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)FailCode);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2CLeaveRoomResponse other)
    {
        if (other == null)
        {
            return;
        }
        if (other.Success != false)
        {
            Success = other.Success;
        }
        if (other.FailCode != global::GlobalFailCode.NoneFailcode)
        {
            FailCode = other.FailCode;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        Success = input.ReadBool();
                        break;
                    }
                case 16:
                    {
                        FailCode = (global::GlobalFailCode)input.ReadEnum();
                        break;
                    }
            }
        }
    }

}

public sealed partial class S2CLeaveRoomNotification : pb::IMessage<S2CLeaveRoomNotification>
{
    private static readonly pb::MessageParser<S2CLeaveRoomNotification> _parser = new pb::MessageParser<S2CLeaveRoomNotification>(() => new S2CLeaveRoomNotification());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CLeaveRoomNotification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CLeaveRoomNotification()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CLeaveRoomNotification(S2CLeaveRoomNotification other) : this()
    {
        userId_ = other.userId_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CLeaveRoomNotification Clone()
    {
        return new S2CLeaveRoomNotification(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId
    {
        get { return userId_; }
        set
        {
            userId_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as S2CLeaveRoomNotification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2CLeaveRoomNotification other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (UserId != other.UserId) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (UserId != 0L) hash ^= UserId.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (UserId != 0L)
        {
            output.WriteRawTag(8);
            output.WriteInt64(UserId);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (UserId != 0L)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2CLeaveRoomNotification other)
    {
        if (other == null)
        {
            return;
        }
        if (other.UserId != 0L)
        {
            UserId = other.UserId;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        UserId = input.ReadInt64();
                        break;
                    }
            }
        }
    }

}

/// <summary>
/// 게임 시작 전 역할 및 캐릭터 셔플 요청
/// </summary>
public sealed partial class C2SGamePrepareRequest : pb::IMessage<C2SGamePrepareRequest>
{
    private static readonly pb::MessageParser<C2SGamePrepareRequest> _parser = new pb::MessageParser<C2SGamePrepareRequest>(() => new C2SGamePrepareRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SGamePrepareRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SGamePrepareRequest()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SGamePrepareRequest(C2SGamePrepareRequest other) : this()
    {
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SGamePrepareRequest Clone()
    {
        return new C2SGamePrepareRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as C2SGamePrepareRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2SGamePrepareRequest other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2SGamePrepareRequest other)
    {
        if (other == null)
        {
            return;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
            }
        }
    }

}

public sealed partial class S2CGamePrepareResponse : pb::IMessage<S2CGamePrepareResponse>
{
    private static readonly pb::MessageParser<S2CGamePrepareResponse> _parser = new pb::MessageParser<S2CGamePrepareResponse>(() => new S2CGamePrepareResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CGamePrepareResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CGamePrepareResponse()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CGamePrepareResponse(S2CGamePrepareResponse other) : this()
    {
        success_ = other.success_;
        failCode_ = other.failCode_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CGamePrepareResponse Clone()
    {
        return new S2CGamePrepareResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success
    {
        get { return success_; }
        set
        {
            success_ = value;
        }
    }

    /// <summary>Field number for the "failCode" field.</summary>
    public const int FailCodeFieldNumber = 2;
    private global::GlobalFailCode failCode_ = global::GlobalFailCode.NoneFailcode;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GlobalFailCode FailCode
    {
        get { return failCode_; }
        set
        {
            failCode_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as S2CGamePrepareResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2CGamePrepareResponse other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (Success != other.Success) return false;
        if (FailCode != other.FailCode) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (Success != false) hash ^= Success.GetHashCode();
        if (FailCode != global::GlobalFailCode.NoneFailcode) hash ^= FailCode.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (Success != false)
        {
            output.WriteRawTag(8);
            output.WriteBool(Success);
        }
        if (FailCode != global::GlobalFailCode.NoneFailcode)
        {
            output.WriteRawTag(16);
            output.WriteEnum((int)FailCode);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (Success != false)
        {
            size += 1 + 1;
        }
        if (FailCode != global::GlobalFailCode.NoneFailcode)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)FailCode);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2CGamePrepareResponse other)
    {
        if (other == null)
        {
            return;
        }
        if (other.Success != false)
        {
            Success = other.Success;
        }
        if (other.FailCode != global::GlobalFailCode.NoneFailcode)
        {
            FailCode = other.FailCode;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        Success = input.ReadBool();
                        break;
                    }
                case 16:
                    {
                        FailCode = (global::GlobalFailCode)input.ReadEnum();
                        break;
                    }
            }
        }
    }

}

public sealed partial class S2CGamePrepareNotification : pb::IMessage<S2CGamePrepareNotification>
{
    private static readonly pb::MessageParser<S2CGamePrepareNotification> _parser = new pb::MessageParser<S2CGamePrepareNotification>(() => new S2CGamePrepareNotification());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CGamePrepareNotification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CGamePrepareNotification()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CGamePrepareNotification(S2CGamePrepareNotification other) : this()
    {
        room_ = other.room_ != null ? other.room_.Clone() : null;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CGamePrepareNotification Clone()
    {
        return new S2CGamePrepareNotification(this);
    }

    /// <summary>Field number for the "room" field.</summary>
    public const int RoomFieldNumber = 1;
    private global::RoomData room_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RoomData Room
    {
        get { return room_; }
        set
        {
            room_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as S2CGamePrepareNotification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2CGamePrepareNotification other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (!object.Equals(Room, other.Room)) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (room_ != null) hash ^= Room.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (room_ != null)
        {
            output.WriteRawTag(10);
            output.WriteMessage(Room);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (room_ != null)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Room);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2CGamePrepareNotification other)
    {
        if (other == null)
        {
            return;
        }
        if (other.room_ != null)
        {
            if (room_ == null)
            {
                Room = new global::RoomData();
            }
            Room.MergeFrom(other.Room);
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        if (room_ == null)
                        {
                            Room = new global::RoomData();
                        }
                        input.ReadMessage(Room);
                        break;
                    }
            }
        }
    }

}

public sealed partial class C2SGameStartRequest : pb::IMessage<C2SGameStartRequest>
{
    private static readonly pb::MessageParser<C2SGameStartRequest> _parser = new pb::MessageParser<C2SGameStartRequest>(() => new C2SGameStartRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SGameStartRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SGameStartRequest()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SGameStartRequest(C2SGameStartRequest other) : this()
    {
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SGameStartRequest Clone()
    {
        return new C2SGameStartRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as C2SGameStartRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2SGameStartRequest other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2SGameStartRequest other)
    {
        if (other == null)
        {
            return;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
            }
        }
    }

}

public sealed partial class S2CGameStartResponse : pb::IMessage<S2CGameStartResponse>
{
    private static readonly pb::MessageParser<S2CGameStartResponse> _parser = new pb::MessageParser<S2CGameStartResponse>(() => new S2CGameStartResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CGameStartResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CGameStartResponse()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CGameStartResponse(S2CGameStartResponse other) : this()
    {
        success_ = other.success_;
        failCode_ = other.failCode_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CGameStartResponse Clone()
    {
        return new S2CGameStartResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success
    {
        get { return success_; }
        set
        {
            success_ = value;
        }
    }

    /// <summary>Field number for the "failCode" field.</summary>
    public const int FailCodeFieldNumber = 2;
    private global::GlobalFailCode failCode_ = global::GlobalFailCode.NoneFailcode;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GlobalFailCode FailCode
    {
        get { return failCode_; }
        set
        {
            failCode_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as S2CGameStartResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2CGameStartResponse other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (Success != other.Success) return false;
        if (FailCode != other.FailCode) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (Success != false) hash ^= Success.GetHashCode();
        if (FailCode != global::GlobalFailCode.NoneFailcode) hash ^= FailCode.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (Success != false)
        {
            output.WriteRawTag(8);
            output.WriteBool(Success);
        }
        if (FailCode != global::GlobalFailCode.NoneFailcode)
        {
            output.WriteRawTag(16);
            output.WriteEnum((int)FailCode);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (Success != false)
        {
            size += 1 + 1;
        }
        if (FailCode != global::GlobalFailCode.NoneFailcode)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)FailCode);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2CGameStartResponse other)
    {
        if (other == null)
        {
            return;
        }
        if (other.Success != false)
        {
            Success = other.Success;
        }
        if (other.FailCode != global::GlobalFailCode.NoneFailcode)
        {
            FailCode = other.FailCode;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        Success = input.ReadBool();
                        break;
                    }
                case 16:
                    {
                        FailCode = (global::GlobalFailCode)input.ReadEnum();
                        break;
                    }
            }
        }
    }

}

public sealed partial class S2CGameStartNotification : pb::IMessage<S2CGameStartNotification>
{
    private static readonly pb::MessageParser<S2CGameStartNotification> _parser = new pb::MessageParser<S2CGameStartNotification>(() => new S2CGameStartNotification());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CGameStartNotification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CGameStartNotification()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CGameStartNotification(S2CGameStartNotification other) : this()
    {
        gameState_ = other.gameState_ != null ? other.gameState_.Clone() : null;
        users_ = other.users_.Clone();
        characterPositions_ = other.characterPositions_.Clone();
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CGameStartNotification Clone()
    {
        return new S2CGameStartNotification(this);
    }

    /// <summary>Field number for the "gameState" field.</summary>
    public const int GameStateFieldNumber = 1;
    private global::GameStateData gameState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameStateData GameState
    {
        get { return gameState_; }
        set
        {
            gameState_ = value;
        }
    }

    /// <summary>Field number for the "users" field.</summary>
    public const int UsersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::UserData> _repeated_users_codec
        = pb::FieldCodec.ForMessage(18, global::UserData.Parser);
    private readonly pbc::RepeatedField<global::UserData> users_ = new pbc::RepeatedField<global::UserData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::UserData> Users
    {
        get { return users_; }
    }

    /// <summary>Field number for the "characterPositions" field.</summary>
    public const int CharacterPositionsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::CharacterPositionData> _repeated_characterPositions_codec
        = pb::FieldCodec.ForMessage(26, global::CharacterPositionData.Parser);
    private readonly pbc::RepeatedField<global::CharacterPositionData> characterPositions_ = new pbc::RepeatedField<global::CharacterPositionData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CharacterPositionData> CharacterPositions
    {
        get { return characterPositions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as S2CGameStartNotification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2CGameStartNotification other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (!object.Equals(GameState, other.GameState)) return false;
        if (!users_.Equals(other.users_)) return false;
        if (!characterPositions_.Equals(other.characterPositions_)) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (gameState_ != null) hash ^= GameState.GetHashCode();
        hash ^= users_.GetHashCode();
        hash ^= characterPositions_.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (gameState_ != null)
        {
            output.WriteRawTag(10);
            output.WriteMessage(GameState);
        }
        users_.WriteTo(output, _repeated_users_codec);
        characterPositions_.WriteTo(output, _repeated_characterPositions_codec);
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (gameState_ != null)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameState);
        }
        size += users_.CalculateSize(_repeated_users_codec);
        size += characterPositions_.CalculateSize(_repeated_characterPositions_codec);
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2CGameStartNotification other)
    {
        if (other == null)
        {
            return;
        }
        if (other.gameState_ != null)
        {
            if (gameState_ == null)
            {
                GameState = new global::GameStateData();
            }
            GameState.MergeFrom(other.GameState);
        }
        users_.Add(other.users_);
        characterPositions_.Add(other.characterPositions_);
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        if (gameState_ == null)
                        {
                            GameState = new global::GameStateData();
                        }
                        input.ReadMessage(GameState);
                        break;
                    }
                case 18:
                    {
                        users_.AddEntriesFrom(input, _repeated_users_codec);
                        break;
                    }
                case 26:
                    {
                        characterPositions_.AddEntriesFrom(input, _repeated_characterPositions_codec);
                        break;
                    }
            }
        }
    }

}

public sealed partial class C2SPositionUpdateRequest : pb::IMessage<C2SPositionUpdateRequest>
{
    private static readonly pb::MessageParser<C2SPositionUpdateRequest> _parser = new pb::MessageParser<C2SPositionUpdateRequest>(() => new C2SPositionUpdateRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SPositionUpdateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SPositionUpdateRequest()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SPositionUpdateRequest(C2SPositionUpdateRequest other) : this()
    {
        x_ = other.x_;
        y_ = other.y_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SPositionUpdateRequest Clone()
    {
        return new C2SPositionUpdateRequest(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private double x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double X
    {
        get { return x_; }
        set
        {
            x_ = value;
        }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private double y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Y
    {
        get { return y_; }
        set
        {
            y_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as C2SPositionUpdateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2SPositionUpdateRequest other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(X, other.X)) return false;
        if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Y, other.Y)) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (X != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(X);
        if (Y != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Y);
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (X != 0D)
        {
            output.WriteRawTag(9);
            output.WriteDouble(X);
        }
        if (Y != 0D)
        {
            output.WriteRawTag(17);
            output.WriteDouble(Y);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (X != 0D)
        {
            size += 1 + 8;
        }
        if (Y != 0D)
        {
            size += 1 + 8;
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2SPositionUpdateRequest other)
    {
        if (other == null)
        {
            return;
        }
        if (other.X != 0D)
        {
            X = other.X;
        }
        if (other.Y != 0D)
        {
            Y = other.Y;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 9:
                    {
                        X = input.ReadDouble();
                        break;
                    }
                case 17:
                    {
                        Y = input.ReadDouble();
                        break;
                    }
            }
        }
    }

}

public sealed partial class S2CPositionUpdateResponse : pb::IMessage<S2CPositionUpdateResponse>
{
    private static readonly pb::MessageParser<S2CPositionUpdateResponse> _parser = new pb::MessageParser<S2CPositionUpdateResponse>(() => new S2CPositionUpdateResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CPositionUpdateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CPositionUpdateResponse()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CPositionUpdateResponse(S2CPositionUpdateResponse other) : this()
    {
        success_ = other.success_;
        failCode_ = other.failCode_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CPositionUpdateResponse Clone()
    {
        return new S2CPositionUpdateResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success
    {
        get { return success_; }
        set
        {
            success_ = value;
        }
    }

    /// <summary>Field number for the "failCode" field.</summary>
    public const int FailCodeFieldNumber = 2;
    private global::GlobalFailCode failCode_ = global::GlobalFailCode.NoneFailcode;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GlobalFailCode FailCode
    {
        get { return failCode_; }
        set
        {
            failCode_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as S2CPositionUpdateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2CPositionUpdateResponse other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (Success != other.Success) return false;
        if (FailCode != other.FailCode) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (Success != false) hash ^= Success.GetHashCode();
        if (FailCode != global::GlobalFailCode.NoneFailcode) hash ^= FailCode.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (Success != false)
        {
            output.WriteRawTag(8);
            output.WriteBool(Success);
        }
        if (FailCode != global::GlobalFailCode.NoneFailcode)
        {
            output.WriteRawTag(16);
            output.WriteEnum((int)FailCode);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (Success != false)
        {
            size += 1 + 1;
        }
        if (FailCode != global::GlobalFailCode.NoneFailcode)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)FailCode);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2CPositionUpdateResponse other)
    {
        if (other == null)
        {
            return;
        }
        if (other.Success != false)
        {
            Success = other.Success;
        }
        if (other.FailCode != global::GlobalFailCode.NoneFailcode)
        {
            FailCode = other.FailCode;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        Success = input.ReadBool();
                        break;
                    }
                case 16:
                    {
                        FailCode = (global::GlobalFailCode)input.ReadEnum();
                        break;
                    }
            }
        }
    }

}

public sealed partial class S2CPositionUpdateNotification : pb::IMessage<S2CPositionUpdateNotification>
{
    private static readonly pb::MessageParser<S2CPositionUpdateNotification> _parser = new pb::MessageParser<S2CPositionUpdateNotification>(() => new S2CPositionUpdateNotification());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CPositionUpdateNotification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CPositionUpdateNotification()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CPositionUpdateNotification(S2CPositionUpdateNotification other) : this()
    {
        characterPositions_ = other.characterPositions_.Clone();
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CPositionUpdateNotification Clone()
    {
        return new S2CPositionUpdateNotification(this);
    }

    /// <summary>Field number for the "characterPositions" field.</summary>
    public const int CharacterPositionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::CharacterPositionData> _repeated_characterPositions_codec
        = pb::FieldCodec.ForMessage(10, global::CharacterPositionData.Parser);
    private readonly pbc::RepeatedField<global::CharacterPositionData> characterPositions_ = new pbc::RepeatedField<global::CharacterPositionData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CharacterPositionData> CharacterPositions
    {
        get { return characterPositions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as S2CPositionUpdateNotification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2CPositionUpdateNotification other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (!characterPositions_.Equals(other.characterPositions_)) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        hash ^= characterPositions_.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        characterPositions_.WriteTo(output, _repeated_characterPositions_codec);
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        size += characterPositions_.CalculateSize(_repeated_characterPositions_codec);
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2CPositionUpdateNotification other)
    {
        if (other == null)
        {
            return;
        }
        characterPositions_.Add(other.characterPositions_);
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        characterPositions_.AddEntriesFrom(input, _repeated_characterPositions_codec);
                        break;
                    }
            }
        }
    }

}

public sealed partial class C2SUseCardRequest : pb::IMessage<C2SUseCardRequest>
{
    private static readonly pb::MessageParser<C2SUseCardRequest> _parser = new pb::MessageParser<C2SUseCardRequest>(() => new C2SUseCardRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SUseCardRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SUseCardRequest()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SUseCardRequest(C2SUseCardRequest other) : this()
    {
        cardType_ = other.cardType_;
        targetUserId_ = other.targetUserId_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SUseCardRequest Clone()
    {
        return new C2SUseCardRequest(this);
    }

    /// <summary>Field number for the "cardType" field.</summary>
    public const int CardTypeFieldNumber = 1;
    private global::CardType cardType_ = global::CardType.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CardType CardType
    {
        get { return cardType_; }
        set
        {
            cardType_ = value;
        }
    }

    /// <summary>Field number for the "targetUserId" field.</summary>
    public const int TargetUserIdFieldNumber = 2;
    private long targetUserId_;
    /// <summary>
    /// 타겟 없으면 빈 값
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TargetUserId
    {
        get { return targetUserId_; }
        set
        {
            targetUserId_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as C2SUseCardRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2SUseCardRequest other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (CardType != other.CardType) return false;
        if (TargetUserId != other.TargetUserId) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (CardType != global::CardType.None) hash ^= CardType.GetHashCode();
        if (TargetUserId != 0L) hash ^= TargetUserId.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (CardType != global::CardType.None)
        {
            output.WriteRawTag(8);
            output.WriteEnum((int)CardType);
        }
        if (TargetUserId != 0L)
        {
            output.WriteRawTag(16);
            output.WriteInt64(TargetUserId);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (CardType != global::CardType.None)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)CardType);
        }
        if (TargetUserId != 0L)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetUserId);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2SUseCardRequest other)
    {
        if (other == null)
        {
            return;
        }
        if (other.CardType != global::CardType.None)
        {
            CardType = other.CardType;
        }
        if (other.TargetUserId != 0L)
        {
            TargetUserId = other.TargetUserId;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        CardType = (global::CardType)input.ReadEnum();
                        break;
                    }
                case 16:
                    {
                        TargetUserId = input.ReadInt64();
                        break;
                    }
            }
        }
    }

}

/// <summary>
/// 성공 여부만 반환하고 대상 유저 효과는 S2CUserUpdateNotification로 통지
/// </summary>
public sealed partial class S2CUseCardResponse : pb::IMessage<S2CUseCardResponse>
{
    private static readonly pb::MessageParser<S2CUseCardResponse> _parser = new pb::MessageParser<S2CUseCardResponse>(() => new S2CUseCardResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CUseCardResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CUseCardResponse()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CUseCardResponse(S2CUseCardResponse other) : this()
    {
        success_ = other.success_;
        failCode_ = other.failCode_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CUseCardResponse Clone()
    {
        return new S2CUseCardResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success
    {
        get { return success_; }
        set
        {
            success_ = value;
        }
    }

    /// <summary>Field number for the "failCode" field.</summary>
    public const int FailCodeFieldNumber = 2;
    private global::GlobalFailCode failCode_ = global::GlobalFailCode.NoneFailcode;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GlobalFailCode FailCode
    {
        get { return failCode_; }
        set
        {
            failCode_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as S2CUseCardResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2CUseCardResponse other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (Success != other.Success) return false;
        if (FailCode != other.FailCode) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (Success != false) hash ^= Success.GetHashCode();
        if (FailCode != global::GlobalFailCode.NoneFailcode) hash ^= FailCode.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (Success != false)
        {
            output.WriteRawTag(8);
            output.WriteBool(Success);
        }
        if (FailCode != global::GlobalFailCode.NoneFailcode)
        {
            output.WriteRawTag(16);
            output.WriteEnum((int)FailCode);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (Success != false)
        {
            size += 1 + 1;
        }
        if (FailCode != global::GlobalFailCode.NoneFailcode)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)FailCode);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2CUseCardResponse other)
    {
        if (other == null)
        {
            return;
        }
        if (other.Success != false)
        {
            Success = other.Success;
        }
        if (other.FailCode != global::GlobalFailCode.NoneFailcode)
        {
            FailCode = other.FailCode;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        Success = input.ReadBool();
                        break;
                    }
                case 16:
                    {
                        FailCode = (global::GlobalFailCode)input.ReadEnum();
                        break;
                    }
            }
        }
    }

}

public sealed partial class S2CUseCardNotification : pb::IMessage<S2CUseCardNotification>
{
    private static readonly pb::MessageParser<S2CUseCardNotification> _parser = new pb::MessageParser<S2CUseCardNotification>(() => new S2CUseCardNotification());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CUseCardNotification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CUseCardNotification()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CUseCardNotification(S2CUseCardNotification other) : this()
    {
        cardType_ = other.cardType_;
        userId_ = other.userId_;
        targetUserId_ = other.targetUserId_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CUseCardNotification Clone()
    {
        return new S2CUseCardNotification(this);
    }

    /// <summary>Field number for the "cardType" field.</summary>
    public const int CardTypeFieldNumber = 1;
    private global::CardType cardType_ = global::CardType.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CardType CardType
    {
        get { return cardType_; }
        set
        {
            cardType_ = value;
        }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private long userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId
    {
        get { return userId_; }
        set
        {
            userId_ = value;
        }
    }

    /// <summary>Field number for the "targetUserId" field.</summary>
    public const int TargetUserIdFieldNumber = 3;
    private long targetUserId_;
    /// <summary>
    /// 타겟 없으면 빈 값
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TargetUserId
    {
        get { return targetUserId_; }
        set
        {
            targetUserId_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as S2CUseCardNotification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2CUseCardNotification other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (CardType != other.CardType) return false;
        if (UserId != other.UserId) return false;
        if (TargetUserId != other.TargetUserId) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (CardType != global::CardType.None) hash ^= CardType.GetHashCode();
        if (UserId != 0L) hash ^= UserId.GetHashCode();
        if (TargetUserId != 0L) hash ^= TargetUserId.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (CardType != global::CardType.None)
        {
            output.WriteRawTag(8);
            output.WriteEnum((int)CardType);
        }
        if (UserId != 0L)
        {
            output.WriteRawTag(16);
            output.WriteInt64(UserId);
        }
        if (TargetUserId != 0L)
        {
            output.WriteRawTag(24);
            output.WriteInt64(TargetUserId);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (CardType != global::CardType.None)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)CardType);
        }
        if (UserId != 0L)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
        }
        if (TargetUserId != 0L)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetUserId);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2CUseCardNotification other)
    {
        if (other == null)
        {
            return;
        }
        if (other.CardType != global::CardType.None)
        {
            CardType = other.CardType;
        }
        if (other.UserId != 0L)
        {
            UserId = other.UserId;
        }
        if (other.TargetUserId != 0L)
        {
            TargetUserId = other.TargetUserId;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        CardType = (global::CardType)input.ReadEnum();
                        break;
                    }
                case 16:
                    {
                        UserId = input.ReadInt64();
                        break;
                    }
                case 24:
                    {
                        TargetUserId = input.ReadInt64();
                        break;
                    }
            }
        }
    }

}

public sealed partial class S2CEquipCardNotification : pb::IMessage<S2CEquipCardNotification>
{
    private static readonly pb::MessageParser<S2CEquipCardNotification> _parser = new pb::MessageParser<S2CEquipCardNotification>(() => new S2CEquipCardNotification());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CEquipCardNotification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CEquipCardNotification()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CEquipCardNotification(S2CEquipCardNotification other) : this()
    {
        cardType_ = other.cardType_;
        userId_ = other.userId_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CEquipCardNotification Clone()
    {
        return new S2CEquipCardNotification(this);
    }

    /// <summary>Field number for the "cardType" field.</summary>
    public const int CardTypeFieldNumber = 1;
    private global::CardType cardType_ = global::CardType.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CardType CardType
    {
        get { return cardType_; }
        set
        {
            cardType_ = value;
        }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private long userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId
    {
        get { return userId_; }
        set
        {
            userId_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as S2CEquipCardNotification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2CEquipCardNotification other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (CardType != other.CardType) return false;
        if (UserId != other.UserId) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (CardType != global::CardType.None) hash ^= CardType.GetHashCode();
        if (UserId != 0L) hash ^= UserId.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (CardType != global::CardType.None)
        {
            output.WriteRawTag(8);
            output.WriteEnum((int)CardType);
        }
        if (UserId != 0L)
        {
            output.WriteRawTag(16);
            output.WriteInt64(UserId);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (CardType != global::CardType.None)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)CardType);
        }
        if (UserId != 0L)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2CEquipCardNotification other)
    {
        if (other == null)
        {
            return;
        }
        if (other.CardType != global::CardType.None)
        {
            CardType = other.CardType;
        }
        if (other.UserId != 0L)
        {
            UserId = other.UserId;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        CardType = (global::CardType)input.ReadEnum();
                        break;
                    }
                case 16:
                    {
                        UserId = input.ReadInt64();
                        break;
                    }
            }
        }
    }

}

public sealed partial class S2CCardEffectNotification : pb::IMessage<S2CCardEffectNotification>
{
    private static readonly pb::MessageParser<S2CCardEffectNotification> _parser = new pb::MessageParser<S2CCardEffectNotification>(() => new S2CCardEffectNotification());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CCardEffectNotification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CCardEffectNotification()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CCardEffectNotification(S2CCardEffectNotification other) : this()
    {
        cardType_ = other.cardType_;
        userId_ = other.userId_;
        success_ = other.success_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CCardEffectNotification Clone()
    {
        return new S2CCardEffectNotification(this);
    }

    /// <summary>Field number for the "cardType" field.</summary>
    public const int CardTypeFieldNumber = 1;
    private global::CardType cardType_ = global::CardType.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CardType CardType
    {
        get { return cardType_; }
        set
        {
            cardType_ = value;
        }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private long userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId
    {
        get { return userId_; }
        set
        {
            userId_ = value;
        }
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 3;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success
    {
        get { return success_; }
        set
        {
            success_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as S2CCardEffectNotification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2CCardEffectNotification other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (CardType != other.CardType) return false;
        if (UserId != other.UserId) return false;
        if (Success != other.Success) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (CardType != global::CardType.None) hash ^= CardType.GetHashCode();
        if (UserId != 0L) hash ^= UserId.GetHashCode();
        if (Success != false) hash ^= Success.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (CardType != global::CardType.None)
        {
            output.WriteRawTag(8);
            output.WriteEnum((int)CardType);
        }
        if (UserId != 0L)
        {
            output.WriteRawTag(16);
            output.WriteInt64(UserId);
        }
        if (Success != false)
        {
            output.WriteRawTag(24);
            output.WriteBool(Success);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (CardType != global::CardType.None)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)CardType);
        }
        if (UserId != 0L)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
        }
        if (Success != false)
        {
            size += 1 + 1;
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2CCardEffectNotification other)
    {
        if (other == null)
        {
            return;
        }
        if (other.CardType != global::CardType.None)
        {
            CardType = other.CardType;
        }
        if (other.UserId != 0L)
        {
            UserId = other.UserId;
        }
        if (other.Success != false)
        {
            Success = other.Success;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        CardType = (global::CardType)input.ReadEnum();
                        break;
                    }
                case 16:
                    {
                        UserId = input.ReadInt64();
                        break;
                    }
                case 24:
                    {
                        Success = input.ReadBool();
                        break;
                    }
            }
        }
    }

}

public sealed partial class S2CFleaMarketNotification : pb::IMessage<S2CFleaMarketNotification>
{
    private static readonly pb::MessageParser<S2CFleaMarketNotification> _parser = new pb::MessageParser<S2CFleaMarketNotification>(() => new S2CFleaMarketNotification());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CFleaMarketNotification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CFleaMarketNotification()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CFleaMarketNotification(S2CFleaMarketNotification other) : this()
    {
        cardTypes_ = other.cardTypes_.Clone();
        pickIndex_ = other.pickIndex_.Clone();
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CFleaMarketNotification Clone()
    {
        return new S2CFleaMarketNotification(this);
    }

    /// <summary>Field number for the "cardTypes" field.</summary>
    public const int CardTypesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::CardType> _repeated_cardTypes_codec
        = pb::FieldCodec.ForEnum(10, x => (int)x, x => (global::CardType)x);
    private readonly pbc::RepeatedField<global::CardType> cardTypes_ = new pbc::RepeatedField<global::CardType>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CardType> CardTypes
    {
        get { return cardTypes_; }
    }

    /// <summary>Field number for the "pickIndex" field.</summary>
    public const int PickIndexFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_pickIndex_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> pickIndex_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PickIndex
    {
        get { return pickIndex_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as S2CFleaMarketNotification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2CFleaMarketNotification other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (!cardTypes_.Equals(other.cardTypes_)) return false;
        if (!pickIndex_.Equals(other.pickIndex_)) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        hash ^= cardTypes_.GetHashCode();
        hash ^= pickIndex_.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        cardTypes_.WriteTo(output, _repeated_cardTypes_codec);
        pickIndex_.WriteTo(output, _repeated_pickIndex_codec);
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        size += cardTypes_.CalculateSize(_repeated_cardTypes_codec);
        size += pickIndex_.CalculateSize(_repeated_pickIndex_codec);
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2CFleaMarketNotification other)
    {
        if (other == null)
        {
            return;
        }
        cardTypes_.Add(other.cardTypes_);
        pickIndex_.Add(other.pickIndex_);
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                case 8:
                    {
                        cardTypes_.AddEntriesFrom(input, _repeated_cardTypes_codec);
                        break;
                    }
                case 18:
                case 16:
                    {
                        pickIndex_.AddEntriesFrom(input, _repeated_pickIndex_codec);
                        break;
                    }
            }
        }
    }

}

public sealed partial class C2SFleaMarketPickRequest : pb::IMessage<C2SFleaMarketPickRequest>
{
    private static readonly pb::MessageParser<C2SFleaMarketPickRequest> _parser = new pb::MessageParser<C2SFleaMarketPickRequest>(() => new C2SFleaMarketPickRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SFleaMarketPickRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SFleaMarketPickRequest()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SFleaMarketPickRequest(C2SFleaMarketPickRequest other) : this()
    {
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SFleaMarketPickRequest Clone()
    {
        return new C2SFleaMarketPickRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as C2SFleaMarketPickRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2SFleaMarketPickRequest other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2SFleaMarketPickRequest other)
    {
        if (other == null)
        {
            return;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
            }
        }
    }

}

public sealed partial class C2SFleaMarketCardPickRequest : pb::IMessage<C2SFleaMarketCardPickRequest>
{
    private static readonly pb::MessageParser<C2SFleaMarketCardPickRequest> _parser = new pb::MessageParser<C2SFleaMarketCardPickRequest>(() => new C2SFleaMarketCardPickRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SFleaMarketCardPickRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SFleaMarketCardPickRequest()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SFleaMarketCardPickRequest(C2SFleaMarketCardPickRequest other) : this()
    {
        pickIndex_ = other.pickIndex_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SFleaMarketCardPickRequest Clone()
    {
        return new C2SFleaMarketCardPickRequest(this);
    }

    /// <summary>Field number for the "pickIndex" field.</summary>
    public const int PickIndexFieldNumber = 1;
    private int pickIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PickIndex
    {
        get { return pickIndex_; }
        set
        {
            pickIndex_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as C2SFleaMarketCardPickRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2SFleaMarketCardPickRequest other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (PickIndex != other.PickIndex) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (PickIndex != 0) hash ^= PickIndex.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (PickIndex != 0)
        {
            output.WriteRawTag(8);
            output.WriteInt32(PickIndex);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (PickIndex != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PickIndex);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2SFleaMarketCardPickRequest other)
    {
        if (other == null)
        {
            return;
        }
        if (other.PickIndex != 0)
        {
            PickIndex = other.PickIndex;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        PickIndex = input.ReadInt32();
                        break;
                    }
            }
        }
    }

}

public sealed partial class S2CFleaMarketPickResponse : pb::IMessage<S2CFleaMarketPickResponse>
{
    private static readonly pb::MessageParser<S2CFleaMarketPickResponse> _parser = new pb::MessageParser<S2CFleaMarketPickResponse>(() => new S2CFleaMarketPickResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CFleaMarketPickResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CFleaMarketPickResponse()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CFleaMarketPickResponse(S2CFleaMarketPickResponse other) : this()
    {
        fleaMarketCardTypes_ = other.fleaMarketCardTypes_.Clone();
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CFleaMarketPickResponse Clone()
    {
        return new S2CFleaMarketPickResponse(this);
    }

    /// <summary>Field number for the "fleaMarketCardTypes" field.</summary>
    public const int FleaMarketCardTypesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::CardType> _repeated_fleaMarketCardTypes_codec
        = pb::FieldCodec.ForEnum(10, x => (int)x, x => (global::CardType)x);
    private readonly pbc::RepeatedField<global::CardType> fleaMarketCardTypes_ = new pbc::RepeatedField<global::CardType>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CardType> FleaMarketCardTypes
    {
        get { return fleaMarketCardTypes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as S2CFleaMarketPickResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2CFleaMarketPickResponse other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (!fleaMarketCardTypes_.Equals(other.fleaMarketCardTypes_)) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        hash ^= fleaMarketCardTypes_.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        fleaMarketCardTypes_.WriteTo(output, _repeated_fleaMarketCardTypes_codec);
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        size += fleaMarketCardTypes_.CalculateSize(_repeated_fleaMarketCardTypes_codec);
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2CFleaMarketPickResponse other)
    {
        if (other == null)
        {
            return;
        }
        fleaMarketCardTypes_.Add(other.fleaMarketCardTypes_);
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                case 8:
                    {
                        fleaMarketCardTypes_.AddEntriesFrom(input, _repeated_fleaMarketCardTypes_codec);
                        break;
                    }
            }
        }
    }

}

public sealed partial class S2CFleaMarketCardPickResponse : pb::IMessage<S2CFleaMarketCardPickResponse>
{
    private static readonly pb::MessageParser<S2CFleaMarketCardPickResponse> _parser = new pb::MessageParser<S2CFleaMarketCardPickResponse>(() => new S2CFleaMarketCardPickResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CFleaMarketCardPickResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CFleaMarketCardPickResponse()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CFleaMarketCardPickResponse(S2CFleaMarketCardPickResponse other) : this()
    {
        userId_ = other.userId_;
        handCards_ = other.handCards_.Clone();
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CFleaMarketCardPickResponse Clone()
    {
        return new S2CFleaMarketCardPickResponse(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId
    {
        get { return userId_; }
        set
        {
            userId_ = value;
        }
    }

    /// <summary>Field number for the "handCards" field.</summary>
    public const int HandCardsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::CardData> _repeated_handCards_codec
        = pb::FieldCodec.ForMessage(18, global::CardData.Parser);
    private readonly pbc::RepeatedField<global::CardData> handCards_ = new pbc::RepeatedField<global::CardData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CardData> HandCards
    {
        get { return handCards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as S2CFleaMarketCardPickResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2CFleaMarketCardPickResponse other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (UserId != other.UserId) return false;
        if (!handCards_.Equals(other.handCards_)) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (UserId != 0L) hash ^= UserId.GetHashCode();
        hash ^= handCards_.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (UserId != 0L)
        {
            output.WriteRawTag(8);
            output.WriteInt64(UserId);
        }
        handCards_.WriteTo(output, _repeated_handCards_codec);
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (UserId != 0L)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
        }
        size += handCards_.CalculateSize(_repeated_handCards_codec);
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2CFleaMarketCardPickResponse other)
    {
        if (other == null)
        {
            return;
        }
        if (other.UserId != 0L)
        {
            UserId = other.UserId;
        }
        handCards_.Add(other.handCards_);
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        UserId = input.ReadInt64();
                        break;
                    }
                case 18:
                    {
                        handCards_.AddEntriesFrom(input, _repeated_handCards_codec);
                        break;
                    }
            }
        }
    }

}

public sealed partial class S2CUserUpdateNotification : pb::IMessage<S2CUserUpdateNotification>
{
    private static readonly pb::MessageParser<S2CUserUpdateNotification> _parser = new pb::MessageParser<S2CUserUpdateNotification>(() => new S2CUserUpdateNotification());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CUserUpdateNotification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CUserUpdateNotification()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CUserUpdateNotification(S2CUserUpdateNotification other) : this()
    {
        user_ = other.user_.Clone();
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CUserUpdateNotification Clone()
    {
        return new S2CUserUpdateNotification(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private static readonly pb::FieldCodec<global::UserData> _repeated_user_codec
        = pb::FieldCodec.ForMessage(10, global::UserData.Parser);
    private readonly pbc::RepeatedField<global::UserData> user_ = new pbc::RepeatedField<global::UserData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::UserData> User
    {
        get { return user_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as S2CUserUpdateNotification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2CUserUpdateNotification other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (!user_.Equals(other.user_)) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        hash ^= user_.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        user_.WriteTo(output, _repeated_user_codec);
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        size += user_.CalculateSize(_repeated_user_codec);
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2CUserUpdateNotification other)
    {
        if (other == null)
        {
            return;
        }
        user_.Add(other.user_);
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        user_.AddEntriesFrom(input, _repeated_user_codec);
                        break;
                    }
            }
        }
    }

}

public sealed partial class S2CPhaseUpdateNotification : pb::IMessage<S2CPhaseUpdateNotification>
{
    private static readonly pb::MessageParser<S2CPhaseUpdateNotification> _parser = new pb::MessageParser<S2CPhaseUpdateNotification>(() => new S2CPhaseUpdateNotification());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CPhaseUpdateNotification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CPhaseUpdateNotification()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CPhaseUpdateNotification(S2CPhaseUpdateNotification other) : this()
    {
        phaseType_ = other.phaseType_;
        nextPhaseAt_ = other.nextPhaseAt_;
        characterPositions_ = other.characterPositions_.Clone();
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CPhaseUpdateNotification Clone()
    {
        return new S2CPhaseUpdateNotification(this);
    }

    /// <summary>Field number for the "phaseType" field.</summary>
    public const int PhaseTypeFieldNumber = 1;
    private global::PhaseType phaseType_ = global::PhaseType.NonePhase;
    /// <summary>
    /// DAY 1, EVENING 2, END 3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PhaseType PhaseType
    {
        get { return phaseType_; }
        set
        {
            phaseType_ = value;
        }
    }

    /// <summary>Field number for the "nextPhaseAt" field.</summary>
    public const int NextPhaseAtFieldNumber = 2;
    private long nextPhaseAt_;
    /// <summary>
    /// 다음 페이즈 시작 시점(밀리초 타임스탬프)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NextPhaseAt
    {
        get { return nextPhaseAt_; }
        set
        {
            nextPhaseAt_ = value;
        }
    }

    /// <summary>Field number for the "characterPositions" field.</summary>
    public const int CharacterPositionsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::CharacterPositionData> _repeated_characterPositions_codec
        = pb::FieldCodec.ForMessage(26, global::CharacterPositionData.Parser);
    private readonly pbc::RepeatedField<global::CharacterPositionData> characterPositions_ = new pbc::RepeatedField<global::CharacterPositionData>();
    /// <summary>
    /// 변경된 캐릭터 위치
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CharacterPositionData> CharacterPositions
    {
        get { return characterPositions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as S2CPhaseUpdateNotification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2CPhaseUpdateNotification other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (PhaseType != other.PhaseType) return false;
        if (NextPhaseAt != other.NextPhaseAt) return false;
        if (!characterPositions_.Equals(other.characterPositions_)) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (PhaseType != global::PhaseType.NonePhase) hash ^= PhaseType.GetHashCode();
        if (NextPhaseAt != 0L) hash ^= NextPhaseAt.GetHashCode();
        hash ^= characterPositions_.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (PhaseType != global::PhaseType.NonePhase)
        {
            output.WriteRawTag(8);
            output.WriteEnum((int)PhaseType);
        }
        if (NextPhaseAt != 0L)
        {
            output.WriteRawTag(16);
            output.WriteInt64(NextPhaseAt);
        }
        characterPositions_.WriteTo(output, _repeated_characterPositions_codec);
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (PhaseType != global::PhaseType.NonePhase)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)PhaseType);
        }
        if (NextPhaseAt != 0L)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(NextPhaseAt);
        }
        size += characterPositions_.CalculateSize(_repeated_characterPositions_codec);
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2CPhaseUpdateNotification other)
    {
        if (other == null)
        {
            return;
        }
        if (other.PhaseType != global::PhaseType.NonePhase)
        {
            PhaseType = other.PhaseType;
        }
        if (other.NextPhaseAt != 0L)
        {
            NextPhaseAt = other.NextPhaseAt;
        }
        characterPositions_.Add(other.characterPositions_);
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        PhaseType = (global::PhaseType)input.ReadEnum();
                        break;
                    }
                case 16:
                    {
                        NextPhaseAt = input.ReadInt64();
                        break;
                    }
                case 26:
                    {
                        characterPositions_.AddEntriesFrom(input, _repeated_characterPositions_codec);
                        break;
                    }
            }
        }
    }

}

public sealed partial class C2SReactionRequest : pb::IMessage<C2SReactionRequest>
{
    private static readonly pb::MessageParser<C2SReactionRequest> _parser = new pb::MessageParser<C2SReactionRequest>(() => new C2SReactionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SReactionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SReactionRequest()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SReactionRequest(C2SReactionRequest other) : this()
    {
        reactionType_ = other.reactionType_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SReactionRequest Clone()
    {
        return new C2SReactionRequest(this);
    }

    /// <summary>Field number for the "reactionType" field.</summary>
    public const int ReactionTypeFieldNumber = 1;
    private global::ReactionType reactionType_ = global::ReactionType.NoneReaction;
    /// <summary>
    /// NOT_USE_CARD = 1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ReactionType ReactionType
    {
        get { return reactionType_; }
        set
        {
            reactionType_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as C2SReactionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2SReactionRequest other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (ReactionType != other.ReactionType) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (ReactionType != global::ReactionType.NoneReaction) hash ^= ReactionType.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (ReactionType != global::ReactionType.NoneReaction)
        {
            output.WriteRawTag(8);
            output.WriteEnum((int)ReactionType);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (ReactionType != global::ReactionType.NoneReaction)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ReactionType);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2SReactionRequest other)
    {
        if (other == null)
        {
            return;
        }
        if (other.ReactionType != global::ReactionType.NoneReaction)
        {
            ReactionType = other.ReactionType;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        ReactionType = (global::ReactionType)input.ReadEnum();
                        break;
                    }
            }
        }
    }

}

public sealed partial class S2CReactionResponse : pb::IMessage<S2CReactionResponse>
{
    private static readonly pb::MessageParser<S2CReactionResponse> _parser = new pb::MessageParser<S2CReactionResponse>(() => new S2CReactionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CReactionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CReactionResponse()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CReactionResponse(S2CReactionResponse other) : this()
    {
        success_ = other.success_;
        failCode_ = other.failCode_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CReactionResponse Clone()
    {
        return new S2CReactionResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success
    {
        get { return success_; }
        set
        {
            success_ = value;
        }
    }

    /// <summary>Field number for the "failCode" field.</summary>
    public const int FailCodeFieldNumber = 2;
    private global::GlobalFailCode failCode_ = global::GlobalFailCode.NoneFailcode;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GlobalFailCode FailCode
    {
        get { return failCode_; }
        set
        {
            failCode_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as S2CReactionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2CReactionResponse other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (Success != other.Success) return false;
        if (FailCode != other.FailCode) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (Success != false) hash ^= Success.GetHashCode();
        if (FailCode != global::GlobalFailCode.NoneFailcode) hash ^= FailCode.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (Success != false)
        {
            output.WriteRawTag(8);
            output.WriteBool(Success);
        }
        if (FailCode != global::GlobalFailCode.NoneFailcode)
        {
            output.WriteRawTag(16);
            output.WriteEnum((int)FailCode);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (Success != false)
        {
            size += 1 + 1;
        }
        if (FailCode != global::GlobalFailCode.NoneFailcode)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)FailCode);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2CReactionResponse other)
    {
        if (other == null)
        {
            return;
        }
        if (other.Success != false)
        {
            Success = other.Success;
        }
        if (other.FailCode != global::GlobalFailCode.NoneFailcode)
        {
            FailCode = other.FailCode;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        Success = input.ReadBool();
                        break;
                    }
                case 16:
                    {
                        FailCode = (global::GlobalFailCode)input.ReadEnum();
                        break;
                    }
            }
        }
    }

}

public sealed partial class C2SDestroyCardRequest : pb::IMessage<C2SDestroyCardRequest>
{
    private static readonly pb::MessageParser<C2SDestroyCardRequest> _parser = new pb::MessageParser<C2SDestroyCardRequest>(() => new C2SDestroyCardRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SDestroyCardRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SDestroyCardRequest()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SDestroyCardRequest(C2SDestroyCardRequest other) : this()
    {
        destroyCards_ = other.destroyCards_.Clone();
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SDestroyCardRequest Clone()
    {
        return new C2SDestroyCardRequest(this);
    }

    /// <summary>Field number for the "destroyCards" field.</summary>
    public const int DestroyCardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::CardData> _repeated_destroyCards_codec
        = pb::FieldCodec.ForMessage(10, global::CardData.Parser);
    private readonly pbc::RepeatedField<global::CardData> destroyCards_ = new pbc::RepeatedField<global::CardData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CardData> DestroyCards
    {
        get { return destroyCards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as C2SDestroyCardRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2SDestroyCardRequest other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (!destroyCards_.Equals(other.destroyCards_)) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        hash ^= destroyCards_.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        destroyCards_.WriteTo(output, _repeated_destroyCards_codec);
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        size += destroyCards_.CalculateSize(_repeated_destroyCards_codec);
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2SDestroyCardRequest other)
    {
        if (other == null)
        {
            return;
        }
        destroyCards_.Add(other.destroyCards_);
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        destroyCards_.AddEntriesFrom(input, _repeated_destroyCards_codec);
                        break;
                    }
            }
        }
    }

}

public sealed partial class S2CDestroyCardResponse : pb::IMessage<S2CDestroyCardResponse>
{
    private static readonly pb::MessageParser<S2CDestroyCardResponse> _parser = new pb::MessageParser<S2CDestroyCardResponse>(() => new S2CDestroyCardResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CDestroyCardResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CDestroyCardResponse()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CDestroyCardResponse(S2CDestroyCardResponse other) : this()
    {
        handCards_ = other.handCards_.Clone();
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CDestroyCardResponse Clone()
    {
        return new S2CDestroyCardResponse(this);
    }

    /// <summary>Field number for the "handCards" field.</summary>
    public const int HandCardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::CardData> _repeated_handCards_codec
        = pb::FieldCodec.ForMessage(10, global::CardData.Parser);
    private readonly pbc::RepeatedField<global::CardData> handCards_ = new pbc::RepeatedField<global::CardData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CardData> HandCards
    {
        get { return handCards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as S2CDestroyCardResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2CDestroyCardResponse other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (!handCards_.Equals(other.handCards_)) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        hash ^= handCards_.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        handCards_.WriteTo(output, _repeated_handCards_codec);
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        size += handCards_.CalculateSize(_repeated_handCards_codec);
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2CDestroyCardResponse other)
    {
        if (other == null)
        {
            return;
        }
        handCards_.Add(other.handCards_);
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        handCards_.AddEntriesFrom(input, _repeated_handCards_codec);
                        break;
                    }
            }
        }
    }

}

public sealed partial class S2CGameEndNotification : pb::IMessage<S2CGameEndNotification>
{
    private static readonly pb::MessageParser<S2CGameEndNotification> _parser = new pb::MessageParser<S2CGameEndNotification>(() => new S2CGameEndNotification());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CGameEndNotification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CGameEndNotification()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CGameEndNotification(S2CGameEndNotification other) : this()
    {
        winners_ = other.winners_.Clone();
        winType_ = other.winType_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CGameEndNotification Clone()
    {
        return new S2CGameEndNotification(this);
    }

    /// <summary>Field number for the "winners" field.</summary>
    public const int WinnersFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_winners_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> winners_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Winners
    {
        get { return winners_; }
    }

    /// <summary>Field number for the "winType" field.</summary>
    public const int WinTypeFieldNumber = 2;
    private global::WinType winType_ = global::WinType.TargetAndBodyguardWin;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WinType WinType
    {
        get { return winType_; }
        set
        {
            winType_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as S2CGameEndNotification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2CGameEndNotification other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (!winners_.Equals(other.winners_)) return false;
        if (WinType != other.WinType) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        hash ^= winners_.GetHashCode();
        if (WinType != global::WinType.TargetAndBodyguardWin) hash ^= WinType.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        winners_.WriteTo(output, _repeated_winners_codec);
        if (WinType != global::WinType.TargetAndBodyguardWin)
        {
            output.WriteRawTag(16);
            output.WriteEnum((int)WinType);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        size += winners_.CalculateSize(_repeated_winners_codec);
        if (WinType != global::WinType.TargetAndBodyguardWin)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)WinType);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2CGameEndNotification other)
    {
        if (other == null)
        {
            return;
        }
        winners_.Add(other.winners_);
        if (other.WinType != global::WinType.TargetAndBodyguardWin)
        {
            WinType = other.WinType;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                case 8:
                    {
                        winners_.AddEntriesFrom(input, _repeated_winners_codec);
                        break;
                    }
                case 16:
                    {
                        WinType = (global::WinType)input.ReadEnum();
                        break;
                    }
            }
        }
    }

}

public sealed partial class C2SCardSelectRequest : pb::IMessage<C2SCardSelectRequest>
{
    private static readonly pb::MessageParser<C2SCardSelectRequest> _parser = new pb::MessageParser<C2SCardSelectRequest>(() => new C2SCardSelectRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SCardSelectRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SCardSelectRequest()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SCardSelectRequest(C2SCardSelectRequest other) : this()
    {
        selectType_ = other.selectType_;
        selectCardType_ = other.selectCardType_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SCardSelectRequest Clone()
    {
        return new C2SCardSelectRequest(this);
    }

    /// <summary>Field number for the "selectType" field.</summary>
    public const int SelectTypeFieldNumber = 1;
    private global::SelectCardType selectType_ = global::SelectCardType.Hand;
    /// <summary>
    /// 0: 핸드, 1: 장비, 2: 무기, 3: 디버프
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SelectCardType SelectType
    {
        get { return selectType_; }
        set
        {
            selectType_ = value;
        }
    }

    /// <summary>Field number for the "selectCardType" field.</summary>
    public const int SelectCardTypeFieldNumber = 2;
    private global::CardType selectCardType_ = global::CardType.None;
    /// <summary>
    /// selectType이  0일 경우 0, / 1, 2, 3일 경우 원하는 장비의 cardType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CardType SelectCardType
    {
        get { return selectCardType_; }
        set
        {
            selectCardType_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as C2SCardSelectRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2SCardSelectRequest other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (SelectType != other.SelectType) return false;
        if (SelectCardType != other.SelectCardType) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (SelectType != global::SelectCardType.Hand) hash ^= SelectType.GetHashCode();
        if (SelectCardType != global::CardType.None) hash ^= SelectCardType.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (SelectType != global::SelectCardType.Hand)
        {
            output.WriteRawTag(8);
            output.WriteEnum((int)SelectType);
        }
        if (SelectCardType != global::CardType.None)
        {
            output.WriteRawTag(16);
            output.WriteEnum((int)SelectCardType);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (SelectType != global::SelectCardType.Hand)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)SelectType);
        }
        if (SelectCardType != global::CardType.None)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)SelectCardType);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2SCardSelectRequest other)
    {
        if (other == null)
        {
            return;
        }
        if (other.SelectType != global::SelectCardType.Hand)
        {
            SelectType = other.SelectType;
        }
        if (other.SelectCardType != global::CardType.None)
        {
            SelectCardType = other.SelectCardType;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        SelectType = (global::SelectCardType)input.ReadEnum();
                        break;
                    }
                case 16:
                    {
                        SelectCardType = (global::CardType)input.ReadEnum();
                        break;
                    }
            }
        }
    }

}

public sealed partial class S2CCardSelectResponse : pb::IMessage<S2CCardSelectResponse>
{
    private static readonly pb::MessageParser<S2CCardSelectResponse> _parser = new pb::MessageParser<S2CCardSelectResponse>(() => new S2CCardSelectResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CCardSelectResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CCardSelectResponse()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CCardSelectResponse(S2CCardSelectResponse other) : this()
    {
        success_ = other.success_;
        failCode_ = other.failCode_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CCardSelectResponse Clone()
    {
        return new S2CCardSelectResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success
    {
        get { return success_; }
        set
        {
            success_ = value;
        }
    }

    /// <summary>Field number for the "failCode" field.</summary>
    public const int FailCodeFieldNumber = 2;
    private global::GlobalFailCode failCode_ = global::GlobalFailCode.NoneFailcode;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GlobalFailCode FailCode
    {
        get { return failCode_; }
        set
        {
            failCode_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as S2CCardSelectResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2CCardSelectResponse other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (Success != other.Success) return false;
        if (FailCode != other.FailCode) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (Success != false) hash ^= Success.GetHashCode();
        if (FailCode != global::GlobalFailCode.NoneFailcode) hash ^= FailCode.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (Success != false)
        {
            output.WriteRawTag(8);
            output.WriteBool(Success);
        }
        if (FailCode != global::GlobalFailCode.NoneFailcode)
        {
            output.WriteRawTag(16);
            output.WriteEnum((int)FailCode);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (Success != false)
        {
            size += 1 + 1;
        }
        if (FailCode != global::GlobalFailCode.NoneFailcode)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)FailCode);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2CCardSelectResponse other)
    {
        if (other == null)
        {
            return;
        }
        if (other.Success != false)
        {
            Success = other.Success;
        }
        if (other.FailCode != global::GlobalFailCode.NoneFailcode)
        {
            FailCode = other.FailCode;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        Success = input.ReadBool();
                        break;
                    }
                case 16:
                    {
                        FailCode = (global::GlobalFailCode)input.ReadEnum();
                        break;
                    }
            }
        }
    }

}

public sealed partial class C2SPassDebuffRequest : pb::IMessage<C2SPassDebuffRequest>
{
    private static readonly pb::MessageParser<C2SPassDebuffRequest> _parser = new pb::MessageParser<C2SPassDebuffRequest>(() => new C2SPassDebuffRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SPassDebuffRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SPassDebuffRequest()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SPassDebuffRequest(C2SPassDebuffRequest other) : this()
    {
        targetUserId_ = other.targetUserId_;
        debuffCardType_ = other.debuffCardType_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SPassDebuffRequest Clone()
    {
        return new C2SPassDebuffRequest(this);
    }

    /// <summary>Field number for the "targetUserId" field.</summary>
    public const int TargetUserIdFieldNumber = 1;
    private long targetUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TargetUserId
    {
        get { return targetUserId_; }
        set
        {
            targetUserId_ = value;
        }
    }

    /// <summary>Field number for the "debuffCardType" field.</summary>
    public const int DebuffCardTypeFieldNumber = 2;
    private global::CardType debuffCardType_ = global::CardType.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CardType DebuffCardType
    {
        get { return debuffCardType_; }
        set
        {
            debuffCardType_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as C2SPassDebuffRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2SPassDebuffRequest other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (TargetUserId != other.TargetUserId) return false;
        if (DebuffCardType != other.DebuffCardType) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (TargetUserId != 0L) hash ^= TargetUserId.GetHashCode();
        if (DebuffCardType != global::CardType.None) hash ^= DebuffCardType.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (TargetUserId != 0L)
        {
            output.WriteRawTag(8);
            output.WriteInt64(TargetUserId);
        }
        if (DebuffCardType != global::CardType.None)
        {
            output.WriteRawTag(16);
            output.WriteEnum((int)DebuffCardType);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (TargetUserId != 0L)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetUserId);
        }
        if (DebuffCardType != global::CardType.None)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)DebuffCardType);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2SPassDebuffRequest other)
    {
        if (other == null)
        {
            return;
        }
        if (other.TargetUserId != 0L)
        {
            TargetUserId = other.TargetUserId;
        }
        if (other.DebuffCardType != global::CardType.None)
        {
            DebuffCardType = other.DebuffCardType;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        TargetUserId = input.ReadInt64();
                        break;
                    }
                case 16:
                    {
                        DebuffCardType = (global::CardType)input.ReadEnum();
                        break;
                    }
            }
        }
    }

}

public sealed partial class S2CPassDebuffResponse : pb::IMessage<S2CPassDebuffResponse>
{
    private static readonly pb::MessageParser<S2CPassDebuffResponse> _parser = new pb::MessageParser<S2CPassDebuffResponse>(() => new S2CPassDebuffResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CPassDebuffResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CPassDebuffResponse()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CPassDebuffResponse(S2CPassDebuffResponse other) : this()
    {
        success_ = other.success_;
        failCode_ = other.failCode_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CPassDebuffResponse Clone()
    {
        return new S2CPassDebuffResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success
    {
        get { return success_; }
        set
        {
            success_ = value;
        }
    }

    /// <summary>Field number for the "failCode" field.</summary>
    public const int FailCodeFieldNumber = 2;
    private global::GlobalFailCode failCode_ = global::GlobalFailCode.NoneFailcode;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GlobalFailCode FailCode
    {
        get { return failCode_; }
        set
        {
            failCode_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as S2CPassDebuffResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2CPassDebuffResponse other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (Success != other.Success) return false;
        if (FailCode != other.FailCode) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (Success != false) hash ^= Success.GetHashCode();
        if (FailCode != global::GlobalFailCode.NoneFailcode) hash ^= FailCode.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (Success != false)
        {
            output.WriteRawTag(8);
            output.WriteBool(Success);
        }
        if (FailCode != global::GlobalFailCode.NoneFailcode)
        {
            output.WriteRawTag(16);
            output.WriteEnum((int)FailCode);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (Success != false)
        {
            size += 1 + 1;
        }
        if (FailCode != global::GlobalFailCode.NoneFailcode)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)FailCode);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2CPassDebuffResponse other)
    {
        if (other == null)
        {
            return;
        }
        if (other.Success != false)
        {
            Success = other.Success;
        }
        if (other.FailCode != global::GlobalFailCode.NoneFailcode)
        {
            FailCode = other.FailCode;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        Success = input.ReadBool();
                        break;
                    }
                case 16:
                    {
                        FailCode = (global::GlobalFailCode)input.ReadEnum();
                        break;
                    }
            }
        }
    }

}

public sealed partial class S2CWarningNotification : pb::IMessage<S2CWarningNotification>
{
    private static readonly pb::MessageParser<S2CWarningNotification> _parser = new pb::MessageParser<S2CWarningNotification>(() => new S2CWarningNotification());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CWarningNotification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CWarningNotification()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CWarningNotification(S2CWarningNotification other) : this()
    {
        warningType_ = other.warningType_;
        expectedAt_ = other.expectedAt_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CWarningNotification Clone()
    {
        return new S2CWarningNotification(this);
    }

    /// <summary>Field number for the "warningType" field.</summary>
    public const int WarningTypeFieldNumber = 1;
    private global::WarningType warningType_ = global::WarningType.NoWarning;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WarningType WarningType
    {
        get { return warningType_; }
        set
        {
            warningType_ = value;
        }
    }

    /// <summary>Field number for the "expectedAt" field.</summary>
    public const int ExpectedAtFieldNumber = 2;
    private long expectedAt_;
    /// <summary>
    /// 밀리초 타임스탬프
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpectedAt
    {
        get { return expectedAt_; }
        set
        {
            expectedAt_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as S2CWarningNotification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2CWarningNotification other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (WarningType != other.WarningType) return false;
        if (ExpectedAt != other.ExpectedAt) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (WarningType != global::WarningType.NoWarning) hash ^= WarningType.GetHashCode();
        if (ExpectedAt != 0L) hash ^= ExpectedAt.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (WarningType != global::WarningType.NoWarning)
        {
            output.WriteRawTag(8);
            output.WriteEnum((int)WarningType);
        }
        if (ExpectedAt != 0L)
        {
            output.WriteRawTag(16);
            output.WriteInt64(ExpectedAt);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (WarningType != global::WarningType.NoWarning)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)WarningType);
        }
        if (ExpectedAt != 0L)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpectedAt);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2CWarningNotification other)
    {
        if (other == null)
        {
            return;
        }
        if (other.WarningType != global::WarningType.NoWarning)
        {
            WarningType = other.WarningType;
        }
        if (other.ExpectedAt != 0L)
        {
            ExpectedAt = other.ExpectedAt;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        WarningType = (global::WarningType)input.ReadEnum();
                        break;
                    }
                case 16:
                    {
                        ExpectedAt = input.ReadInt64();
                        break;
                    }
            }
        }
    }

}

public sealed partial class S2CAnimationNotification : pb::IMessage<S2CAnimationNotification>
{
    private static readonly pb::MessageParser<S2CAnimationNotification> _parser = new pb::MessageParser<S2CAnimationNotification>(() => new S2CAnimationNotification());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CAnimationNotification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CAnimationNotification()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CAnimationNotification(S2CAnimationNotification other) : this()
    {
        userId_ = other.userId_;
        animationType_ = other.animationType_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CAnimationNotification Clone()
    {
        return new S2CAnimationNotification(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId
    {
        get { return userId_; }
        set
        {
            userId_ = value;
        }
    }

    /// <summary>Field number for the "animationType" field.</summary>
    public const int AnimationTypeFieldNumber = 2;
    private global::AnimationType animationType_ = global::AnimationType.NoAnimation;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AnimationType AnimationType
    {
        get { return animationType_; }
        set
        {
            animationType_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as S2CAnimationNotification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2CAnimationNotification other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (UserId != other.UserId) return false;
        if (AnimationType != other.AnimationType) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (UserId != 0L) hash ^= UserId.GetHashCode();
        if (AnimationType != global::AnimationType.NoAnimation) hash ^= AnimationType.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (UserId != 0L)
        {
            output.WriteRawTag(8);
            output.WriteInt64(UserId);
        }
        if (AnimationType != global::AnimationType.NoAnimation)
        {
            output.WriteRawTag(16);
            output.WriteEnum((int)AnimationType);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (UserId != 0L)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
        }
        if (AnimationType != global::AnimationType.NoAnimation)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)AnimationType);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2CAnimationNotification other)
    {
        if (other == null)
        {
            return;
        }
        if (other.UserId != 0L)
        {
            UserId = other.UserId;
        }
        if (other.AnimationType != global::AnimationType.NoAnimation)
        {
            AnimationType = other.AnimationType;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        UserId = input.ReadInt64();
                        break;
                    }
                case 16:
                    {
                        AnimationType = (global::AnimationType)input.ReadEnum();
                        break;
                    }
            }
        }
    }

}

public sealed partial class C2SMonsterDeathRewardRequest : pb::IMessage<C2SMonsterDeathRewardRequest>
{
    private static readonly pb::MessageParser<C2SMonsterDeathRewardRequest> _parser = new pb::MessageParser<C2SMonsterDeathRewardRequest>(() => new C2SMonsterDeathRewardRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SMonsterDeathRewardRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SMonsterDeathRewardRequest()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SMonsterDeathRewardRequest(C2SMonsterDeathRewardRequest other) : this()
    {
        user_ = other.user_ != null ? other.user_.Clone() : null;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SMonsterDeathRewardRequest Clone()
    {
        return new C2SMonsterDeathRewardRequest(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::UserData user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::UserData User
    {
        get { return user_; }
        set
        {
            user_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as C2SMonsterDeathRewardRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2SMonsterDeathRewardRequest other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (!object.Equals(User, other.User)) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (user_ != null) hash ^= User.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (user_ != null)
        {
            output.WriteRawTag(10);
            output.WriteMessage(User);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (user_ != null)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2SMonsterDeathRewardRequest other)
    {
        if (other == null)
        {
            return;
        }
        if (other.user_ != null)
        {
            if (user_ == null)
            {
                User = new global::UserData();
            }
            User.MergeFrom(other.User);
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        if (user_ == null)
                        {
                            User = new global::UserData();
                        }
                        input.ReadMessage(User);
                        break;
                    }
            }
        }
    }

}

public sealed partial class S2CMonsterDeathRewardResponse : pb::IMessage<S2CMonsterDeathRewardResponse>
{
    private static readonly pb::MessageParser<S2CMonsterDeathRewardResponse> _parser = new pb::MessageParser<S2CMonsterDeathRewardResponse>(() => new S2CMonsterDeathRewardResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CMonsterDeathRewardResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CMonsterDeathRewardResponse()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CMonsterDeathRewardResponse(S2CMonsterDeathRewardResponse other) : this()
    {
        success_ = other.success_;
        failCode_ = other.failCode_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CMonsterDeathRewardResponse Clone()
    {
        return new S2CMonsterDeathRewardResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success
    {
        get { return success_; }
        set
        {
            success_ = value;
        }
    }

    /// <summary>Field number for the "failCode" field.</summary>
    public const int FailCodeFieldNumber = 2;
    private global::GlobalFailCode failCode_ = global::GlobalFailCode.NoneFailcode;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GlobalFailCode FailCode
    {
        get { return failCode_; }
        set
        {
            failCode_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as S2CMonsterDeathRewardResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2CMonsterDeathRewardResponse other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (Success != other.Success) return false;
        if (FailCode != other.FailCode) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (Success != false) hash ^= Success.GetHashCode();
        if (FailCode != global::GlobalFailCode.NoneFailcode) hash ^= FailCode.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (Success != false)
        {
            output.WriteRawTag(8);
            output.WriteBool(Success);
        }
        if (FailCode != global::GlobalFailCode.NoneFailcode)
        {
            output.WriteRawTag(16);
            output.WriteEnum((int)FailCode);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (Success != false)
        {
            size += 1 + 1;
        }
        if (FailCode != global::GlobalFailCode.NoneFailcode)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)FailCode);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2CMonsterDeathRewardResponse other)
    {
        if (other == null)
        {
            return;
        }
        if (other.Success != false)
        {
            Success = other.Success;
        }
        if (other.FailCode != global::GlobalFailCode.NoneFailcode)
        {
            FailCode = other.FailCode;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        Success = input.ReadBool();
                        break;
                    }
                case 16:
                    {
                        FailCode = (global::GlobalFailCode)input.ReadEnum();
                        break;
                    }
            }
        }
    }

}

/// <summary>
/// 최상위 GamePacket 메시지
/// </summary>
public sealed partial class GamePacket : pb::IMessage<GamePacket>
{
    private static readonly pb::MessageParser<GamePacket> _parser = new pb::MessageParser<GamePacket>(() => new GamePacket());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GamePacket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::ProtocolReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GamePacket()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GamePacket(GamePacket other) : this()
    {
        switch (other.PayloadCase)
        {
            case PayloadOneofCase.RegisterRequest:
                RegisterRequest = other.RegisterRequest.Clone();
                break;
            case PayloadOneofCase.RegisterResponse:
                RegisterResponse = other.RegisterResponse.Clone();
                break;
            case PayloadOneofCase.LoginRequest:
                LoginRequest = other.LoginRequest.Clone();
                break;
            case PayloadOneofCase.LoginResponse:
                LoginResponse = other.LoginResponse.Clone();
                break;
            case PayloadOneofCase.CreateRoomRequest:
                CreateRoomRequest = other.CreateRoomRequest.Clone();
                break;
            case PayloadOneofCase.CreateRoomResponse:
                CreateRoomResponse = other.CreateRoomResponse.Clone();
                break;
            case PayloadOneofCase.GetRoomListRequest:
                GetRoomListRequest = other.GetRoomListRequest.Clone();
                break;
            case PayloadOneofCase.GetRoomListResponse:
                GetRoomListResponse = other.GetRoomListResponse.Clone();
                break;
            case PayloadOneofCase.JoinRoomRequest:
                JoinRoomRequest = other.JoinRoomRequest.Clone();
                break;
            case PayloadOneofCase.JoinRoomResponse:
                JoinRoomResponse = other.JoinRoomResponse.Clone();
                break;
            case PayloadOneofCase.JoinRandomRoomRequest:
                JoinRandomRoomRequest = other.JoinRandomRoomRequest.Clone();
                break;
            case PayloadOneofCase.JoinRandomRoomResponse:
                JoinRandomRoomResponse = other.JoinRandomRoomResponse.Clone();
                break;
            case PayloadOneofCase.JoinRoomNotification:
                JoinRoomNotification = other.JoinRoomNotification.Clone();
                break;
            case PayloadOneofCase.LeaveRoomRequest:
                LeaveRoomRequest = other.LeaveRoomRequest.Clone();
                break;
            case PayloadOneofCase.LeaveRoomResponse:
                LeaveRoomResponse = other.LeaveRoomResponse.Clone();
                break;
            case PayloadOneofCase.LeaveRoomNotification:
                LeaveRoomNotification = other.LeaveRoomNotification.Clone();
                break;
            case PayloadOneofCase.GamePrepareRequest:
                GamePrepareRequest = other.GamePrepareRequest.Clone();
                break;
            case PayloadOneofCase.GamePrepareResponse:
                GamePrepareResponse = other.GamePrepareResponse.Clone();
                break;
            case PayloadOneofCase.GamePrepareNotification:
                GamePrepareNotification = other.GamePrepareNotification.Clone();
                break;
            case PayloadOneofCase.GameStartRequest:
                GameStartRequest = other.GameStartRequest.Clone();
                break;
            case PayloadOneofCase.GameStartResponse:
                GameStartResponse = other.GameStartResponse.Clone();
                break;
            case PayloadOneofCase.GameStartNotification:
                GameStartNotification = other.GameStartNotification.Clone();
                break;
            case PayloadOneofCase.PositionUpdateRequest:
                PositionUpdateRequest = other.PositionUpdateRequest.Clone();
                break;
            case PayloadOneofCase.PositionUpdateNotification:
                PositionUpdateNotification = other.PositionUpdateNotification.Clone();
                break;
            case PayloadOneofCase.UseCardRequest:
                UseCardRequest = other.UseCardRequest.Clone();
                break;
            case PayloadOneofCase.UseCardResponse:
                UseCardResponse = other.UseCardResponse.Clone();
                break;
            case PayloadOneofCase.UseCardNotification:
                UseCardNotification = other.UseCardNotification.Clone();
                break;
            case PayloadOneofCase.EquipCardNotification:
                EquipCardNotification = other.EquipCardNotification.Clone();
                break;
            case PayloadOneofCase.CardEffectNotification:
                CardEffectNotification = other.CardEffectNotification.Clone();
                break;
            case PayloadOneofCase.FleaMarketNotification:
                FleaMarketNotification = other.FleaMarketNotification.Clone();
                break;
            case PayloadOneofCase.FleaMarketPickRequest:
                FleaMarketPickRequest = other.FleaMarketPickRequest.Clone();
                break;
            case PayloadOneofCase.FleaMarketPickResponse:
                FleaMarketPickResponse = other.FleaMarketPickResponse.Clone();
                break;
            case PayloadOneofCase.FleMarketCardPickRequest:
                FleMarketCardPickRequest = other.FleMarketCardPickRequest.Clone();
                break;
            case PayloadOneofCase.FleMarketCardPickResponse:
                FleMarketCardPickResponse = other.FleMarketCardPickResponse.Clone();
                break;
            case PayloadOneofCase.UserUpdateNotification:
                UserUpdateNotification = other.UserUpdateNotification.Clone();
                break;
            case PayloadOneofCase.PhaseUpdateNotification:
                PhaseUpdateNotification = other.PhaseUpdateNotification.Clone();
                break;
            case PayloadOneofCase.ReactionRequest:
                ReactionRequest = other.ReactionRequest.Clone();
                break;
            case PayloadOneofCase.ReactionResponse:
                ReactionResponse = other.ReactionResponse.Clone();
                break;
            case PayloadOneofCase.DestroyCardRequest:
                DestroyCardRequest = other.DestroyCardRequest.Clone();
                break;
            case PayloadOneofCase.DestroyCardResponse:
                DestroyCardResponse = other.DestroyCardResponse.Clone();
                break;
            case PayloadOneofCase.GameEndNotification:
                GameEndNotification = other.GameEndNotification.Clone();
                break;
            case PayloadOneofCase.CardSelectRequest:
                CardSelectRequest = other.CardSelectRequest.Clone();
                break;
            case PayloadOneofCase.CardSelectResponse:
                CardSelectResponse = other.CardSelectResponse.Clone();
                break;
            case PayloadOneofCase.PassDebuffRequest:
                PassDebuffRequest = other.PassDebuffRequest.Clone();
                break;
            case PayloadOneofCase.PassDebuffResponse:
                PassDebuffResponse = other.PassDebuffResponse.Clone();
                break;
            case PayloadOneofCase.WarningNotification:
                WarningNotification = other.WarningNotification.Clone();
                break;
            case PayloadOneofCase.AnimationNotification:
                AnimationNotification = other.AnimationNotification.Clone();
                break;
            case PayloadOneofCase.MonsterDeathRewardRequest:
                MonsterDeathRewardRequest = other.MonsterDeathRewardRequest.Clone();
                break;
            case PayloadOneofCase.MonsterDeathRewardResponse:
                MonsterDeathRewardResponse = other.MonsterDeathRewardResponse.Clone();
                break;
        }

        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GamePacket Clone()
    {
        return new GamePacket(this);
    }

    /// <summary>Field number for the "registerRequest" field.</summary>
    public const int RegisterRequestFieldNumber = 1;
    /// <summary>
    /// 회원가입 및 로그인
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::C2SRegisterRequest RegisterRequest
    {
        get { return payloadCase_ == PayloadOneofCase.RegisterRequest ? (global::C2SRegisterRequest)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.RegisterRequest;
        }
    }

    /// <summary>Field number for the "registerResponse" field.</summary>
    public const int RegisterResponseFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::S2CRegisterResponse RegisterResponse
    {
        get { return payloadCase_ == PayloadOneofCase.RegisterResponse ? (global::S2CRegisterResponse)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.RegisterResponse;
        }
    }

    /// <summary>Field number for the "loginRequest" field.</summary>
    public const int LoginRequestFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::C2SLoginRequest LoginRequest
    {
        get { return payloadCase_ == PayloadOneofCase.LoginRequest ? (global::C2SLoginRequest)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.LoginRequest;
        }
    }

    /// <summary>Field number for the "loginResponse" field.</summary>
    public const int LoginResponseFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::S2CLoginResponse LoginResponse
    {
        get { return payloadCase_ == PayloadOneofCase.LoginResponse ? (global::S2CLoginResponse)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.LoginResponse;
        }
    }

    /// <summary>Field number for the "createRoomRequest" field.</summary>
    public const int CreateRoomRequestFieldNumber = 5;
    /// <summary>
    /// 방 생성
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::C2SCreateRoomRequest CreateRoomRequest
    {
        get { return payloadCase_ == PayloadOneofCase.CreateRoomRequest ? (global::C2SCreateRoomRequest)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.CreateRoomRequest;
        }
    }

    /// <summary>Field number for the "createRoomResponse" field.</summary>
    public const int CreateRoomResponseFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::S2CCreateRoomResponse CreateRoomResponse
    {
        get { return payloadCase_ == PayloadOneofCase.CreateRoomResponse ? (global::S2CCreateRoomResponse)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.CreateRoomResponse;
        }
    }

    /// <summary>Field number for the "getRoomListRequest" field.</summary>
    public const int GetRoomListRequestFieldNumber = 7;
    /// <summary>
    /// 방 목록 조회
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::C2SGetRoomListRequest GetRoomListRequest
    {
        get { return payloadCase_ == PayloadOneofCase.GetRoomListRequest ? (global::C2SGetRoomListRequest)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GetRoomListRequest;
        }
    }

    /// <summary>Field number for the "getRoomListResponse" field.</summary>
    public const int GetRoomListResponseFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::S2CGetRoomListResponse GetRoomListResponse
    {
        get { return payloadCase_ == PayloadOneofCase.GetRoomListResponse ? (global::S2CGetRoomListResponse)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GetRoomListResponse;
        }
    }

    /// <summary>Field number for the "joinRoomRequest" field.</summary>
    public const int JoinRoomRequestFieldNumber = 9;
    /// <summary>
    /// 방 참가
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::C2SJoinRoomRequest JoinRoomRequest
    {
        get { return payloadCase_ == PayloadOneofCase.JoinRoomRequest ? (global::C2SJoinRoomRequest)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.JoinRoomRequest;
        }
    }

    /// <summary>Field number for the "joinRoomResponse" field.</summary>
    public const int JoinRoomResponseFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::S2CJoinRoomResponse JoinRoomResponse
    {
        get { return payloadCase_ == PayloadOneofCase.JoinRoomResponse ? (global::S2CJoinRoomResponse)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.JoinRoomResponse;
        }
    }

    /// <summary>Field number for the "joinRandomRoomRequest" field.</summary>
    public const int JoinRandomRoomRequestFieldNumber = 11;
    /// <summary>
    /// 랜덤 방 참가
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::C2SJoinRandomRoomRequest JoinRandomRoomRequest
    {
        get { return payloadCase_ == PayloadOneofCase.JoinRandomRoomRequest ? (global::C2SJoinRandomRoomRequest)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.JoinRandomRoomRequest;
        }
    }

    /// <summary>Field number for the "joinRandomRoomResponse" field.</summary>
    public const int JoinRandomRoomResponseFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::S2CJoinRandomRoomResponse JoinRandomRoomResponse
    {
        get { return payloadCase_ == PayloadOneofCase.JoinRandomRoomResponse ? (global::S2CJoinRandomRoomResponse)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.JoinRandomRoomResponse;
        }
    }

    /// <summary>Field number for the "joinRoomNotification" field.</summary>
    public const int JoinRoomNotificationFieldNumber = 13;
    /// <summary>
    /// 방 참가 알림
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::S2CJoinRoomNotification JoinRoomNotification
    {
        get { return payloadCase_ == PayloadOneofCase.JoinRoomNotification ? (global::S2CJoinRoomNotification)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.JoinRoomNotification;
        }
    }

    /// <summary>Field number for the "leaveRoomRequest" field.</summary>
    public const int LeaveRoomRequestFieldNumber = 14;
    /// <summary>
    /// 방 나가기
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::C2SLeaveRoomRequest LeaveRoomRequest
    {
        get { return payloadCase_ == PayloadOneofCase.LeaveRoomRequest ? (global::C2SLeaveRoomRequest)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.LeaveRoomRequest;
        }
    }

    /// <summary>Field number for the "leaveRoomResponse" field.</summary>
    public const int LeaveRoomResponseFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::S2CLeaveRoomResponse LeaveRoomResponse
    {
        get { return payloadCase_ == PayloadOneofCase.LeaveRoomResponse ? (global::S2CLeaveRoomResponse)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.LeaveRoomResponse;
        }
    }

    /// <summary>Field number for the "leaveRoomNotification" field.</summary>
    public const int LeaveRoomNotificationFieldNumber = 16;
    /// <summary>
    /// 방 나가기 알림
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::S2CLeaveRoomNotification LeaveRoomNotification
    {
        get { return payloadCase_ == PayloadOneofCase.LeaveRoomNotification ? (global::S2CLeaveRoomNotification)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.LeaveRoomNotification;
        }
    }

    /// <summary>Field number for the "gamePrepareRequest" field.</summary>
    public const int GamePrepareRequestFieldNumber = 17;
    /// <summary>
    /// 게임 시작 전 역할 및 캐릭터 셔플 요청
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::C2SGamePrepareRequest GamePrepareRequest
    {
        get { return payloadCase_ == PayloadOneofCase.GamePrepareRequest ? (global::C2SGamePrepareRequest)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GamePrepareRequest;
        }
    }

    /// <summary>Field number for the "gamePrepareResponse" field.</summary>
    public const int GamePrepareResponseFieldNumber = 18;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::S2CGamePrepareResponse GamePrepareResponse
    {
        get { return payloadCase_ == PayloadOneofCase.GamePrepareResponse ? (global::S2CGamePrepareResponse)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GamePrepareResponse;
        }
    }

    /// <summary>Field number for the "gamePrepareNotification" field.</summary>
    public const int GamePrepareNotificationFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::S2CGamePrepareNotification GamePrepareNotification
    {
        get { return payloadCase_ == PayloadOneofCase.GamePrepareNotification ? (global::S2CGamePrepareNotification)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GamePrepareNotification;
        }
    }

    /// <summary>Field number for the "gameStartRequest" field.</summary>
    public const int GameStartRequestFieldNumber = 20;
    /// <summary>
    /// 게임 시작
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::C2SGameStartRequest GameStartRequest
    {
        get { return payloadCase_ == PayloadOneofCase.GameStartRequest ? (global::C2SGameStartRequest)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GameStartRequest;
        }
    }

    /// <summary>Field number for the "gameStartResponse" field.</summary>
    public const int GameStartResponseFieldNumber = 21;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::S2CGameStartResponse GameStartResponse
    {
        get { return payloadCase_ == PayloadOneofCase.GameStartResponse ? (global::S2CGameStartResponse)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GameStartResponse;
        }
    }

    /// <summary>Field number for the "gameStartNotification" field.</summary>
    public const int GameStartNotificationFieldNumber = 22;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::S2CGameStartNotification GameStartNotification
    {
        get { return payloadCase_ == PayloadOneofCase.GameStartNotification ? (global::S2CGameStartNotification)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GameStartNotification;
        }
    }

    /// <summary>Field number for the "positionUpdateRequest" field.</summary>
    public const int PositionUpdateRequestFieldNumber = 23;
    /// <summary>
    /// 위치 업데이트
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::C2SPositionUpdateRequest PositionUpdateRequest
    {
        get { return payloadCase_ == PayloadOneofCase.PositionUpdateRequest ? (global::C2SPositionUpdateRequest)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.PositionUpdateRequest;
        }
    }

    /// <summary>Field number for the "positionUpdateNotification" field.</summary>
    public const int PositionUpdateNotificationFieldNumber = 24;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::S2CPositionUpdateNotification PositionUpdateNotification
    {
        get { return payloadCase_ == PayloadOneofCase.PositionUpdateNotification ? (global::S2CPositionUpdateNotification)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.PositionUpdateNotification;
        }
    }

    /// <summary>Field number for the "useCardRequest" field.</summary>
    public const int UseCardRequestFieldNumber = 25;
    /// <summary>
    /// 카드 사용
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::C2SUseCardRequest UseCardRequest
    {
        get { return payloadCase_ == PayloadOneofCase.UseCardRequest ? (global::C2SUseCardRequest)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.UseCardRequest;
        }
    }

    /// <summary>Field number for the "useCardResponse" field.</summary>
    public const int UseCardResponseFieldNumber = 26;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::S2CUseCardResponse UseCardResponse
    {
        get { return payloadCase_ == PayloadOneofCase.UseCardResponse ? (global::S2CUseCardResponse)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.UseCardResponse;
        }
    }

    /// <summary>Field number for the "useCardNotification" field.</summary>
    public const int UseCardNotificationFieldNumber = 27;
    /// <summary>
    /// 카드 효과 알림
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::S2CUseCardNotification UseCardNotification
    {
        get { return payloadCase_ == PayloadOneofCase.UseCardNotification ? (global::S2CUseCardNotification)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.UseCardNotification;
        }
    }

    /// <summary>Field number for the "equipCardNotification" field.</summary>
    public const int EquipCardNotificationFieldNumber = 28;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::S2CEquipCardNotification EquipCardNotification
    {
        get { return payloadCase_ == PayloadOneofCase.EquipCardNotification ? (global::S2CEquipCardNotification)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.EquipCardNotification;
        }
    }

    /// <summary>Field number for the "cardEffectNotification" field.</summary>
    public const int CardEffectNotificationFieldNumber = 29;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::S2CCardEffectNotification CardEffectNotification
    {
        get { return payloadCase_ == PayloadOneofCase.CardEffectNotification ? (global::S2CCardEffectNotification)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.CardEffectNotification;
        }
    }

    /// <summary>Field number for the "fleaMarketNotification" field.</summary>
    public const int FleaMarketNotificationFieldNumber = 30;
    /// <summary>
    /// 플리마켓
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::S2CFleaMarketNotification FleaMarketNotification
    {
        get { return payloadCase_ == PayloadOneofCase.FleaMarketNotification ? (global::S2CFleaMarketNotification)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.FleaMarketNotification;
        }
    }

    /// <summary>Field number for the "fleaMarketPickRequest" field.</summary>
    public const int FleaMarketPickRequestFieldNumber = 31;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::C2SFleaMarketPickRequest FleaMarketPickRequest
    {
        get { return payloadCase_ == PayloadOneofCase.FleaMarketPickRequest ? (global::C2SFleaMarketPickRequest)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.FleaMarketPickRequest;
        }
    }

    /// <summary>Field number for the "fleaMarketPickResponse" field.</summary>
    public const int FleaMarketPickResponseFieldNumber = 32;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::S2CFleaMarketPickResponse FleaMarketPickResponse
    {
        get { return payloadCase_ == PayloadOneofCase.FleaMarketPickResponse ? (global::S2CFleaMarketPickResponse)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.FleaMarketPickResponse;
        }
    }

    /// <summary>Field number for the "fleMarketCardPickRequest" field.</summary>
    public const int FleMarketCardPickRequestFieldNumber = 33;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::C2SFleaMarketCardPickRequest FleMarketCardPickRequest
    {
        get { return payloadCase_ == PayloadOneofCase.FleMarketCardPickRequest ? (global::C2SFleaMarketCardPickRequest)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.FleMarketCardPickRequest;
        }
    }

    /// <summary>Field number for the "fleMarketCardPickResponse" field.</summary>
    public const int FleMarketCardPickResponseFieldNumber = 34;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::S2CFleaMarketCardPickResponse FleMarketCardPickResponse
    {
        get { return payloadCase_ == PayloadOneofCase.FleMarketCardPickResponse ? (global::S2CFleaMarketCardPickResponse)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.FleMarketCardPickResponse;
        }
    }

    /// <summary>Field number for the "userUpdateNotification" field.</summary>
    public const int UserUpdateNotificationFieldNumber = 35;
    /// <summary>
    /// 카드 사용 등으로 인한 유저 정보 업데이트
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::S2CUserUpdateNotification UserUpdateNotification
    {
        get { return payloadCase_ == PayloadOneofCase.UserUpdateNotification ? (global::S2CUserUpdateNotification)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.UserUpdateNotification;
        }
    }

    /// <summary>Field number for the "phaseUpdateNotification" field.</summary>
    public const int PhaseUpdateNotificationFieldNumber = 36;
    /// <summary>
    /// 페이즈 업데이트
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::S2CPhaseUpdateNotification PhaseUpdateNotification
    {
        get { return payloadCase_ == PayloadOneofCase.PhaseUpdateNotification ? (global::S2CPhaseUpdateNotification)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.PhaseUpdateNotification;
        }
    }

    /// <summary>Field number for the "reactionRequest" field.</summary>
    public const int ReactionRequestFieldNumber = 37;
    /// <summary>
    /// 리액션
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::C2SReactionRequest ReactionRequest
    {
        get { return payloadCase_ == PayloadOneofCase.ReactionRequest ? (global::C2SReactionRequest)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.ReactionRequest;
        }
    }

    /// <summary>Field number for the "reactionResponse" field.</summary>
    public const int ReactionResponseFieldNumber = 38;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::S2CReactionResponse ReactionResponse
    {
        get { return payloadCase_ == PayloadOneofCase.ReactionResponse ? (global::S2CReactionResponse)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.ReactionResponse;
        }
    }

    /// <summary>Field number for the "destroyCardRequest" field.</summary>
    public const int DestroyCardRequestFieldNumber = 39;
    /// <summary>
    /// 턴 종료시 (phaseType 3) 카드 버리기
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::C2SDestroyCardRequest DestroyCardRequest
    {
        get { return payloadCase_ == PayloadOneofCase.DestroyCardRequest ? (global::C2SDestroyCardRequest)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DestroyCardRequest;
        }
    }

    /// <summary>Field number for the "destroyCardResponse" field.</summary>
    public const int DestroyCardResponseFieldNumber = 40;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::S2CDestroyCardResponse DestroyCardResponse
    {
        get { return payloadCase_ == PayloadOneofCase.DestroyCardResponse ? (global::S2CDestroyCardResponse)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DestroyCardResponse;
        }
    }

    /// <summary>Field number for the "gameEndNotification" field.</summary>
    public const int GameEndNotificationFieldNumber = 41;
    /// <summary>
    /// 게임 종료
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::S2CGameEndNotification GameEndNotification
    {
        get { return payloadCase_ == PayloadOneofCase.GameEndNotification ? (global::S2CGameEndNotification)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GameEndNotification;
        }
    }

    /// <summary>Field number for the "cardSelectRequest" field.</summary>
    public const int CardSelectRequestFieldNumber = 42;
    /// <summary>
    /// 카드 선택
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::C2SCardSelectRequest CardSelectRequest
    {
        get { return payloadCase_ == PayloadOneofCase.CardSelectRequest ? (global::C2SCardSelectRequest)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.CardSelectRequest;
        }
    }

    /// <summary>Field number for the "cardSelectResponse" field.</summary>
    public const int CardSelectResponseFieldNumber = 43;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::S2CCardSelectResponse CardSelectResponse
    {
        get { return payloadCase_ == PayloadOneofCase.CardSelectResponse ? (global::S2CCardSelectResponse)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.CardSelectResponse;
        }
    }

    /// <summary>Field number for the "passDebuffRequest" field.</summary>
    public const int PassDebuffRequestFieldNumber = 44;
    /// <summary>
    /// 디버프 넘기기
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::C2SPassDebuffRequest PassDebuffRequest
    {
        get { return payloadCase_ == PayloadOneofCase.PassDebuffRequest ? (global::C2SPassDebuffRequest)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.PassDebuffRequest;
        }
    }

    /// <summary>Field number for the "passDebuffResponse" field.</summary>
    public const int PassDebuffResponseFieldNumber = 45;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::S2CPassDebuffResponse PassDebuffResponse
    {
        get { return payloadCase_ == PayloadOneofCase.PassDebuffResponse ? (global::S2CPassDebuffResponse)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.PassDebuffResponse;
        }
    }

    /// <summary>Field number for the "warningNotification" field.</summary>
    public const int WarningNotificationFieldNumber = 46;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::S2CWarningNotification WarningNotification
    {
        get { return payloadCase_ == PayloadOneofCase.WarningNotification ? (global::S2CWarningNotification)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.WarningNotification;
        }
    }

    /// <summary>Field number for the "animationNotification" field.</summary>
    public const int AnimationNotificationFieldNumber = 47;
    /// <summary>
    /// 효과 알림
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::S2CAnimationNotification AnimationNotification
    {
        get { return payloadCase_ == PayloadOneofCase.AnimationNotification ? (global::S2CAnimationNotification)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.AnimationNotification;
        }
    }

    /// <summary>Field number for the "monsterDeathRewardRequest" field.</summary>
    public const int MonsterDeathRewardRequestFieldNumber = 48;
    /// <summary>
    /// 몬스터 사망 및 보상
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::C2SMonsterDeathRewardRequest MonsterDeathRewardRequest
    {
        get { return payloadCase_ == PayloadOneofCase.MonsterDeathRewardRequest ? (global::C2SMonsterDeathRewardRequest)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.MonsterDeathRewardRequest;
        }
    }

    /// <summary>Field number for the "monsterDeathRewardResponse" field.</summary>
    public const int MonsterDeathRewardResponseFieldNumber = 49;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::S2CMonsterDeathRewardResponse MonsterDeathRewardResponse
    {
        get { return payloadCase_ == PayloadOneofCase.MonsterDeathRewardResponse ? (global::S2CMonsterDeathRewardResponse)payload_ : null; }
        set
        {
            payload_ = value;
            payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.MonsterDeathRewardResponse;
        }
    }

    private object payload_;
    /// <summary>Enum of possible cases for the "payload" oneof.</summary>
    public enum PayloadOneofCase
    {
        None = 0,
        RegisterRequest = 1,
        RegisterResponse = 2,
        LoginRequest = 3,
        LoginResponse = 4,
        CreateRoomRequest = 5,
        CreateRoomResponse = 6,
        GetRoomListRequest = 7,
        GetRoomListResponse = 8,
        JoinRoomRequest = 9,
        JoinRoomResponse = 10,
        JoinRandomRoomRequest = 11,
        JoinRandomRoomResponse = 12,
        JoinRoomNotification = 13,
        LeaveRoomRequest = 14,
        LeaveRoomResponse = 15,
        LeaveRoomNotification = 16,
        GamePrepareRequest = 17,
        GamePrepareResponse = 18,
        GamePrepareNotification = 19,
        GameStartRequest = 20,
        GameStartResponse = 21,
        GameStartNotification = 22,
        PositionUpdateRequest = 23,
        PositionUpdateNotification = 24,
        UseCardRequest = 25,
        UseCardResponse = 26,
        UseCardNotification = 27,
        EquipCardNotification = 28,
        CardEffectNotification = 29,
        FleaMarketNotification = 30,
        FleaMarketPickRequest = 31,
        FleaMarketPickResponse = 32,
        FleMarketCardPickRequest = 33,
        FleMarketCardPickResponse = 34,
        UserUpdateNotification = 35,
        PhaseUpdateNotification = 36,
        ReactionRequest = 37,
        ReactionResponse = 38,
        DestroyCardRequest = 39,
        DestroyCardResponse = 40,
        GameEndNotification = 41,
        CardSelectRequest = 42,
        CardSelectResponse = 43,
        PassDebuffRequest = 44,
        PassDebuffResponse = 45,
        WarningNotification = 46,
        AnimationNotification = 47,
        MonsterDeathRewardRequest = 48,
        MonsterDeathRewardResponse = 49,
    }
    private PayloadOneofCase payloadCase_ = PayloadOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayloadOneofCase PayloadCase
    {
        get { return payloadCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPayload()
    {
        payloadCase_ = PayloadOneofCase.None;
        payload_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as GamePacket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GamePacket other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (!object.Equals(RegisterRequest, other.RegisterRequest)) return false;
        if (!object.Equals(RegisterResponse, other.RegisterResponse)) return false;
        if (!object.Equals(LoginRequest, other.LoginRequest)) return false;
        if (!object.Equals(LoginResponse, other.LoginResponse)) return false;
        if (!object.Equals(CreateRoomRequest, other.CreateRoomRequest)) return false;
        if (!object.Equals(CreateRoomResponse, other.CreateRoomResponse)) return false;
        if (!object.Equals(GetRoomListRequest, other.GetRoomListRequest)) return false;
        if (!object.Equals(GetRoomListResponse, other.GetRoomListResponse)) return false;
        if (!object.Equals(JoinRoomRequest, other.JoinRoomRequest)) return false;
        if (!object.Equals(JoinRoomResponse, other.JoinRoomResponse)) return false;
        if (!object.Equals(JoinRandomRoomRequest, other.JoinRandomRoomRequest)) return false;
        if (!object.Equals(JoinRandomRoomResponse, other.JoinRandomRoomResponse)) return false;
        if (!object.Equals(JoinRoomNotification, other.JoinRoomNotification)) return false;
        if (!object.Equals(LeaveRoomRequest, other.LeaveRoomRequest)) return false;
        if (!object.Equals(LeaveRoomResponse, other.LeaveRoomResponse)) return false;
        if (!object.Equals(LeaveRoomNotification, other.LeaveRoomNotification)) return false;
        if (!object.Equals(GamePrepareRequest, other.GamePrepareRequest)) return false;
        if (!object.Equals(GamePrepareResponse, other.GamePrepareResponse)) return false;
        if (!object.Equals(GamePrepareNotification, other.GamePrepareNotification)) return false;
        if (!object.Equals(GameStartRequest, other.GameStartRequest)) return false;
        if (!object.Equals(GameStartResponse, other.GameStartResponse)) return false;
        if (!object.Equals(GameStartNotification, other.GameStartNotification)) return false;
        if (!object.Equals(PositionUpdateRequest, other.PositionUpdateRequest)) return false;
        if (!object.Equals(PositionUpdateNotification, other.PositionUpdateNotification)) return false;
        if (!object.Equals(UseCardRequest, other.UseCardRequest)) return false;
        if (!object.Equals(UseCardResponse, other.UseCardResponse)) return false;
        if (!object.Equals(UseCardNotification, other.UseCardNotification)) return false;
        if (!object.Equals(EquipCardNotification, other.EquipCardNotification)) return false;
        if (!object.Equals(CardEffectNotification, other.CardEffectNotification)) return false;
        if (!object.Equals(FleaMarketNotification, other.FleaMarketNotification)) return false;
        if (!object.Equals(FleaMarketPickRequest, other.FleaMarketPickRequest)) return false;
        if (!object.Equals(FleaMarketPickResponse, other.FleaMarketPickResponse)) return false;
        if (!object.Equals(FleMarketCardPickRequest, other.FleMarketCardPickRequest)) return false;
        if (!object.Equals(FleMarketCardPickResponse, other.FleMarketCardPickResponse)) return false;
        if (!object.Equals(UserUpdateNotification, other.UserUpdateNotification)) return false;
        if (!object.Equals(PhaseUpdateNotification, other.PhaseUpdateNotification)) return false;
        if (!object.Equals(ReactionRequest, other.ReactionRequest)) return false;
        if (!object.Equals(ReactionResponse, other.ReactionResponse)) return false;
        if (!object.Equals(DestroyCardRequest, other.DestroyCardRequest)) return false;
        if (!object.Equals(DestroyCardResponse, other.DestroyCardResponse)) return false;
        if (!object.Equals(GameEndNotification, other.GameEndNotification)) return false;
        if (!object.Equals(CardSelectRequest, other.CardSelectRequest)) return false;
        if (!object.Equals(CardSelectResponse, other.CardSelectResponse)) return false;
        if (!object.Equals(PassDebuffRequest, other.PassDebuffRequest)) return false;
        if (!object.Equals(PassDebuffResponse, other.PassDebuffResponse)) return false;
        if (!object.Equals(WarningNotification, other.WarningNotification)) return false;
        if (!object.Equals(AnimationNotification, other.AnimationNotification)) return false;
        if (!object.Equals(MonsterDeathRewardRequest, other.MonsterDeathRewardRequest)) return false;
        if (!object.Equals(MonsterDeathRewardResponse, other.MonsterDeathRewardResponse)) return false;
        if (PayloadCase != other.PayloadCase) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (payloadCase_ == PayloadOneofCase.RegisterRequest) hash ^= RegisterRequest.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.RegisterResponse) hash ^= RegisterResponse.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.LoginRequest) hash ^= LoginRequest.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.LoginResponse) hash ^= LoginResponse.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.CreateRoomRequest) hash ^= CreateRoomRequest.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.CreateRoomResponse) hash ^= CreateRoomResponse.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.GetRoomListRequest) hash ^= GetRoomListRequest.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.GetRoomListResponse) hash ^= GetRoomListResponse.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.JoinRoomRequest) hash ^= JoinRoomRequest.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.JoinRoomResponse) hash ^= JoinRoomResponse.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.JoinRandomRoomRequest) hash ^= JoinRandomRoomRequest.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.JoinRandomRoomResponse) hash ^= JoinRandomRoomResponse.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.JoinRoomNotification) hash ^= JoinRoomNotification.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.LeaveRoomRequest) hash ^= LeaveRoomRequest.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.LeaveRoomResponse) hash ^= LeaveRoomResponse.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.LeaveRoomNotification) hash ^= LeaveRoomNotification.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.GamePrepareRequest) hash ^= GamePrepareRequest.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.GamePrepareResponse) hash ^= GamePrepareResponse.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.GamePrepareNotification) hash ^= GamePrepareNotification.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.GameStartRequest) hash ^= GameStartRequest.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.GameStartResponse) hash ^= GameStartResponse.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.GameStartNotification) hash ^= GameStartNotification.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.PositionUpdateRequest) hash ^= PositionUpdateRequest.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.PositionUpdateNotification) hash ^= PositionUpdateNotification.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.UseCardRequest) hash ^= UseCardRequest.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.UseCardResponse) hash ^= UseCardResponse.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.UseCardNotification) hash ^= UseCardNotification.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.EquipCardNotification) hash ^= EquipCardNotification.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.CardEffectNotification) hash ^= CardEffectNotification.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.FleaMarketNotification) hash ^= FleaMarketNotification.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.FleaMarketPickRequest) hash ^= FleaMarketPickRequest.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.FleaMarketPickResponse) hash ^= FleaMarketPickResponse.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.FleMarketCardPickRequest) hash ^= FleMarketCardPickRequest.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.FleMarketCardPickResponse) hash ^= FleMarketCardPickResponse.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.UserUpdateNotification) hash ^= UserUpdateNotification.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.PhaseUpdateNotification) hash ^= PhaseUpdateNotification.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.ReactionRequest) hash ^= ReactionRequest.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.ReactionResponse) hash ^= ReactionResponse.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.DestroyCardRequest) hash ^= DestroyCardRequest.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.DestroyCardResponse) hash ^= DestroyCardResponse.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.GameEndNotification) hash ^= GameEndNotification.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.CardSelectRequest) hash ^= CardSelectRequest.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.CardSelectResponse) hash ^= CardSelectResponse.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.PassDebuffRequest) hash ^= PassDebuffRequest.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.PassDebuffResponse) hash ^= PassDebuffResponse.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.WarningNotification) hash ^= WarningNotification.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.AnimationNotification) hash ^= AnimationNotification.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.MonsterDeathRewardRequest) hash ^= MonsterDeathRewardRequest.GetHashCode();
        if (payloadCase_ == PayloadOneofCase.MonsterDeathRewardResponse) hash ^= MonsterDeathRewardResponse.GetHashCode();
        hash ^= (int)payloadCase_;
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (payloadCase_ == PayloadOneofCase.RegisterRequest)
        {
            output.WriteRawTag(10);
            output.WriteMessage(RegisterRequest);
        }
        if (payloadCase_ == PayloadOneofCase.RegisterResponse)
        {
            output.WriteRawTag(18);
            output.WriteMessage(RegisterResponse);
        }
        if (payloadCase_ == PayloadOneofCase.LoginRequest)
        {
            output.WriteRawTag(26);
            output.WriteMessage(LoginRequest);
        }
        if (payloadCase_ == PayloadOneofCase.LoginResponse)
        {
            output.WriteRawTag(34);
            output.WriteMessage(LoginResponse);
        }
        if (payloadCase_ == PayloadOneofCase.CreateRoomRequest)
        {
            output.WriteRawTag(42);
            output.WriteMessage(CreateRoomRequest);
        }
        if (payloadCase_ == PayloadOneofCase.CreateRoomResponse)
        {
            output.WriteRawTag(50);
            output.WriteMessage(CreateRoomResponse);
        }
        if (payloadCase_ == PayloadOneofCase.GetRoomListRequest)
        {
            output.WriteRawTag(58);
            output.WriteMessage(GetRoomListRequest);
        }
        if (payloadCase_ == PayloadOneofCase.GetRoomListResponse)
        {
            output.WriteRawTag(66);
            output.WriteMessage(GetRoomListResponse);
        }
        if (payloadCase_ == PayloadOneofCase.JoinRoomRequest)
        {
            output.WriteRawTag(74);
            output.WriteMessage(JoinRoomRequest);
        }
        if (payloadCase_ == PayloadOneofCase.JoinRoomResponse)
        {
            output.WriteRawTag(82);
            output.WriteMessage(JoinRoomResponse);
        }
        if (payloadCase_ == PayloadOneofCase.JoinRandomRoomRequest)
        {
            output.WriteRawTag(90);
            output.WriteMessage(JoinRandomRoomRequest);
        }
        if (payloadCase_ == PayloadOneofCase.JoinRandomRoomResponse)
        {
            output.WriteRawTag(98);
            output.WriteMessage(JoinRandomRoomResponse);
        }
        if (payloadCase_ == PayloadOneofCase.JoinRoomNotification)
        {
            output.WriteRawTag(106);
            output.WriteMessage(JoinRoomNotification);
        }
        if (payloadCase_ == PayloadOneofCase.LeaveRoomRequest)
        {
            output.WriteRawTag(114);
            output.WriteMessage(LeaveRoomRequest);
        }
        if (payloadCase_ == PayloadOneofCase.LeaveRoomResponse)
        {
            output.WriteRawTag(122);
            output.WriteMessage(LeaveRoomResponse);
        }
        if (payloadCase_ == PayloadOneofCase.LeaveRoomNotification)
        {
            output.WriteRawTag(130, 1);
            output.WriteMessage(LeaveRoomNotification);
        }
        if (payloadCase_ == PayloadOneofCase.GamePrepareRequest)
        {
            output.WriteRawTag(138, 1);
            output.WriteMessage(GamePrepareRequest);
        }
        if (payloadCase_ == PayloadOneofCase.GamePrepareResponse)
        {
            output.WriteRawTag(146, 1);
            output.WriteMessage(GamePrepareResponse);
        }
        if (payloadCase_ == PayloadOneofCase.GamePrepareNotification)
        {
            output.WriteRawTag(154, 1);
            output.WriteMessage(GamePrepareNotification);
        }
        if (payloadCase_ == PayloadOneofCase.GameStartRequest)
        {
            output.WriteRawTag(162, 1);
            output.WriteMessage(GameStartRequest);
        }
        if (payloadCase_ == PayloadOneofCase.GameStartResponse)
        {
            output.WriteRawTag(170, 1);
            output.WriteMessage(GameStartResponse);
        }
        if (payloadCase_ == PayloadOneofCase.GameStartNotification)
        {
            output.WriteRawTag(178, 1);
            output.WriteMessage(GameStartNotification);
        }
        if (payloadCase_ == PayloadOneofCase.PositionUpdateRequest)
        {
            output.WriteRawTag(186, 1);
            output.WriteMessage(PositionUpdateRequest);
        }
        if (payloadCase_ == PayloadOneofCase.PositionUpdateNotification)
        {
            output.WriteRawTag(194, 1);
            output.WriteMessage(PositionUpdateNotification);
        }
        if (payloadCase_ == PayloadOneofCase.UseCardRequest)
        {
            output.WriteRawTag(202, 1);
            output.WriteMessage(UseCardRequest);
        }
        if (payloadCase_ == PayloadOneofCase.UseCardResponse)
        {
            output.WriteRawTag(210, 1);
            output.WriteMessage(UseCardResponse);
        }
        if (payloadCase_ == PayloadOneofCase.UseCardNotification)
        {
            output.WriteRawTag(218, 1);
            output.WriteMessage(UseCardNotification);
        }
        if (payloadCase_ == PayloadOneofCase.EquipCardNotification)
        {
            output.WriteRawTag(226, 1);
            output.WriteMessage(EquipCardNotification);
        }
        if (payloadCase_ == PayloadOneofCase.CardEffectNotification)
        {
            output.WriteRawTag(234, 1);
            output.WriteMessage(CardEffectNotification);
        }
        if (payloadCase_ == PayloadOneofCase.FleaMarketNotification)
        {
            output.WriteRawTag(242, 1);
            output.WriteMessage(FleaMarketNotification);
        }
        if (payloadCase_ == PayloadOneofCase.FleaMarketPickRequest)
        {
            output.WriteRawTag(250, 1);
            output.WriteMessage(FleaMarketPickRequest);
        }
        if (payloadCase_ == PayloadOneofCase.FleaMarketPickResponse)
        {
            output.WriteRawTag(130, 2);
            output.WriteMessage(FleaMarketPickResponse);
        }
        if (payloadCase_ == PayloadOneofCase.FleMarketCardPickRequest)
        {
            output.WriteRawTag(138, 2);
            output.WriteMessage(FleMarketCardPickRequest);
        }
        if (payloadCase_ == PayloadOneofCase.FleMarketCardPickResponse)
        {
            output.WriteRawTag(146, 2);
            output.WriteMessage(FleMarketCardPickResponse);
        }
        if (payloadCase_ == PayloadOneofCase.UserUpdateNotification)
        {
            output.WriteRawTag(154, 2);
            output.WriteMessage(UserUpdateNotification);
        }
        if (payloadCase_ == PayloadOneofCase.PhaseUpdateNotification)
        {
            output.WriteRawTag(162, 2);
            output.WriteMessage(PhaseUpdateNotification);
        }
        if (payloadCase_ == PayloadOneofCase.ReactionRequest)
        {
            output.WriteRawTag(170, 2);
            output.WriteMessage(ReactionRequest);
        }
        if (payloadCase_ == PayloadOneofCase.ReactionResponse)
        {
            output.WriteRawTag(178, 2);
            output.WriteMessage(ReactionResponse);
        }
        if (payloadCase_ == PayloadOneofCase.DestroyCardRequest)
        {
            output.WriteRawTag(186, 2);
            output.WriteMessage(DestroyCardRequest);
        }
        if (payloadCase_ == PayloadOneofCase.DestroyCardResponse)
        {
            output.WriteRawTag(194, 2);
            output.WriteMessage(DestroyCardResponse);
        }
        if (payloadCase_ == PayloadOneofCase.GameEndNotification)
        {
            output.WriteRawTag(202, 2);
            output.WriteMessage(GameEndNotification);
        }
        if (payloadCase_ == PayloadOneofCase.CardSelectRequest)
        {
            output.WriteRawTag(210, 2);
            output.WriteMessage(CardSelectRequest);
        }
        if (payloadCase_ == PayloadOneofCase.CardSelectResponse)
        {
            output.WriteRawTag(218, 2);
            output.WriteMessage(CardSelectResponse);
        }
        if (payloadCase_ == PayloadOneofCase.PassDebuffRequest)
        {
            output.WriteRawTag(226, 2);
            output.WriteMessage(PassDebuffRequest);
        }
        if (payloadCase_ == PayloadOneofCase.PassDebuffResponse)
        {
            output.WriteRawTag(234, 2);
            output.WriteMessage(PassDebuffResponse);
        }
        if (payloadCase_ == PayloadOneofCase.WarningNotification)
        {
            output.WriteRawTag(242, 2);
            output.WriteMessage(WarningNotification);
        }
        if (payloadCase_ == PayloadOneofCase.AnimationNotification)
        {
            output.WriteRawTag(250, 2);
            output.WriteMessage(AnimationNotification);
        }
        if (payloadCase_ == PayloadOneofCase.MonsterDeathRewardRequest)
        {
            output.WriteRawTag(130, 3);
            output.WriteMessage(MonsterDeathRewardRequest);
        }
        if (payloadCase_ == PayloadOneofCase.MonsterDeathRewardResponse)
        {
            output.WriteRawTag(138, 3);
            output.WriteMessage(MonsterDeathRewardResponse);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (payloadCase_ == PayloadOneofCase.RegisterRequest)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(RegisterRequest);
        }
        if (payloadCase_ == PayloadOneofCase.RegisterResponse)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(RegisterResponse);
        }
        if (payloadCase_ == PayloadOneofCase.LoginRequest)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(LoginRequest);
        }
        if (payloadCase_ == PayloadOneofCase.LoginResponse)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(LoginResponse);
        }
        if (payloadCase_ == PayloadOneofCase.CreateRoomRequest)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateRoomRequest);
        }
        if (payloadCase_ == PayloadOneofCase.CreateRoomResponse)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateRoomResponse);
        }
        if (payloadCase_ == PayloadOneofCase.GetRoomListRequest)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetRoomListRequest);
        }
        if (payloadCase_ == PayloadOneofCase.GetRoomListResponse)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetRoomListResponse);
        }
        if (payloadCase_ == PayloadOneofCase.JoinRoomRequest)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(JoinRoomRequest);
        }
        if (payloadCase_ == PayloadOneofCase.JoinRoomResponse)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(JoinRoomResponse);
        }
        if (payloadCase_ == PayloadOneofCase.JoinRandomRoomRequest)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(JoinRandomRoomRequest);
        }
        if (payloadCase_ == PayloadOneofCase.JoinRandomRoomResponse)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(JoinRandomRoomResponse);
        }
        if (payloadCase_ == PayloadOneofCase.JoinRoomNotification)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(JoinRoomNotification);
        }
        if (payloadCase_ == PayloadOneofCase.LeaveRoomRequest)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeaveRoomRequest);
        }
        if (payloadCase_ == PayloadOneofCase.LeaveRoomResponse)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeaveRoomResponse);
        }
        if (payloadCase_ == PayloadOneofCase.LeaveRoomNotification)
        {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(LeaveRoomNotification);
        }
        if (payloadCase_ == PayloadOneofCase.GamePrepareRequest)
        {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(GamePrepareRequest);
        }
        if (payloadCase_ == PayloadOneofCase.GamePrepareResponse)
        {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(GamePrepareResponse);
        }
        if (payloadCase_ == PayloadOneofCase.GamePrepareNotification)
        {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(GamePrepareNotification);
        }
        if (payloadCase_ == PayloadOneofCase.GameStartRequest)
        {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(GameStartRequest);
        }
        if (payloadCase_ == PayloadOneofCase.GameStartResponse)
        {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(GameStartResponse);
        }
        if (payloadCase_ == PayloadOneofCase.GameStartNotification)
        {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(GameStartNotification);
        }
        if (payloadCase_ == PayloadOneofCase.PositionUpdateRequest)
        {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(PositionUpdateRequest);
        }
        if (payloadCase_ == PayloadOneofCase.PositionUpdateNotification)
        {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(PositionUpdateNotification);
        }
        if (payloadCase_ == PayloadOneofCase.UseCardRequest)
        {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(UseCardRequest);
        }
        if (payloadCase_ == PayloadOneofCase.UseCardResponse)
        {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(UseCardResponse);
        }
        if (payloadCase_ == PayloadOneofCase.UseCardNotification)
        {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(UseCardNotification);
        }
        if (payloadCase_ == PayloadOneofCase.EquipCardNotification)
        {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(EquipCardNotification);
        }
        if (payloadCase_ == PayloadOneofCase.CardEffectNotification)
        {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(CardEffectNotification);
        }
        if (payloadCase_ == PayloadOneofCase.FleaMarketNotification)
        {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(FleaMarketNotification);
        }
        if (payloadCase_ == PayloadOneofCase.FleaMarketPickRequest)
        {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(FleaMarketPickRequest);
        }
        if (payloadCase_ == PayloadOneofCase.FleaMarketPickResponse)
        {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(FleaMarketPickResponse);
        }
        if (payloadCase_ == PayloadOneofCase.FleMarketCardPickRequest)
        {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(FleMarketCardPickRequest);
        }
        if (payloadCase_ == PayloadOneofCase.FleMarketCardPickResponse)
        {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(FleMarketCardPickResponse);
        }
        if (payloadCase_ == PayloadOneofCase.UserUpdateNotification)
        {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(UserUpdateNotification);
        }
        if (payloadCase_ == PayloadOneofCase.PhaseUpdateNotification)
        {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(PhaseUpdateNotification);
        }
        if (payloadCase_ == PayloadOneofCase.ReactionRequest)
        {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(ReactionRequest);
        }
        if (payloadCase_ == PayloadOneofCase.ReactionResponse)
        {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(ReactionResponse);
        }
        if (payloadCase_ == PayloadOneofCase.DestroyCardRequest)
        {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(DestroyCardRequest);
        }
        if (payloadCase_ == PayloadOneofCase.DestroyCardResponse)
        {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(DestroyCardResponse);
        }
        if (payloadCase_ == PayloadOneofCase.GameEndNotification)
        {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(GameEndNotification);
        }
        if (payloadCase_ == PayloadOneofCase.CardSelectRequest)
        {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(CardSelectRequest);
        }
        if (payloadCase_ == PayloadOneofCase.CardSelectResponse)
        {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(CardSelectResponse);
        }
        if (payloadCase_ == PayloadOneofCase.PassDebuffRequest)
        {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(PassDebuffRequest);
        }
        if (payloadCase_ == PayloadOneofCase.PassDebuffResponse)
        {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(PassDebuffResponse);
        }
        if (payloadCase_ == PayloadOneofCase.WarningNotification)
        {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(WarningNotification);
        }
        if (payloadCase_ == PayloadOneofCase.AnimationNotification)
        {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(AnimationNotification);
        }
        if (payloadCase_ == PayloadOneofCase.MonsterDeathRewardRequest)
        {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(MonsterDeathRewardRequest);
        }
        if (payloadCase_ == PayloadOneofCase.MonsterDeathRewardResponse)
        {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(MonsterDeathRewardResponse);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GamePacket other)
    {
        if (other == null)
        {
            return;
        }
        switch (other.PayloadCase)
        {
            case PayloadOneofCase.RegisterRequest:
                if (RegisterRequest == null)
                {
                    RegisterRequest = new global::C2SRegisterRequest();
                }
                RegisterRequest.MergeFrom(other.RegisterRequest);
                break;
            case PayloadOneofCase.RegisterResponse:
                if (RegisterResponse == null)
                {
                    RegisterResponse = new global::S2CRegisterResponse();
                }
                RegisterResponse.MergeFrom(other.RegisterResponse);
                break;
            case PayloadOneofCase.LoginRequest:
                if (LoginRequest == null)
                {
                    LoginRequest = new global::C2SLoginRequest();
                }
                LoginRequest.MergeFrom(other.LoginRequest);
                break;
            case PayloadOneofCase.LoginResponse:
                if (LoginResponse == null)
                {
                    LoginResponse = new global::S2CLoginResponse();
                }
                LoginResponse.MergeFrom(other.LoginResponse);
                break;
            case PayloadOneofCase.CreateRoomRequest:
                if (CreateRoomRequest == null)
                {
                    CreateRoomRequest = new global::C2SCreateRoomRequest();
                }
                CreateRoomRequest.MergeFrom(other.CreateRoomRequest);
                break;
            case PayloadOneofCase.CreateRoomResponse:
                if (CreateRoomResponse == null)
                {
                    CreateRoomResponse = new global::S2CCreateRoomResponse();
                }
                CreateRoomResponse.MergeFrom(other.CreateRoomResponse);
                break;
            case PayloadOneofCase.GetRoomListRequest:
                if (GetRoomListRequest == null)
                {
                    GetRoomListRequest = new global::C2SGetRoomListRequest();
                }
                GetRoomListRequest.MergeFrom(other.GetRoomListRequest);
                break;
            case PayloadOneofCase.GetRoomListResponse:
                if (GetRoomListResponse == null)
                {
                    GetRoomListResponse = new global::S2CGetRoomListResponse();
                }
                GetRoomListResponse.MergeFrom(other.GetRoomListResponse);
                break;
            case PayloadOneofCase.JoinRoomRequest:
                if (JoinRoomRequest == null)
                {
                    JoinRoomRequest = new global::C2SJoinRoomRequest();
                }
                JoinRoomRequest.MergeFrom(other.JoinRoomRequest);
                break;
            case PayloadOneofCase.JoinRoomResponse:
                if (JoinRoomResponse == null)
                {
                    JoinRoomResponse = new global::S2CJoinRoomResponse();
                }
                JoinRoomResponse.MergeFrom(other.JoinRoomResponse);
                break;
            case PayloadOneofCase.JoinRandomRoomRequest:
                if (JoinRandomRoomRequest == null)
                {
                    JoinRandomRoomRequest = new global::C2SJoinRandomRoomRequest();
                }
                JoinRandomRoomRequest.MergeFrom(other.JoinRandomRoomRequest);
                break;
            case PayloadOneofCase.JoinRandomRoomResponse:
                if (JoinRandomRoomResponse == null)
                {
                    JoinRandomRoomResponse = new global::S2CJoinRandomRoomResponse();
                }
                JoinRandomRoomResponse.MergeFrom(other.JoinRandomRoomResponse);
                break;
            case PayloadOneofCase.JoinRoomNotification:
                if (JoinRoomNotification == null)
                {
                    JoinRoomNotification = new global::S2CJoinRoomNotification();
                }
                JoinRoomNotification.MergeFrom(other.JoinRoomNotification);
                break;
            case PayloadOneofCase.LeaveRoomRequest:
                if (LeaveRoomRequest == null)
                {
                    LeaveRoomRequest = new global::C2SLeaveRoomRequest();
                }
                LeaveRoomRequest.MergeFrom(other.LeaveRoomRequest);
                break;
            case PayloadOneofCase.LeaveRoomResponse:
                if (LeaveRoomResponse == null)
                {
                    LeaveRoomResponse = new global::S2CLeaveRoomResponse();
                }
                LeaveRoomResponse.MergeFrom(other.LeaveRoomResponse);
                break;
            case PayloadOneofCase.LeaveRoomNotification:
                if (LeaveRoomNotification == null)
                {
                    LeaveRoomNotification = new global::S2CLeaveRoomNotification();
                }
                LeaveRoomNotification.MergeFrom(other.LeaveRoomNotification);
                break;
            case PayloadOneofCase.GamePrepareRequest:
                if (GamePrepareRequest == null)
                {
                    GamePrepareRequest = new global::C2SGamePrepareRequest();
                }
                GamePrepareRequest.MergeFrom(other.GamePrepareRequest);
                break;
            case PayloadOneofCase.GamePrepareResponse:
                if (GamePrepareResponse == null)
                {
                    GamePrepareResponse = new global::S2CGamePrepareResponse();
                }
                GamePrepareResponse.MergeFrom(other.GamePrepareResponse);
                break;
            case PayloadOneofCase.GamePrepareNotification:
                if (GamePrepareNotification == null)
                {
                    GamePrepareNotification = new global::S2CGamePrepareNotification();
                }
                GamePrepareNotification.MergeFrom(other.GamePrepareNotification);
                break;
            case PayloadOneofCase.GameStartRequest:
                if (GameStartRequest == null)
                {
                    GameStartRequest = new global::C2SGameStartRequest();
                }
                GameStartRequest.MergeFrom(other.GameStartRequest);
                break;
            case PayloadOneofCase.GameStartResponse:
                if (GameStartResponse == null)
                {
                    GameStartResponse = new global::S2CGameStartResponse();
                }
                GameStartResponse.MergeFrom(other.GameStartResponse);
                break;
            case PayloadOneofCase.GameStartNotification:
                if (GameStartNotification == null)
                {
                    GameStartNotification = new global::S2CGameStartNotification();
                }
                GameStartNotification.MergeFrom(other.GameStartNotification);
                break;
            case PayloadOneofCase.PositionUpdateRequest:
                if (PositionUpdateRequest == null)
                {
                    PositionUpdateRequest = new global::C2SPositionUpdateRequest();
                }
                PositionUpdateRequest.MergeFrom(other.PositionUpdateRequest);
                break;
            case PayloadOneofCase.PositionUpdateNotification:
                if (PositionUpdateNotification == null)
                {
                    PositionUpdateNotification = new global::S2CPositionUpdateNotification();
                }
                PositionUpdateNotification.MergeFrom(other.PositionUpdateNotification);
                break;
            case PayloadOneofCase.UseCardRequest:
                if (UseCardRequest == null)
                {
                    UseCardRequest = new global::C2SUseCardRequest();
                }
                UseCardRequest.MergeFrom(other.UseCardRequest);
                break;
            case PayloadOneofCase.UseCardResponse:
                if (UseCardResponse == null)
                {
                    UseCardResponse = new global::S2CUseCardResponse();
                }
                UseCardResponse.MergeFrom(other.UseCardResponse);
                break;
            case PayloadOneofCase.UseCardNotification:
                if (UseCardNotification == null)
                {
                    UseCardNotification = new global::S2CUseCardNotification();
                }
                UseCardNotification.MergeFrom(other.UseCardNotification);
                break;
            case PayloadOneofCase.EquipCardNotification:
                if (EquipCardNotification == null)
                {
                    EquipCardNotification = new global::S2CEquipCardNotification();
                }
                EquipCardNotification.MergeFrom(other.EquipCardNotification);
                break;
            case PayloadOneofCase.CardEffectNotification:
                if (CardEffectNotification == null)
                {
                    CardEffectNotification = new global::S2CCardEffectNotification();
                }
                CardEffectNotification.MergeFrom(other.CardEffectNotification);
                break;
            case PayloadOneofCase.FleaMarketNotification:
                if (FleaMarketNotification == null)
                {
                    FleaMarketNotification = new global::S2CFleaMarketNotification();
                }
                FleaMarketNotification.MergeFrom(other.FleaMarketNotification);
                break;
            case PayloadOneofCase.FleaMarketPickRequest:
                if (FleaMarketPickRequest == null)
                {
                    FleaMarketPickRequest = new global::C2SFleaMarketPickRequest();
                }
                FleaMarketPickRequest.MergeFrom(other.FleaMarketPickRequest);
                break;
            case PayloadOneofCase.FleaMarketPickResponse:
                if (FleaMarketPickResponse == null)
                {
                    FleaMarketPickResponse = new global::S2CFleaMarketPickResponse();
                }
                FleaMarketPickResponse.MergeFrom(other.FleaMarketPickResponse);
                break;
            case PayloadOneofCase.FleMarketCardPickRequest:
                if (FleMarketCardPickRequest == null)
                {
                    FleMarketCardPickRequest = new global::C2SFleaMarketCardPickRequest();
                }
                FleMarketCardPickRequest.MergeFrom(other.FleMarketCardPickRequest);
                break;
            case PayloadOneofCase.FleMarketCardPickResponse:
                if (FleMarketCardPickResponse == null)
                {
                    FleMarketCardPickResponse = new global::S2CFleaMarketCardPickResponse();
                }
                FleMarketCardPickResponse.MergeFrom(other.FleMarketCardPickResponse);
                break;
            case PayloadOneofCase.UserUpdateNotification:
                if (UserUpdateNotification == null)
                {
                    UserUpdateNotification = new global::S2CUserUpdateNotification();
                }
                UserUpdateNotification.MergeFrom(other.UserUpdateNotification);
                break;
            case PayloadOneofCase.PhaseUpdateNotification:
                if (PhaseUpdateNotification == null)
                {
                    PhaseUpdateNotification = new global::S2CPhaseUpdateNotification();
                }
                PhaseUpdateNotification.MergeFrom(other.PhaseUpdateNotification);
                break;
            case PayloadOneofCase.ReactionRequest:
                if (ReactionRequest == null)
                {
                    ReactionRequest = new global::C2SReactionRequest();
                }
                ReactionRequest.MergeFrom(other.ReactionRequest);
                break;
            case PayloadOneofCase.ReactionResponse:
                if (ReactionResponse == null)
                {
                    ReactionResponse = new global::S2CReactionResponse();
                }
                ReactionResponse.MergeFrom(other.ReactionResponse);
                break;
            case PayloadOneofCase.DestroyCardRequest:
                if (DestroyCardRequest == null)
                {
                    DestroyCardRequest = new global::C2SDestroyCardRequest();
                }
                DestroyCardRequest.MergeFrom(other.DestroyCardRequest);
                break;
            case PayloadOneofCase.DestroyCardResponse:
                if (DestroyCardResponse == null)
                {
                    DestroyCardResponse = new global::S2CDestroyCardResponse();
                }
                DestroyCardResponse.MergeFrom(other.DestroyCardResponse);
                break;
            case PayloadOneofCase.GameEndNotification:
                if (GameEndNotification == null)
                {
                    GameEndNotification = new global::S2CGameEndNotification();
                }
                GameEndNotification.MergeFrom(other.GameEndNotification);
                break;
            case PayloadOneofCase.CardSelectRequest:
                if (CardSelectRequest == null)
                {
                    CardSelectRequest = new global::C2SCardSelectRequest();
                }
                CardSelectRequest.MergeFrom(other.CardSelectRequest);
                break;
            case PayloadOneofCase.CardSelectResponse:
                if (CardSelectResponse == null)
                {
                    CardSelectResponse = new global::S2CCardSelectResponse();
                }
                CardSelectResponse.MergeFrom(other.CardSelectResponse);
                break;
            case PayloadOneofCase.PassDebuffRequest:
                if (PassDebuffRequest == null)
                {
                    PassDebuffRequest = new global::C2SPassDebuffRequest();
                }
                PassDebuffRequest.MergeFrom(other.PassDebuffRequest);
                break;
            case PayloadOneofCase.PassDebuffResponse:
                if (PassDebuffResponse == null)
                {
                    PassDebuffResponse = new global::S2CPassDebuffResponse();
                }
                PassDebuffResponse.MergeFrom(other.PassDebuffResponse);
                break;
            case PayloadOneofCase.WarningNotification:
                if (WarningNotification == null)
                {
                    WarningNotification = new global::S2CWarningNotification();
                }
                WarningNotification.MergeFrom(other.WarningNotification);
                break;
            case PayloadOneofCase.AnimationNotification:
                if (AnimationNotification == null)
                {
                    AnimationNotification = new global::S2CAnimationNotification();
                }
                AnimationNotification.MergeFrom(other.AnimationNotification);
                break;
            case PayloadOneofCase.MonsterDeathRewardRequest:
                if (MonsterDeathRewardRequest == null)
                {
                    MonsterDeathRewardRequest = new global::C2SMonsterDeathRewardRequest();
                }
                MonsterDeathRewardRequest.MergeFrom(other.MonsterDeathRewardRequest);
                break;
            case PayloadOneofCase.MonsterDeathRewardResponse:
                if (MonsterDeathRewardResponse == null)
                {
                    MonsterDeathRewardResponse = new global::S2CMonsterDeathRewardResponse();
                }
                MonsterDeathRewardResponse.MergeFrom(other.MonsterDeathRewardResponse);
                break;
        }

        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        global::C2SRegisterRequest subBuilder = new global::C2SRegisterRequest();
                        if (payloadCase_ == PayloadOneofCase.RegisterRequest)
                        {
                            subBuilder.MergeFrom(RegisterRequest);
                        }
                        input.ReadMessage(subBuilder);
                        RegisterRequest = subBuilder;
                        break;
                    }
                case 18:
                    {
                        global::S2CRegisterResponse subBuilder = new global::S2CRegisterResponse();
                        if (payloadCase_ == PayloadOneofCase.RegisterResponse)
                        {
                            subBuilder.MergeFrom(RegisterResponse);
                        }
                        input.ReadMessage(subBuilder);
                        RegisterResponse = subBuilder;
                        break;
                    }
                case 26:
                    {
                        global::C2SLoginRequest subBuilder = new global::C2SLoginRequest();
                        if (payloadCase_ == PayloadOneofCase.LoginRequest)
                        {
                            subBuilder.MergeFrom(LoginRequest);
                        }
                        input.ReadMessage(subBuilder);
                        LoginRequest = subBuilder;
                        break;
                    }
                case 34:
                    {
                        global::S2CLoginResponse subBuilder = new global::S2CLoginResponse();
                        if (payloadCase_ == PayloadOneofCase.LoginResponse)
                        {
                            subBuilder.MergeFrom(LoginResponse);
                        }
                        input.ReadMessage(subBuilder);
                        LoginResponse = subBuilder;
                        break;
                    }
                case 42:
                    {
                        global::C2SCreateRoomRequest subBuilder = new global::C2SCreateRoomRequest();
                        if (payloadCase_ == PayloadOneofCase.CreateRoomRequest)
                        {
                            subBuilder.MergeFrom(CreateRoomRequest);
                        }
                        input.ReadMessage(subBuilder);
                        CreateRoomRequest = subBuilder;
                        break;
                    }
                case 50:
                    {
                        global::S2CCreateRoomResponse subBuilder = new global::S2CCreateRoomResponse();
                        if (payloadCase_ == PayloadOneofCase.CreateRoomResponse)
                        {
                            subBuilder.MergeFrom(CreateRoomResponse);
                        }
                        input.ReadMessage(subBuilder);
                        CreateRoomResponse = subBuilder;
                        break;
                    }
                case 58:
                    {
                        global::C2SGetRoomListRequest subBuilder = new global::C2SGetRoomListRequest();
                        if (payloadCase_ == PayloadOneofCase.GetRoomListRequest)
                        {
                            subBuilder.MergeFrom(GetRoomListRequest);
                        }
                        input.ReadMessage(subBuilder);
                        GetRoomListRequest = subBuilder;
                        break;
                    }
                case 66:
                    {
                        global::S2CGetRoomListResponse subBuilder = new global::S2CGetRoomListResponse();
                        if (payloadCase_ == PayloadOneofCase.GetRoomListResponse)
                        {
                            subBuilder.MergeFrom(GetRoomListResponse);
                        }
                        input.ReadMessage(subBuilder);
                        GetRoomListResponse = subBuilder;
                        break;
                    }
                case 74:
                    {
                        global::C2SJoinRoomRequest subBuilder = new global::C2SJoinRoomRequest();
                        if (payloadCase_ == PayloadOneofCase.JoinRoomRequest)
                        {
                            subBuilder.MergeFrom(JoinRoomRequest);
                        }
                        input.ReadMessage(subBuilder);
                        JoinRoomRequest = subBuilder;
                        break;
                    }
                case 82:
                    {
                        global::S2CJoinRoomResponse subBuilder = new global::S2CJoinRoomResponse();
                        if (payloadCase_ == PayloadOneofCase.JoinRoomResponse)
                        {
                            subBuilder.MergeFrom(JoinRoomResponse);
                        }
                        input.ReadMessage(subBuilder);
                        JoinRoomResponse = subBuilder;
                        break;
                    }
                case 90:
                    {
                        global::C2SJoinRandomRoomRequest subBuilder = new global::C2SJoinRandomRoomRequest();
                        if (payloadCase_ == PayloadOneofCase.JoinRandomRoomRequest)
                        {
                            subBuilder.MergeFrom(JoinRandomRoomRequest);
                        }
                        input.ReadMessage(subBuilder);
                        JoinRandomRoomRequest = subBuilder;
                        break;
                    }
                case 98:
                    {
                        global::S2CJoinRandomRoomResponse subBuilder = new global::S2CJoinRandomRoomResponse();
                        if (payloadCase_ == PayloadOneofCase.JoinRandomRoomResponse)
                        {
                            subBuilder.MergeFrom(JoinRandomRoomResponse);
                        }
                        input.ReadMessage(subBuilder);
                        JoinRandomRoomResponse = subBuilder;
                        break;
                    }
                case 106:
                    {
                        global::S2CJoinRoomNotification subBuilder = new global::S2CJoinRoomNotification();
                        if (payloadCase_ == PayloadOneofCase.JoinRoomNotification)
                        {
                            subBuilder.MergeFrom(JoinRoomNotification);
                        }
                        input.ReadMessage(subBuilder);
                        JoinRoomNotification = subBuilder;
                        break;
                    }
                case 114:
                    {
                        global::C2SLeaveRoomRequest subBuilder = new global::C2SLeaveRoomRequest();
                        if (payloadCase_ == PayloadOneofCase.LeaveRoomRequest)
                        {
                            subBuilder.MergeFrom(LeaveRoomRequest);
                        }
                        input.ReadMessage(subBuilder);
                        LeaveRoomRequest = subBuilder;
                        break;
                    }
                case 122:
                    {
                        global::S2CLeaveRoomResponse subBuilder = new global::S2CLeaveRoomResponse();
                        if (payloadCase_ == PayloadOneofCase.LeaveRoomResponse)
                        {
                            subBuilder.MergeFrom(LeaveRoomResponse);
                        }
                        input.ReadMessage(subBuilder);
                        LeaveRoomResponse = subBuilder;
                        break;
                    }
                case 130:
                    {
                        global::S2CLeaveRoomNotification subBuilder = new global::S2CLeaveRoomNotification();
                        if (payloadCase_ == PayloadOneofCase.LeaveRoomNotification)
                        {
                            subBuilder.MergeFrom(LeaveRoomNotification);
                        }
                        input.ReadMessage(subBuilder);
                        LeaveRoomNotification = subBuilder;
                        break;
                    }
                case 138:
                    {
                        global::C2SGamePrepareRequest subBuilder = new global::C2SGamePrepareRequest();
                        if (payloadCase_ == PayloadOneofCase.GamePrepareRequest)
                        {
                            subBuilder.MergeFrom(GamePrepareRequest);
                        }
                        input.ReadMessage(subBuilder);
                        GamePrepareRequest = subBuilder;
                        break;
                    }
                case 146:
                    {
                        global::S2CGamePrepareResponse subBuilder = new global::S2CGamePrepareResponse();
                        if (payloadCase_ == PayloadOneofCase.GamePrepareResponse)
                        {
                            subBuilder.MergeFrom(GamePrepareResponse);
                        }
                        input.ReadMessage(subBuilder);
                        GamePrepareResponse = subBuilder;
                        break;
                    }
                case 154:
                    {
                        global::S2CGamePrepareNotification subBuilder = new global::S2CGamePrepareNotification();
                        if (payloadCase_ == PayloadOneofCase.GamePrepareNotification)
                        {
                            subBuilder.MergeFrom(GamePrepareNotification);
                        }
                        input.ReadMessage(subBuilder);
                        GamePrepareNotification = subBuilder;
                        break;
                    }
                case 162:
                    {
                        global::C2SGameStartRequest subBuilder = new global::C2SGameStartRequest();
                        if (payloadCase_ == PayloadOneofCase.GameStartRequest)
                        {
                            subBuilder.MergeFrom(GameStartRequest);
                        }
                        input.ReadMessage(subBuilder);
                        GameStartRequest = subBuilder;
                        break;
                    }
                case 170:
                    {
                        global::S2CGameStartResponse subBuilder = new global::S2CGameStartResponse();
                        if (payloadCase_ == PayloadOneofCase.GameStartResponse)
                        {
                            subBuilder.MergeFrom(GameStartResponse);
                        }
                        input.ReadMessage(subBuilder);
                        GameStartResponse = subBuilder;
                        break;
                    }
                case 178:
                    {
                        global::S2CGameStartNotification subBuilder = new global::S2CGameStartNotification();
                        if (payloadCase_ == PayloadOneofCase.GameStartNotification)
                        {
                            subBuilder.MergeFrom(GameStartNotification);
                        }
                        input.ReadMessage(subBuilder);
                        GameStartNotification = subBuilder;
                        break;
                    }
                case 186:
                    {
                        global::C2SPositionUpdateRequest subBuilder = new global::C2SPositionUpdateRequest();
                        if (payloadCase_ == PayloadOneofCase.PositionUpdateRequest)
                        {
                            subBuilder.MergeFrom(PositionUpdateRequest);
                        }
                        input.ReadMessage(subBuilder);
                        PositionUpdateRequest = subBuilder;
                        break;
                    }
                case 194:
                    {
                        global::S2CPositionUpdateNotification subBuilder = new global::S2CPositionUpdateNotification();
                        if (payloadCase_ == PayloadOneofCase.PositionUpdateNotification)
                        {
                            subBuilder.MergeFrom(PositionUpdateNotification);
                        }
                        input.ReadMessage(subBuilder);
                        PositionUpdateNotification = subBuilder;
                        break;
                    }
                case 202:
                    {
                        global::C2SUseCardRequest subBuilder = new global::C2SUseCardRequest();
                        if (payloadCase_ == PayloadOneofCase.UseCardRequest)
                        {
                            subBuilder.MergeFrom(UseCardRequest);
                        }
                        input.ReadMessage(subBuilder);
                        UseCardRequest = subBuilder;
                        break;
                    }
                case 210:
                    {
                        global::S2CUseCardResponse subBuilder = new global::S2CUseCardResponse();
                        if (payloadCase_ == PayloadOneofCase.UseCardResponse)
                        {
                            subBuilder.MergeFrom(UseCardResponse);
                        }
                        input.ReadMessage(subBuilder);
                        UseCardResponse = subBuilder;
                        break;
                    }
                case 218:
                    {
                        global::S2CUseCardNotification subBuilder = new global::S2CUseCardNotification();
                        if (payloadCase_ == PayloadOneofCase.UseCardNotification)
                        {
                            subBuilder.MergeFrom(UseCardNotification);
                        }
                        input.ReadMessage(subBuilder);
                        UseCardNotification = subBuilder;
                        break;
                    }
                case 226:
                    {
                        global::S2CEquipCardNotification subBuilder = new global::S2CEquipCardNotification();
                        if (payloadCase_ == PayloadOneofCase.EquipCardNotification)
                        {
                            subBuilder.MergeFrom(EquipCardNotification);
                        }
                        input.ReadMessage(subBuilder);
                        EquipCardNotification = subBuilder;
                        break;
                    }
                case 234:
                    {
                        global::S2CCardEffectNotification subBuilder = new global::S2CCardEffectNotification();
                        if (payloadCase_ == PayloadOneofCase.CardEffectNotification)
                        {
                            subBuilder.MergeFrom(CardEffectNotification);
                        }
                        input.ReadMessage(subBuilder);
                        CardEffectNotification = subBuilder;
                        break;
                    }
                case 242:
                    {
                        global::S2CFleaMarketNotification subBuilder = new global::S2CFleaMarketNotification();
                        if (payloadCase_ == PayloadOneofCase.FleaMarketNotification)
                        {
                            subBuilder.MergeFrom(FleaMarketNotification);
                        }
                        input.ReadMessage(subBuilder);
                        FleaMarketNotification = subBuilder;
                        break;
                    }
                case 250:
                    {
                        global::C2SFleaMarketPickRequest subBuilder = new global::C2SFleaMarketPickRequest();
                        if (payloadCase_ == PayloadOneofCase.FleaMarketPickRequest)
                        {
                            subBuilder.MergeFrom(FleaMarketPickRequest);
                        }
                        input.ReadMessage(subBuilder);
                        FleaMarketPickRequest = subBuilder;
                        break;
                    }
                case 258:
                    {
                        global::S2CFleaMarketPickResponse subBuilder = new global::S2CFleaMarketPickResponse();
                        if (payloadCase_ == PayloadOneofCase.FleaMarketPickResponse)
                        {
                            subBuilder.MergeFrom(FleaMarketPickResponse);
                        }
                        input.ReadMessage(subBuilder);
                        FleaMarketPickResponse = subBuilder;
                        break;
                    }
                case 266:
                    {
                        global::C2SFleaMarketCardPickRequest subBuilder = new global::C2SFleaMarketCardPickRequest();
                        if (payloadCase_ == PayloadOneofCase.FleMarketCardPickRequest)
                        {
                            subBuilder.MergeFrom(FleMarketCardPickRequest);
                        }
                        input.ReadMessage(subBuilder);
                        FleMarketCardPickRequest = subBuilder;
                        break;
                    }
                case 274:
                    {
                        global::S2CFleaMarketCardPickResponse subBuilder = new global::S2CFleaMarketCardPickResponse();
                        if (payloadCase_ == PayloadOneofCase.FleMarketCardPickResponse)
                        {
                            subBuilder.MergeFrom(FleMarketCardPickResponse);
                        }
                        input.ReadMessage(subBuilder);
                        FleMarketCardPickResponse = subBuilder;
                        break;
                    }
                case 282:
                    {
                        global::S2CUserUpdateNotification subBuilder = new global::S2CUserUpdateNotification();
                        if (payloadCase_ == PayloadOneofCase.UserUpdateNotification)
                        {
                            subBuilder.MergeFrom(UserUpdateNotification);
                        }
                        input.ReadMessage(subBuilder);
                        UserUpdateNotification = subBuilder;
                        break;
                    }
                case 290:
                    {
                        global::S2CPhaseUpdateNotification subBuilder = new global::S2CPhaseUpdateNotification();
                        if (payloadCase_ == PayloadOneofCase.PhaseUpdateNotification)
                        {
                            subBuilder.MergeFrom(PhaseUpdateNotification);
                        }
                        input.ReadMessage(subBuilder);
                        PhaseUpdateNotification = subBuilder;
                        break;
                    }
                case 298:
                    {
                        global::C2SReactionRequest subBuilder = new global::C2SReactionRequest();
                        if (payloadCase_ == PayloadOneofCase.ReactionRequest)
                        {
                            subBuilder.MergeFrom(ReactionRequest);
                        }
                        input.ReadMessage(subBuilder);
                        ReactionRequest = subBuilder;
                        break;
                    }
                case 306:
                    {
                        global::S2CReactionResponse subBuilder = new global::S2CReactionResponse();
                        if (payloadCase_ == PayloadOneofCase.ReactionResponse)
                        {
                            subBuilder.MergeFrom(ReactionResponse);
                        }
                        input.ReadMessage(subBuilder);
                        ReactionResponse = subBuilder;
                        break;
                    }
                case 314:
                    {
                        global::C2SDestroyCardRequest subBuilder = new global::C2SDestroyCardRequest();
                        if (payloadCase_ == PayloadOneofCase.DestroyCardRequest)
                        {
                            subBuilder.MergeFrom(DestroyCardRequest);
                        }
                        input.ReadMessage(subBuilder);
                        DestroyCardRequest = subBuilder;
                        break;
                    }
                case 322:
                    {
                        global::S2CDestroyCardResponse subBuilder = new global::S2CDestroyCardResponse();
                        if (payloadCase_ == PayloadOneofCase.DestroyCardResponse)
                        {
                            subBuilder.MergeFrom(DestroyCardResponse);
                        }
                        input.ReadMessage(subBuilder);
                        DestroyCardResponse = subBuilder;
                        break;
                    }
                case 330:
                    {
                        global::S2CGameEndNotification subBuilder = new global::S2CGameEndNotification();
                        if (payloadCase_ == PayloadOneofCase.GameEndNotification)
                        {
                            subBuilder.MergeFrom(GameEndNotification);
                        }
                        input.ReadMessage(subBuilder);
                        GameEndNotification = subBuilder;
                        break;
                    }
                case 338:
                    {
                        global::C2SCardSelectRequest subBuilder = new global::C2SCardSelectRequest();
                        if (payloadCase_ == PayloadOneofCase.CardSelectRequest)
                        {
                            subBuilder.MergeFrom(CardSelectRequest);
                        }
                        input.ReadMessage(subBuilder);
                        CardSelectRequest = subBuilder;
                        break;
                    }
                case 346:
                    {
                        global::S2CCardSelectResponse subBuilder = new global::S2CCardSelectResponse();
                        if (payloadCase_ == PayloadOneofCase.CardSelectResponse)
                        {
                            subBuilder.MergeFrom(CardSelectResponse);
                        }
                        input.ReadMessage(subBuilder);
                        CardSelectResponse = subBuilder;
                        break;
                    }
                case 354:
                    {
                        global::C2SPassDebuffRequest subBuilder = new global::C2SPassDebuffRequest();
                        if (payloadCase_ == PayloadOneofCase.PassDebuffRequest)
                        {
                            subBuilder.MergeFrom(PassDebuffRequest);
                        }
                        input.ReadMessage(subBuilder);
                        PassDebuffRequest = subBuilder;
                        break;
                    }
                case 362:
                    {
                        global::S2CPassDebuffResponse subBuilder = new global::S2CPassDebuffResponse();
                        if (payloadCase_ == PayloadOneofCase.PassDebuffResponse)
                        {
                            subBuilder.MergeFrom(PassDebuffResponse);
                        }
                        input.ReadMessage(subBuilder);
                        PassDebuffResponse = subBuilder;
                        break;
                    }
                case 370:
                    {
                        global::S2CWarningNotification subBuilder = new global::S2CWarningNotification();
                        if (payloadCase_ == PayloadOneofCase.WarningNotification)
                        {
                            subBuilder.MergeFrom(WarningNotification);
                        }
                        input.ReadMessage(subBuilder);
                        WarningNotification = subBuilder;
                        break;
                    }
                case 378:
                    {
                        global::S2CAnimationNotification subBuilder = new global::S2CAnimationNotification();
                        if (payloadCase_ == PayloadOneofCase.AnimationNotification)
                        {
                            subBuilder.MergeFrom(AnimationNotification);
                        }
                        input.ReadMessage(subBuilder);
                        AnimationNotification = subBuilder;
                        break;
                    }
                case 386:
                    {
                        global::C2SMonsterDeathRewardRequest subBuilder = new global::C2SMonsterDeathRewardRequest();
                        if (payloadCase_ == PayloadOneofCase.MonsterDeathRewardRequest)
                        {
                            subBuilder.MergeFrom(MonsterDeathRewardRequest);
                        }
                        input.ReadMessage(subBuilder);
                        MonsterDeathRewardRequest = subBuilder;
                        break;
                    }
                case 394:
                    {
                        global::S2CMonsterDeathRewardResponse subBuilder = new global::S2CMonsterDeathRewardResponse();
                        if (payloadCase_ == PayloadOneofCase.MonsterDeathRewardResponse)
                        {
                            subBuilder.MergeFrom(MonsterDeathRewardResponse);
                        }
                        input.ReadMessage(subBuilder);
                        MonsterDeathRewardResponse = subBuilder;
                        break;
                    }
            }
        }
    }

}

#endregion


#endregion Designer generated code
